This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cursor/
  rules/
    ultracite.mdc
apps/
  registry/
    app/
      [component]/
        route.ts
    .gitignore
    next.config.ts
    package.json
    tsconfig.json
  test/
    app/
      examples/
        actions.tsx
        artifact.tsx
        branch.tsx
        chain-of-thought.tsx
        code-block.tsx
        context.tsx
        conversation.tsx
        image.tsx
        inline-citation.tsx
        loader.tsx
        message.tsx
        open-in-chat.tsx
        prompt-input.tsx
        reasoning.tsx
        response.tsx
        sources.tsx
        suggestion.tsx
        task.tsx
        tool.tsx
        web-preview.tsx
      globals.css
      layout.tsx
      page.tsx
    public/
      file.svg
      globe.svg
      next.svg
      vercel.svg
      window.svg
    .gitignore
    next.config.ts
    package.json
    postcss.config.mjs
    README.md
    tsconfig.json
packages/
  elements/
    src/
      actions.tsx
      artifact.tsx
      branch.tsx
      chain-of-thought.tsx
      code-block.tsx
      context.tsx
      conversation.tsx
      image.tsx
      inline-citation.tsx
      loader.tsx
      message.tsx
      open-in-chat.tsx
      prompt-input.tsx
      reasoning.tsx
      response.tsx
      sources.tsx
      suggestion.tsx
      task.tsx
      tool.tsx
      web-preview.tsx
    package.json
    tsconfig.json
  examples/
    src/
      actions-hover.tsx
      actions.tsx
      artifact.tsx
      branch.tsx
      chain-of-thought.tsx
      chatbot.tsx
      code-block-dark.tsx
      code-block.tsx
      context.tsx
      conversation.tsx
      demo-chatgpt.tsx
      demo-claude.tsx
      demo-grok.tsx
      image.tsx
      inline-citation.tsx
      loader-custom.tsx
      loader-sizes.tsx
      loader.tsx
      message-markdown.tsx
      message.tsx
      open-in-chat.tsx
      prompt-input.tsx
      reasoning.tsx
      response.tsx
      sources-custom.tsx
      sources.tsx
      suggestion-input.tsx
      suggestion.tsx
      task.tsx
      tool-input-available.tsx
      tool-input-streaming.tsx
      tool-output-available.tsx
      tool-output-error.tsx
      tool.tsx
      v0-clone.tsx
      web-preview.tsx
    package.json
    tsconfig.json
  registry/
    index.js
    LICENSE
    package.json
    README.md
  shadcn-ui/
    components/
      ui/
        accordion.tsx
        alert-dialog.tsx
        alert.tsx
        aspect-ratio.tsx
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        calendar.tsx
        card.tsx
        carousel.tsx
        chart.tsx
        checkbox.tsx
        collapsible.tsx
        command.tsx
        context-menu.tsx
        dialog.tsx
        drawer.tsx
        dropdown-menu.tsx
        form.tsx
        hover-card.tsx
        input-otp.tsx
        input.tsx
        label.tsx
        menubar.tsx
        navigation-menu.tsx
        pagination.tsx
        popover.tsx
        progress.tsx
        radio-group.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        slider.tsx
        sonner.tsx
        switch.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        toggle-group.tsx
        toggle.tsx
        tooltip.tsx
    hooks/
      use-mobile.ts
      use-toast.ts
    lib/
      utils.ts
    components.json
    package.json
    tsconfig.json
  typescript-config/
    base.json
    nextjs.json
    package.json
    react-library.json
.gitignore
biome.jsonc
LICENSE
package.json
pnpm-workspace.yaml
README.md
tsconfig.json
turbo.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/ultracite.mdc">
---
description: Ultracite Rules - AI-Ready Formatter and Linter
globs: "**/*.{ts,tsx,js,jsx}"
alwaysApply: true
---

# Project Context
Ultracite enforces strict type safety, accessibility standards, and consistent code quality for JavaScript/TypeScript projects using Biome's lightning-fast formatter and linter.

## Key Principles
- Zero configuration required
- Subsecond performance
- Maximum type safety
- AI-friendly code generation

## Before Writing Code
1. Analyze existing patterns in the codebase
2. Consider edge cases and error scenarios
3. Follow the rules below strictly
4. Validate accessibility requirements

## Rules

### Accessibility (a11y)
- Don't use `accessKey` attribute on any HTML element.
- Don't set `aria-hidden="true"` on focusable elements.
- Don't add ARIA roles, states, and properties to elements that don't support them.
- Don't use distracting elements like `<marquee>` or `<blink>`.
- Only use the `scope` prop on `<th>` elements.
- Don't assign non-interactive ARIA roles to interactive HTML elements.
- Make sure label elements have text content and are associated with an input.
- Don't assign interactive ARIA roles to non-interactive HTML elements.
- Don't assign `tabIndex` to non-interactive HTML elements.
- Don't use positive integers for `tabIndex` property.
- Don't include "image", "picture", or "photo" in img alt prop.
- Don't use explicit role property that's the same as the implicit/default role.
- Make static elements with click handlers use a valid role attribute.
- Always include a `title` element for SVG elements.
- Give all elements requiring alt text meaningful information for screen readers.
- Make sure anchors have content that's accessible to screen readers.
- Assign `tabIndex` to non-interactive HTML elements with `aria-activedescendant`.
- Include all required ARIA attributes for elements with ARIA roles.
- Make sure ARIA properties are valid for the element's supported roles.
- Always include a `type` attribute for button elements.
- Make elements with interactive roles and handlers focusable.
- Give heading elements content that's accessible to screen readers (not hidden with `aria-hidden`).
- Always include a `lang` attribute on the html element.
- Always include a `title` attribute for iframe elements.
- Accompany `onClick` with at least one of: `onKeyUp`, `onKeyDown`, or `onKeyPress`.
- Accompany `onMouseOver`/`onMouseOut` with `onFocus`/`onBlur`.
- Include caption tracks for audio and video elements.
- Use semantic elements instead of role attributes in JSX.
- Make sure all anchors are valid and navigable.
- Ensure all ARIA properties (`aria-*`) are valid.
- Use valid, non-abstract ARIA roles for elements with ARIA roles.
- Use valid ARIA state and property values.
- Use valid values for the `autocomplete` attribute on input elements.
- Use correct ISO language/country codes for the `lang` attribute.

### Code Complexity and Quality
- Don't use consecutive spaces in regular expression literals.
- Don't use the `arguments` object.
- Don't use primitive type aliases or misleading types.
- Don't use the comma operator.
- Don't use empty type parameters in type aliases and interfaces.
- Don't write functions that exceed a given Cognitive Complexity score.
- Don't nest describe() blocks too deeply in test files.
- Don't use unnecessary boolean casts.
- Don't use unnecessary callbacks with flatMap.
- Use for...of statements instead of Array.forEach.
- Don't create classes that only have static members (like a static namespace).
- Don't use this and super in static contexts.
- Don't use unnecessary catch clauses.
- Don't use unnecessary constructors.
- Don't use unnecessary continue statements.
- Don't export empty modules that don't change anything.
- Don't use unnecessary escape sequences in regular expression literals.
- Don't use unnecessary fragments.
- Don't use unnecessary labels.
- Don't use unnecessary nested block statements.
- Don't rename imports, exports, and destructured assignments to the same name.
- Don't use unnecessary string or template literal concatenation.
- Don't use String.raw in template literals when there are no escape sequences.
- Don't use useless case statements in switch statements.
- Don't use ternary operators when simpler alternatives exist.
- Don't use useless `this` aliasing.
- Don't use any or unknown as type constraints.
- Don't initialize variables to undefined.
- Don't use the void operators (they're not familiar).
- Use arrow functions instead of function expressions.
- Use Date.now() to get milliseconds since the Unix Epoch.
- Use .flatMap() instead of map().flat() when possible.
- Use literal property access instead of computed property access.
- Don't use parseInt() or Number.parseInt() when binary, octal, or hexadecimal literals work.
- Use concise optional chaining instead of chained logical expressions.
- Use regular expression literals instead of the RegExp constructor when possible.
- Don't use number literal object member names that aren't base 10 or use underscore separators.
- Remove redundant terms from logical expressions.
- Use while loops instead of for loops when you don't need initializer and update expressions.
- Don't pass children as props.
- Don't reassign const variables.
- Don't use constant expressions in conditions.
- Don't use `Math.min` and `Math.max` to clamp values when the result is constant.
- Don't return a value from a constructor.
- Don't use empty character classes in regular expression literals.
- Don't use empty destructuring patterns.
- Don't call global object properties as functions.
- Don't declare functions and vars that are accessible outside their block.
- Make sure builtins are correctly instantiated.
- Don't use super() incorrectly inside classes. Also check that super() is called in classes that extend other constructors.
- Don't use variables and function parameters before they're declared.
- Don't use 8 and 9 escape sequences in string literals.
- Don't use literal numbers that lose precision.

### React and JSX Best Practices
- Don't use the return value of React.render.
- Make sure all dependencies are correctly specified in React hooks.
- Make sure all React hooks are called from the top level of component functions.
- Don't forget key props in iterators and collection literals.
- Don't destructure props inside JSX components in Solid projects.
- Don't define React components inside other components.
- Don't use event handlers on non-interactive elements.
- Don't assign to React component props.
- Don't use both `children` and `dangerouslySetInnerHTML` props on the same element.
- Don't use dangerous JSX props.
- Don't use Array index in keys.
- Don't insert comments as text nodes.
- Don't assign JSX properties multiple times.
- Don't add extra closing tags for components without children.
- Use `<>...</>` instead of `<Fragment>...</Fragment>`.
- Watch out for possible "wrong" semicolons inside JSX elements.

### Correctness and Safety
- Don't assign a value to itself.
- Don't return a value from a setter.
- Don't compare expressions that modify string case with non-compliant values.
- Don't use lexical declarations in switch clauses.
- Don't use variables that haven't been declared in the document.
- Don't write unreachable code.
- Make sure super() is called exactly once on every code path in a class constructor before this is accessed if the class has a superclass.
- Don't use control flow statements in finally blocks.
- Don't use optional chaining where undefined values aren't allowed.
- Don't have unused function parameters.
- Don't have unused imports.
- Don't have unused labels.
- Don't have unused private class members.
- Don't have unused variables.
- Make sure void (self-closing) elements don't have children.
- Don't return a value from a function with the return type 'void'
- Use isNaN() when checking for NaN.
- Make sure "for" loop update clauses move the counter in the right direction.
- Make sure typeof expressions are compared to valid values.
- Make sure generator functions contain yield.
- Don't use await inside loops.
- Don't use bitwise operators.
- Don't use expressions where the operation doesn't change the value.
- Make sure Promise-like statements are handled appropriately.
- Don't use __dirname and __filename in the global scope.
- Prevent import cycles.
- Don't use configured elements.
- Don't hardcode sensitive data like API keys and tokens.
- Don't let variable declarations shadow variables from outer scopes.
- Don't use the TypeScript directive @ts-ignore.
- Prevent duplicate polyfills from Polyfill.io.
- Don't use useless backreferences in regular expressions that always match empty strings.
- Don't use unnecessary escapes in string literals.
- Don't use useless undefined.
- Make sure getters and setters for the same property are next to each other in class and object definitions.
- Make sure object literals are declared consistently (defaults to explicit definitions).
- Use static Response methods instead of new Response() constructor when possible.
- Make sure switch-case statements are exhaustive.
- Make sure the `preconnect` attribute is used when using Google Fonts.
- Use `Array#{indexOf,lastIndexOf}()` instead of `Array#{findIndex,findLastIndex}()` when looking for the index of an item.
- Make sure iterable callbacks return consistent values.
- Use `with { type: "json" }` for JSON module imports.
- Use numeric separators in numeric literals.
- Use object spread instead of `Object.assign()` when constructing new objects.
- Always use the radix argument when using `parseInt()`.
- Make sure JSDoc comment lines start with a single asterisk, except for the first one.
- Include a description parameter for `Symbol()`.
- Don't use spread (`...`) syntax on accumulators.
- Don't use the `delete` operator.
- Don't access namespace imports dynamically.
- Don't use namespace imports.
- Declare regex literals at the top level.
- Don't use `target="_blank"` without `rel="noopener"`.

### TypeScript Best Practices
- Don't use TypeScript enums.
- Don't export imported variables.
- Don't add type annotations to variables, parameters, and class properties that are initialized with literal expressions.
- Don't use TypeScript namespaces.
- Don't use non-null assertions with the `!` postfix operator.
- Don't use parameter properties in class constructors.
- Don't use user-defined types.
- Use `as const` instead of literal types and type annotations.
- Use either `T[]` or `Array<T>` consistently.
- Initialize each enum member value explicitly.
- Use `export type` for types.
- Use `import type` for types.
- Make sure all enum members are literal values.
- Don't use TypeScript const enum.
- Don't declare empty interfaces.
- Don't let variables evolve into any type through reassignments.
- Don't use the any type.
- Don't misuse the non-null assertion operator (!) in TypeScript files.
- Don't use implicit any type on variable declarations.
- Don't merge interfaces and classes unsafely.
- Don't use overload signatures that aren't next to each other.
- Use the namespace keyword instead of the module keyword to declare TypeScript namespaces.

### Style and Consistency
- Don't use global `eval()`.
- Don't use callbacks in asynchronous tests and hooks.
- Don't use negation in `if` statements that have `else` clauses.
- Don't use nested ternary expressions.
- Don't reassign function parameters.
- This rule lets you specify global variable names you don't want to use in your application.
- Don't use specified modules when loaded by import or require.
- Don't use constants whose value is the upper-case version of their name.
- Use `String.slice()` instead of `String.substr()` and `String.substring()`.
- Don't use template literals if you don't need interpolation or special-character handling.
- Don't use `else` blocks when the `if` block breaks early.
- Don't use yoda expressions.
- Don't use Array constructors.
- Use `at()` instead of integer index access.
- Follow curly brace conventions.
- Use `else if` instead of nested `if` statements in `else` clauses.
- Use single `if` statements instead of nested `if` clauses.
- Use `new` for all builtins except `String`, `Number`, and `Boolean`.
- Use consistent accessibility modifiers on class properties and methods.
- Use `const` declarations for variables that are only assigned once.
- Put default function parameters and optional function parameters last.
- Include a `default` clause in switch statements.
- Use the `**` operator instead of `Math.pow`.
- Use `for-of` loops when you need the index to extract an item from the iterated array.
- Use `node:assert/strict` over `node:assert`.
- Use the `node:` protocol for Node.js builtin modules.
- Use Number properties instead of global ones.
- Use assignment operator shorthand where possible.
- Use function types instead of object types with call signatures.
- Use template literals over string concatenation.
- Use `new` when throwing an error.
- Don't throw non-Error values.
- Use `String.trimStart()` and `String.trimEnd()` over `String.trimLeft()` and `String.trimRight()`.
- Use standard constants instead of approximated literals.
- Don't assign values in expressions.
- Don't use async functions as Promise executors.
- Don't reassign exceptions in catch clauses.
- Don't reassign class members.
- Don't compare against -0.
- Don't use labeled statements that aren't loops.
- Don't use void type outside of generic or return types.
- Don't use console.
- Don't use control characters and escape sequences that match control characters in regular expression literals.
- Don't use debugger.
- Don't assign directly to document.cookie.
- Use `===` and `!==`.
- Don't use duplicate case labels.
- Don't use duplicate class members.
- Don't use duplicate conditions in if-else-if chains.
- Don't use two keys with the same name inside objects.
- Don't use duplicate function parameter names.
- Don't have duplicate hooks in describe blocks.
- Don't use empty block statements and static blocks.
- Don't let switch clauses fall through.
- Don't reassign function declarations.
- Don't allow assignments to native objects and read-only global variables.
- Use Number.isFinite instead of global isFinite.
- Use Number.isNaN instead of global isNaN.
- Don't assign to imported bindings.
- Don't use irregular whitespace characters.
- Don't use labels that share a name with a variable.
- Don't use characters made with multiple code points in character class syntax.
- Make sure to use new and constructor properly.
- Don't use shorthand assign when the variable appears on both sides.
- Don't use octal escape sequences in string literals.
- Don't use Object.prototype builtins directly.
- Don't redeclare variables, functions, classes, and types in the same scope.
- Don't have redundant "use strict".
- Don't compare things where both sides are exactly the same.
- Don't let identifiers shadow restricted names.
- Don't use sparse arrays (arrays with holes).
- Don't use template literal placeholder syntax in regular strings.
- Don't use the then property.
- Don't use unsafe negation.
- Don't use var.
- Don't use with statements in non-strict contexts.
- Make sure async functions actually use await.
- Make sure default clauses in switch statements come last.
- Make sure to pass a message value when creating a built-in error.
- Make sure get methods always return a value.
- Use a recommended display strategy with Google Fonts.
- Make sure for-in loops include an if statement.
- Use Array.isArray() instead of instanceof Array.
- Make sure to use the digits argument with Number#toFixed().
- Make sure to use the "use strict" directive in script files.

### Next.js Specific Rules
- Don't use `<img>` elements in Next.js projects.
- Don't use `<head>` elements in Next.js projects.
- Don't import next/document outside of pages/_document.jsx in Next.js projects.
- Don't use the next/head module in pages/_document.js on Next.js projects.

### Testing Best Practices
- Don't use export or module.exports in test files.
- Don't use focused tests.
- Make sure the assertion function, like expect, is placed inside an it() function call.
- Don't use disabled tests.

## Common Tasks
- `npx ultracite init` - Initialize Ultracite in your project
- `npx ultracite format` - Format and fix code automatically
- `npx ultracite lint` - Check for issues without fixing

## Example: Error Handling
```typescript
// ✅ Good: Comprehensive error handling
try {
  const result = await fetchData();
  return { success: true, data: result };
} catch (error) {
  console.error('API call failed:', error);
  return { success: false, error: error.message };
}

// ❌ Bad: Swallowing errors
try {
  return await fetchData();
} catch (e) {
  console.log(e);
}
```
</file>

<file path="apps/registry/app/[component]/route.ts">
/** biome-ignore-all lint/suspicious/noConsole: "server only" */

import { promises as fs, readdirSync } from "node:fs";
import { readFile } from "node:fs/promises";
import { join } from "node:path";
import { track } from "@vercel/analytics/server";
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import type { Registry, RegistryItem } from "shadcn/schema";
import { Project } from "ts-morph";

const protocol = process.env.NODE_ENV === "development" ? "http" : "https";
const registryUrl = `${protocol}://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`;

const packageDir = join(process.cwd(), "..", "..", "packages", "elements");
const packagePath = join(packageDir, "package.json");
const packageJson = JSON.parse(await readFile(packagePath, "utf-8"));

const examplesDir = join(
  process.cwd(),
  "..",
  "..",
  "packages",
  "examples",
  "src"
);

const internalDependencies = Object.keys(packageJson.dependencies || {}).filter(
  (dep) => dep.startsWith("@repo") && dep !== "@repo/shadcn-ui"
);

const dependenciesSet = new Set(
  Object.keys(packageJson.dependencies || {}).filter(
    (dep) =>
      ![
        "react",
        "react-dom",
        "@repo/shadcn-ui",
        ...internalDependencies,
      ].includes(dep)
  )
);

const devDependenciesSet = new Set(
  Object.keys(packageJson.devDependencies || {}).filter(
    (dep) =>
      ![
        "@repo/typescript-config",
        "@types/react",
        "@types/react-dom",
        "typescript",
      ].includes(dep)
  )
);

// Registry should auto-add ai sdk v5 as a dependency
dependenciesSet.add("ai");
dependenciesSet.add("@ai-sdk/react");
dependenciesSet.add("zod");

const dependencies = Array.from(dependenciesSet);
const devDependencies = Array.from(devDependenciesSet);
const srcDir = join(packageDir, "src");

const packageFiles = readdirSync(srcDir, { withFileTypes: true });
const tsxFiles = packageFiles.filter(
  (file) => file.isFile() && file.name.endsWith(".tsx")
);

const exampleFiles = readdirSync(examplesDir, { withFileTypes: true });
const exampleTsxFiles = exampleFiles.filter(
  (file) => file.isFile() && file.name.endsWith(".tsx")
);

const files: {
  type: string;
  path: string;
  content: string;
}[] = [];

const fileContents = await Promise.all(
  tsxFiles.map(async (tsxFile) => {
    const filePath = join(srcDir, tsxFile.name);
    const content = await fs.readFile(filePath, "utf-8");
    const parsedContent = content.replace(/@repo\/shadcn-ui\//g, "@/");

    return {
      type: "registry:component",
      path: `registry/default/ai-elements/${tsxFile.name}`,
      content: parsedContent,
    };
  })
);

const exampleContents = await Promise.all(
  exampleTsxFiles.map(async (exampleFile) => {
    const filePath = join(examplesDir, exampleFile.name);
    const content = await fs.readFile(filePath, "utf-8");
    const parsedContent = content
      .replace(/@repo\/shadcn-ui\//g, "@/")
      .replace(/@repo\/elements\//g, "@/components/ai-elements/");

    return {
      type: "registry:block",
      path: `registry/default/examples/${exampleFile.name}`,
      content: parsedContent,
    };
  })
);

files.push(...fileContents, ...exampleContents);

const registryDependenciesSet = new Set<string>();

// Extract shadcn/ui components from file content
const shadcnComponents =
  files
    .map((f) => f.content)
    .join("\n")
    .match(/@\/components\/ui\/([a-z-]+)/g)
    ?.map((path) => path.split("/").pop())
    .filter((name): name is string => Boolean(name)) || [];

// Extract AI element components from file content
const aiElementComponents =
  files
    .map((f) => f.content)
    .join("\n")
    .match(/@\/components\/ai-elements\/([a-z-]+)/g)
    ?.map((path) => path.split("/").pop())
    .filter((name): name is string => Boolean(name)) || [];

// Add shadcn/ui components to set
for (const component of shadcnComponents) {
  registryDependenciesSet.add(component);
}

// Add AI element components to set (these become registry dependencies)
for (const component of aiElementComponents) {
  registryDependenciesSet.add(component);
}

// Create items for the root registry response
const componentItems: RegistryItem[] = tsxFiles.map((componentFile) => {
  const componentName = componentFile.name.replace(".tsx", "");

  const item: RegistryItem = {
    name: componentName,
    type: "registry:component",
    title: componentName
      .split("-")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" "),
    description: `AI-powered ${componentName.replace("-", " ")} component.`,
    files: [
      {
        path: `registry/default/ai-elements/${componentFile.name}`,
        type: "registry:component",
        target: `components/ai-elements/${componentFile.name}.tsx`,
      },
    ],
  };

  return item;
});

const exampleItems: RegistryItem[] = exampleTsxFiles.map((exampleFile) => {
  const exampleName = exampleFile.name.replace(".tsx", "");

  const item: RegistryItem = {
    name: `example-${exampleName}`,
    type: "registry:block",
    title: `${exampleName
      .split("-")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ")} Example`,
    description: `Example implementation of ${exampleName.replace("-", " ")}.`,
    files: [
      {
        path: `registry/default/examples/${exampleFile.name}`,
        type: "registry:block",
        target: `components/ai-elements/examples/${exampleFile.name}.tsx`,
      },
    ],
  };

  return item;
});

const items: RegistryItem[] = [...componentItems, ...exampleItems];

const response: Registry = {
  name: "ai-elements",
  homepage: new URL("/elements", registryUrl).toString(),
  items,
};

type RequestProps = {
  params: Promise<{ component: string }>;
};

export const GET = async (_request: NextRequest, { params }: RequestProps) => {
  const { component } = await params;
  const parsedComponent = component.replace(".json", "");

  if (parsedComponent === "registry") {
    try {
      track("registry:registry");
    } catch (error) {
      console.warn("Failed to track registry:registry:", error);
    }
    return NextResponse.json(response);
  }

  // Handle "all.json" - bundle all components into a single RegistryItem
  if (parsedComponent === "all") {
    try {
      track("registry:all");
    } catch (error) {
      console.warn("Failed to track registry:all:", error);
    }

    // Collect all dependencies and registry dependencies from all components
    const allDependencies = new Set<string>();
    const allDevDependencies = new Set<string>();
    const allRegistryDependencies = new Set<string>();
    const allFiles: RegistryItem["files"] = [];

    // Process each component file
    for (const componentFile of tsxFiles) {
      const file = files.find(
        (f) => f.path === `registry/default/ai-elements/${componentFile.name}`
      );

      if (file) {
        allFiles.push({
          path: file.path,
          type: file.type as RegistryItem["type"],
          content: file.content,
          target: `components/ai-elements/${componentFile.name}`,
        });

        // Parse imports for dependencies
        const project = new Project({ useInMemoryFileSystem: true });
        try {
          const sourceFile = project.createSourceFile(file.path, file.content);
          const imports = sourceFile
            .getImportDeclarations()
            .map((d) => d.getModuleSpecifierValue());

          for (const moduleName of imports) {
            if (!moduleName) {
              continue;
            }

            // Check if it's a regular dependency
            if (dependencies.includes(moduleName)) {
              allDependencies.add(moduleName);
            }

            // Check if it's a dev dependency
            if (devDependencies.includes(moduleName)) {
              allDevDependencies.add(moduleName);
            }

            // Check if it's a registry dependency (shadcn/ui components)
            if (moduleName.startsWith("@/components/ui/")) {
              const componentName = moduleName.split("/").pop();
              if (componentName) {
                allRegistryDependencies.add(componentName);
              }
            }
          }
        } catch (error) {
          console.warn(`Failed to parse imports for ${file.path}:`, error);
        }
      }
    }

    const allComponentsItem: RegistryItem = {
      $schema: "https://ui.shadcn.com/schema/registry-item.json",
      name: "all",
      type: "registry:component",
      title: "All AI Elements",
      description: "Bundle containing all AI-powered components.",
      files: allFiles,
      dependencies: Array.from(allDependencies),
      devDependencies: Array.from(allDevDependencies),
      registryDependencies: Array.from(allRegistryDependencies),
    };

    return NextResponse.json(allComponentsItem);
  }

  try {
    track(`registry:${parsedComponent}`);
  } catch (error) {
    console.warn(`Failed to track ${parsedComponent}:`, error);
  }

  // Only process the parsedComponent, not an array

  // Find the item for the requested component or example
  const item = response.items.find((i) => i.name === parsedComponent);

  if (!item) {
    return NextResponse.json(
      { error: `Component "${parsedComponent}" not found.` },
      { status: 404 }
    );
  }

  // Find the corresponding file content
  let file: { type: string; path: string; content: string } | undefined;
  if (item.type === "registry:component") {
    file = files.find(
      (f) => f.path === `registry/default/ai-elements/${parsedComponent}.tsx`
    );
  } else if (
    item.type === "registry:block" &&
    parsedComponent.startsWith("example-")
  ) {
    const exampleFileName = `${parsedComponent.replace("example-", "")}.tsx`;
    file = files.find(
      (f) => f.path === `registry/default/examples/${exampleFileName}`
    );
  }

  if (!file) {
    return NextResponse.json(
      { error: `File for "${parsedComponent}" not found.` },
      { status: 404 }
    );
  }

  // Parse imports for the single component to determine actual dependencies
  const usedDependencies = new Set<string>();
  const usedDevDependencies = new Set<string>();
  const usedRegistryDependencies = new Set<string>();

  const project = new Project({ useInMemoryFileSystem: true });

  try {
    const sourceFile = project.createSourceFile(file.path, file.content);
    const imports = sourceFile
      .getImportDeclarations()
      .map((d) => d.getModuleSpecifierValue());

    for (const moduleName of imports) {
      if (!moduleName) {
        continue;
      }

      // Check if it's a relative dependency
      if (moduleName.startsWith("./")) {
        const relativePath = moduleName.split("/").pop();
        if (relativePath) {
          usedRegistryDependencies.add(
            new URL(`/${relativePath}.json`, registryUrl).toString()
          );
        }
      }

      // Check if it's a regular dependency
      if (dependencies.includes(moduleName)) {
        usedDependencies.add(moduleName);
      }

      // Check if it's a dev dependency (though less common in component files)
      if (devDependencies.includes(moduleName)) {
        usedDevDependencies.add(moduleName);
      }

      // Check if it's a registry dependency (shadcn/ui components)
      if (moduleName.startsWith("@/components/ui/")) {
        const componentName = moduleName.split("/").pop();
        if (componentName) {
          usedRegistryDependencies.add(componentName);
        }
      }

      // Check if it's an AI element dependency
      if (moduleName.startsWith("@/components/ai-elements/")) {
        const componentName = moduleName.split("/").pop();
        if (componentName) {
          usedRegistryDependencies.add(
            new URL(`/${componentName}.json`, registryUrl).toString()
          );
        }
      }
    }
  } catch (error) {
    console.warn(`Failed to parse imports for ${file.path}:`, error);
  }

  // Add internal dependencies for the requested component
  for (const dep of internalDependencies) {
    const packageName = dep.replace("@repo/", "");
    usedRegistryDependencies.add(
      new URL(`/elements/${packageName}.json`, registryUrl).toString()
    );
  }

  const itemResponse: RegistryItem = {
    $schema: "https://ui.shadcn.com/schema/registry-item.json",
    name: item.name,
    type: item.type,
    title: item.title,
    description: item.description,
    files: [
      {
        path: file.path,
        type: file.type as RegistryItem["type"],
        content: file.content,
        target: `components/ai-elements/${item.name}.tsx`,
      },
    ],
    dependencies: Array.from(usedDependencies),
    devDependencies: Array.from(usedDevDependencies),
    registryDependencies: Array.from(usedRegistryDependencies),
  };

  return NextResponse.json(itemResponse);
};
</file>

<file path="apps/registry/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="apps/registry/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="apps/registry/package.json">
{
  "name": "registry",
  "version": "0.1.1",
  "private": true,
  "scripts": {
    "dev": "next dev --port 3001",
    "build": "next build"
  },
  "dependencies": {
    "@vercel/analytics": "^1.5.0",
    "next": "15.5.2",
    "react": "19.1.1",
    "react-dom": "19.1.1",
    "shadcn": "^3.2.1",
    "ts-morph": "^27.0.0"
  },
  "devDependencies": {
    "@types/node": "^24",
    "@types/react": "19.1.12",
    "@types/react-dom": "^19.1.9",
    "typescript": "5.9.2"
  }
}
</file>

<file path="apps/registry/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="apps/test/app/examples/actions.tsx">
"use client";

import { Action, Actions } from "@repo/elements/actions";
import { Conversation, ConversationContent } from "@repo/elements/conversation";
import { Message, MessageContent } from "@repo/elements/message";
import {
  CopyIcon,
  RefreshCcwIcon,
  ShareIcon,
  ThumbsDownIcon,
  ThumbsUpIcon,
} from "lucide-react";
import { nanoid } from "nanoid";
import { useState } from "react";

const messages: {
  key: string;
  from: "user" | "assistant";
  content: string;
  avatar: string;
  name: string;
}[] = [
  {
    key: nanoid(),
    from: "user",
    content: "Hello, how are you?",
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
  {
    key: nanoid(),
    from: "assistant",
    content: "I am fine, thank you!",
    avatar: "https://github.com/openai.png",
    name: "OpenAI",
  },
];

const Example = () => {
  const [liked, setLiked] = useState(false);
  const [disliked, setDisliked] = useState(false);
  const [favorited, setFavorited] = useState(false);

  const handleRetry = () => {};

  const handleCopy = () => {};

  const handleShare = () => {};

  const actions = [
    {
      icon: RefreshCcwIcon,
      label: "Retry",
      onClick: handleRetry,
    },
    {
      icon: ThumbsUpIcon,
      label: "Like",
      onClick: () => setLiked(!liked),
    },

    {
      icon: ThumbsDownIcon,
      label: "Dislike",
      onClick: () => setDisliked(!disliked),
    },
    {
      icon: CopyIcon,
      label: "Copy",
      onClick: () => handleCopy(),
    },
    {
      icon: ShareIcon,
      label: "Share",
      onClick: () => handleShare(),
    },
  ];

  return (
    <Conversation className="relative w-full">
      <ConversationContent>
        {messages.map((message) => (
          <Message
            className={`flex flex-col gap-2 ${message.from === "assistant" ? "items-start" : "items-end"}`}
            from={message.from}
            key={message.key}
          >
            <MessageContent>{message.content}</MessageContent>
            {message.from === "assistant" && (
              <Actions className="mt-2">
                {actions.map((action) => (
                  <Action key={action.label} label={action.label}>
                    <action.icon className="size-4" />
                  </Action>
                ))}
              </Actions>
            )}
          </Message>
        ))}
      </ConversationContent>
    </Conversation>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/artifact.tsx">
"use client";

import {
  Artifact,
  ArtifactAction,
  ArtifactActions,
  ArtifactContent,
  ArtifactDescription,
  ArtifactHeader,
  ArtifactTitle,
} from "@repo/elements/artifact";
import { CodeBlock } from "@repo/elements/code-block";
import {
  CopyIcon,
  DownloadIcon,
  PlayIcon,
  RefreshCwIcon,
  ShareIcon,
} from "lucide-react";

const code = `# Dijkstra's Algorithm implementation
import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    heap = [(0, start)]
    visited = set()
    
    while heap:
        current_distance, current_node = heapq.heappop(heap)
        if current_node in visited:
            continue
        visited.add(current_node)
        
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(heap, (distance, neighbor))
    
    return distances

# Example graph
 graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

print(dijkstra(graph, 'A'))`;

const Example = () => (
  <Artifact>
    <ArtifactHeader>
      <div>
        <ArtifactTitle>Dijkstra's Algorithm Implementation</ArtifactTitle>
        <ArtifactDescription>Updated 1 minute ago</ArtifactDescription>
      </div>
      <div className="flex items-center gap-2">
        <ArtifactActions>
          <ArtifactAction
            icon={PlayIcon}
            label="Run"
            onClick={() => console.log("Run")}
            tooltip="Run code"
          />
          <ArtifactAction
            icon={CopyIcon}
            label="Copy"
            onClick={() => console.log("Copy")}
            tooltip="Copy to clipboard"
          />
          <ArtifactAction
            icon={RefreshCwIcon}
            label="Regenerate"
            onClick={() => console.log("Regenerate")}
            tooltip="Regenerate content"
          />
          <ArtifactAction
            icon={DownloadIcon}
            label="Download"
            onClick={() => console.log("Download")}
            tooltip="Download file"
          />
          <ArtifactAction
            icon={ShareIcon}
            label="Share"
            onClick={() => console.log("Share")}
            tooltip="Share artifact"
          />
        </ArtifactActions>
      </div>
    </ArtifactHeader>
    <ArtifactContent className="p-0">
      <CodeBlock
        className="border-none"
        code={code}
        language="python"
        showLineNumbers
      />
    </ArtifactContent>
  </Artifact>
);

export default Example;
</file>

<file path="apps/test/app/examples/branch.tsx">
"use client";

import {
  Branch,
  BranchMessages,
  BranchNext,
  BranchPage,
  BranchPrevious,
  BranchSelector,
} from "@repo/elements/branch";
import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import { nanoid } from "nanoid";

const userMessages = [
  {
    id: nanoid(),
    content: "What are the key strategies for optimizing React performance?",
  },
  {
    id: nanoid(),
    content: "How can I improve the performance of my React application?",
  },
  {
    id: nanoid(),
    content: "What performance optimization techniques should I use in React?",
  },
];

const assistantMessages = [
  {
    id: nanoid(),
    content:
      "Here's the first response to your question. This approach focuses on performance optimization.",
  },
  {
    id: nanoid(),
    content:
      "Here's an alternative response. This approach emphasizes code readability and maintainability over pure performance.",
  },
  {
    id: nanoid(),
    content:
      "And here's a third option. This balanced approach considers both performance and maintainability, making it suitable for most use cases.",
  },
];

const Example = () => {
  const handleBranchChange = (branchIndex: number) => {
    console.log("Branch changed to:", branchIndex);
  };

  return (
    <div style={{ height: "300px" }}>
      <Branch defaultBranch={0} onBranchChange={handleBranchChange}>
        <BranchMessages>
          {userMessages.map((message) => (
            <Message from="user" key={message.id}>
              <MessageContent>{message.content}</MessageContent>
              <MessageAvatar
                name="Hayden Bleasel"
                src="https://github.com/haydenbleasel.png"
              />
            </Message>
          ))}
        </BranchMessages>
        <BranchSelector from="user">
          <BranchPrevious />
          <BranchPage />
          <BranchNext />
        </BranchSelector>
      </Branch>

      <Branch defaultBranch={0} onBranchChange={handleBranchChange}>
        <BranchMessages>
          {assistantMessages.map((message) => (
            <Message from="assistant" key={message.id}>
              <MessageContent>{message.content}</MessageContent>
              <MessageAvatar name="AI" src="https://github.com/openai.png" />
            </Message>
          ))}
        </BranchMessages>
        <BranchSelector from="assistant">
          <BranchPrevious />
          <BranchPage />
          <BranchNext />
        </BranchSelector>
      </Branch>
    </div>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/chain-of-thought.tsx">
"use client";

import {
  ChainOfThought,
  ChainOfThoughtContent,
  ChainOfThoughtHeader,
  ChainOfThoughtImage,
  ChainOfThoughtSearchResult,
  ChainOfThoughtSearchResults,
  ChainOfThoughtStep,
} from "@repo/elements/chain-of-thought";
import { Image } from "@repo/elements/image";
import { ImageIcon, SearchIcon } from "lucide-react";

const exampleImage = {
  base64:
    "",
  mediaType: "image/jpeg",
  uint8Array: new Uint8Array([]),
};

const ChainOfThoughtExample = () => (
  <ChainOfThought defaultOpen>
    <ChainOfThoughtHeader />
    <ChainOfThoughtContent>
      <ChainOfThoughtStep
        icon={SearchIcon}
        label="Searching for profiles for Hayden Bleasel"
        status="complete"
      >
        <ChainOfThoughtSearchResults>
          {[
            "https://www.x.com",
            "https://www.instagram.com",
            "https://www.github.com",
          ].map((website) => (
            <ChainOfThoughtSearchResult key={website}>
              {new URL(website).hostname}
            </ChainOfThoughtSearchResult>
          ))}
        </ChainOfThoughtSearchResults>
      </ChainOfThoughtStep>

      <ChainOfThoughtStep
        icon={ImageIcon}
        label="Found the profile photo for Hayden Bleasel"
        status="complete"
      >
        <ChainOfThoughtImage caption="Hayden Bleasel's profile photo from x.com, showing a Ghibli-style man.">
          <Image
            {...exampleImage}
            alt="Example generated image"
            className="aspect-square h-[150px] border"
          />
        </ChainOfThoughtImage>
      </ChainOfThoughtStep>

      <ChainOfThoughtStep
        label="Hayden Bleasel is an Australian product designer, software engineer, and founder. He is currently based in the United States working for Vercel, an American cloud application company."
        status="complete"
      />

      <ChainOfThoughtStep
        icon={SearchIcon}
        label="Searching for recent work..."
        status="active"
      >
        <ChainOfThoughtSearchResults>
          {["https://www.github.com", "https://www.dribbble.com"].map(
            (website) => (
              <ChainOfThoughtSearchResult key={website}>
                {new URL(website).hostname}
              </ChainOfThoughtSearchResult>
            )
          )}
        </ChainOfThoughtSearchResults>
      </ChainOfThoughtStep>
    </ChainOfThoughtContent>
  </ChainOfThought>
);

export default ChainOfThoughtExample;
</file>

<file path="apps/test/app/examples/code-block.tsx">
"use client";

import { CodeBlock, CodeBlockCopyButton } from "@repo/elements/code-block";

const code = `function MyComponent(props) {
  return (
    <div>
      <h1>Hello, {props.name}!</h1>
      <p>This is an example React component.</p>
    </div>
  );
}`;

const Example = () => (
  <CodeBlock code={code} language="jsx">
    <CodeBlockCopyButton
      onCopy={() => console.log("Copied code to clipboard")}
      onError={() => console.error("Failed to copy code to clipboard")}
    />
  </CodeBlock>
);

export default Example;
</file>

<file path="apps/test/app/examples/context.tsx">
"use client";

import {
  Context,
  ContextCacheUsage,
  ContextContent,
  ContextContentBody,
  ContextContentFooter,
  ContextContentHeader,
  ContextInputUsage,
  ContextOutputUsage,
  ContextReasoningUsage,
  ContextTrigger,
} from "@repo/elements/context";

const Example = () => (
  <div className="flex items-center justify-center p-8">
    <Context
      maxTokens={128_000}
      modelId="openai:gpt-5"
      usage={{
        inputTokens: 32_000,
        outputTokens: 8000,
        totalTokens: 40_000,
        cachedInputTokens: 0,
        reasoningTokens: 0,
      }}
      usedTokens={40_000}
    >
      <ContextTrigger />
      <ContextContent>
        <ContextContentHeader />
        <ContextContentBody>
          <ContextInputUsage />
          <ContextOutputUsage />
          <ContextReasoningUsage />
          <ContextCacheUsage />
        </ContextContentBody>
        <ContextContentFooter />
      </ContextContent>
    </Context>
  </div>
);

export default Example;
</file>

<file path="apps/test/app/examples/conversation.tsx">
"use client";

import {
  Conversation,
  ConversationContent,
  ConversationEmptyState,
  ConversationScrollButton,
} from "@repo/elements/conversation";
import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import { MessageSquareIcon } from "lucide-react";
import { nanoid } from "nanoid";
import { useEffect, useState } from "react";

const messages: { key: string; value: string; name: string; avatar: string }[] =
  [
    {
      key: nanoid(),
      value: "Hello, how are you?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "I'm good, thank you! How can I assist you today?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "I'm looking for information about your services.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value:
        "Sure! We offer a variety of AI solutions. What are you interested in?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "I'm interested in natural language processing tools.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Great choice! We have several NLP APIs. Would you like a demo?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Yes, a demo would be helpful.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Alright, I can show you a sentiment analysis example. Ready?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Yes, please proceed.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Here is a sample: 'I love this product!' → Positive sentiment.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Impressive! Can it handle multiple languages?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Absolutely, our models support over 20 languages.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "How do I get started with the API?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "You can sign up on our website and get an API key instantly.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Is there a free trial available?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Yes, we offer a 14-day free trial with full access.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "What kind of support do you provide?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "We provide 24/7 chat and email support for all users.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Thank you for the information!",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "You're welcome! Let me know if you have any more questions.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
  ];

const Example = () => {
  const [visibleMessages, setVisibleMessages] = useState<
    {
      key: string;
      value: string;
      name: string;
      avatar: string;
    }[]
  >([]);

  useEffect(() => {
    let currentIndex = 0;
    const interval = setInterval(() => {
      if (currentIndex < messages.length && messages[currentIndex]) {
        const currentMessage = messages[currentIndex];
        setVisibleMessages((prev) => [
          ...prev,
          {
            key: currentMessage.key,
            value: currentMessage.value,
            name: currentMessage.name,
            avatar: currentMessage.avatar,
          },
        ]);
        currentIndex++;
      } else {
        clearInterval(interval);
      }
    }, 500);

    return () => clearInterval(interval);
  }, []);

  return (
    <Conversation className="relative size-full" style={{ height: "498px" }}>
      <ConversationContent>
        {visibleMessages.length === 0 ? (
          <ConversationEmptyState
            description="Messages will appear here as the conversation progresses."
            icon={<MessageSquareIcon className="size-6" />}
            title="Start a conversation"
          />
        ) : (
          visibleMessages.map(({ key, value, name, avatar }, index) => (
            <Message from={index % 2 === 0 ? "user" : "assistant"} key={key}>
              <MessageContent>{value}</MessageContent>
              <MessageAvatar name={name} src={avatar} />
            </Message>
          ))
        )}
      </ConversationContent>
      <ConversationScrollButton />
    </Conversation>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/image.tsx">
"use client";

import { Image } from "@repo/elements/image";

const exampleImage = {
  base64:
    "",
  mediaType: "image/jpeg",
  uint8Array: new Uint8Array([]),
};

const Example = () => (
  <Image
    {...exampleImage}
    alt="Example generated image"
    className="aspect-square h-[150px] border"
  />
);

export default Example;
</file>

<file path="apps/test/app/examples/inline-citation.tsx">
"use client";

import {
  InlineCitation,
  InlineCitationCard,
  InlineCitationCardBody,
  InlineCitationCardTrigger,
  InlineCitationCarousel,
  InlineCitationCarouselContent,
  InlineCitationCarouselHeader,
  InlineCitationCarouselIndex,
  InlineCitationCarouselItem,
  InlineCitationCarouselNext,
  InlineCitationCarouselPrev,
  InlineCitationSource,
  InlineCitationText,
} from "@repo/elements/inline-citation";

const citation = {
  text: "The technology continues to evolve rapidly, with new breakthroughs being announced regularly",
  sources: [
    {
      title: "Advances in Natural Language Processing",
      url: "https://example.com/nlp-advances",
      description:
        "A comprehensive study on the recent developments in natural language processing technologies and their applications.",
    },
    {
      title: "Breakthroughs in Machine Learning",
      url: "https://mlnews.org/breakthroughs",
      description:
        "An overview of the most significant machine learning breakthroughs in the past year.",
    },
    {
      title: "AI in Healthcare: Current Trends",
      url: "https://healthai.com/trends",
      description:
        "A report on how artificial intelligence is transforming healthcare and diagnostics.",
    },
    {
      title: "Ethics of Artificial Intelligence",
      url: "https://aiethics.org/overview",
      description:
        "A discussion on the ethical considerations and challenges in the development of AI.",
    },
    {
      title: "Scaling Deep Learning Models",
      url: "https://deeplearninghub.com/scaling-models",
      description:
        "Insights into the technical challenges and solutions for scaling deep learning architectures.",
    },
    {
      title: "Natural Language Understanding Benchmarks",
      url: "https://nlubenchmarks.com/latest",
      description:
        "A summary of the latest benchmarks and evaluation metrics for natural language understanding systems.",
    },
  ],
};

const Example = () => {
  return (
    <p className="text-sm leading-relaxed">
      According to recent studies, artificial intelligence has shown remarkable
      progress in natural language processing.{" "}
      <InlineCitation>
        <InlineCitationText>{citation.text}</InlineCitationText>
        <InlineCitationCard>
          <InlineCitationCardTrigger
            sources={citation.sources.map((source) => source.url)}
          />
          <InlineCitationCardBody>
            <InlineCitationCarousel>
              <InlineCitationCarouselHeader>
                <InlineCitationCarouselPrev />
                <InlineCitationCarouselNext />
                <InlineCitationCarouselIndex />
              </InlineCitationCarouselHeader>
              <InlineCitationCarouselContent>
                {citation.sources.map((source) => (
                  <InlineCitationCarouselItem key={source.url}>
                    <InlineCitationSource
                      description={source.description}
                      title={source.title}
                      url={source.url}
                    />
                  </InlineCitationCarouselItem>
                ))}
              </InlineCitationCarouselContent>
            </InlineCitationCarousel>
          </InlineCitationCardBody>
        </InlineCitationCard>
      </InlineCitation>
      .
    </p>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/loader.tsx">
"use client";

import { Loader } from "@repo/elements/loader";

const Example = () => {
  return (
    <div className="flex items-center justify-center p-8">
      <Loader />
    </div>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/message.tsx">
"use client";

import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import { nanoid } from "nanoid";

const messages: {
  key: string;
  from: "user" | "assistant";
  content: string;
  avatar: string;
  name: string;
}[] = [
  {
    key: nanoid(),
    from: "user",
    content: "Hello, how are you?",
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
];

const Example = () => (
  <>
    {messages.map(({ content, ...message }) => (
      <Message from={message.from} key={message.key}>
        <MessageContent>{content}</MessageContent>
        <MessageAvatar name={message.name} src={message.avatar} />
      </Message>
    ))}
  </>
);

export default Example;
</file>

<file path="apps/test/app/examples/open-in-chat.tsx">
"use client";

import {
  OpenIn,
  OpenInChatGPT,
  OpenInClaude,
  OpenInContent,
  OpenInScira,
  OpenInT3,
  OpenInTrigger,
  OpenInv0,
} from "@repo/elements/open-in-chat";

const Example = () => {
  const sampleQuery = "How can I implement authentication in Next.js?";

  return (
    <OpenIn query={sampleQuery}>
      <OpenInTrigger />
      <OpenInContent>
        <OpenInChatGPT />
        <OpenInClaude />
        <OpenInT3 />
        <OpenInScira />
        <OpenInv0 />
      </OpenInContent>
    </OpenIn>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/prompt-input.tsx">
"use client";

import {
  PromptInput,
  PromptInputActionAddAttachments,
  PromptInputActionMenu,
  PromptInputActionMenuContent,
  PromptInputActionMenuTrigger,
  PromptInputAttachment,
  PromptInputAttachments,
  PromptInputBody,
  PromptInputButton,
  type PromptInputMessage,
  PromptInputModelSelect,
  PromptInputModelSelectContent,
  PromptInputModelSelectItem,
  PromptInputModelSelectTrigger,
  PromptInputModelSelectValue,
  PromptInputSubmit,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
} from "@repo/elements/prompt-input";
import { GlobeIcon, MicIcon } from "lucide-react";
import { useState } from "react";

const models = [
  { id: "gpt-4", name: "GPT-4" },
  { id: "gpt-3.5-turbo", name: "GPT-3.5 Turbo" },
  { id: "claude-2", name: "Claude 2" },
  { id: "claude-instant", name: "Claude Instant" },
  { id: "palm-2", name: "PaLM 2" },
  { id: "llama-2-70b", name: "Llama 2 70B" },
  { id: "llama-2-13b", name: "Llama 2 13B" },
  { id: "cohere-command", name: "Command" },
  { id: "mistral-7b", name: "Mistral 7B" },
];

const SUBMITTING_TIMEOUT = 200;
const STREAMING_TIMEOUT = 2000;

const Example = () => {
  const [text, setText] = useState<string>("");
  const [model, setModel] = useState<string>(models[0].id);
  const [status, setStatus] = useState<
    "submitted" | "streaming" | "ready" | "error"
  >("ready");

  const handleSubmit = (message: PromptInputMessage) => {
    const hasText = Boolean(message.text);
    const hasAttachments = Boolean(message.files?.length);

    if (!(hasText || hasAttachments)) {
      return;
    }

    setStatus("submitted");

    console.log("Submitting message:", message);

    setTimeout(() => {
      setStatus("streaming");
    }, SUBMITTING_TIMEOUT);

    setTimeout(() => {
      setStatus("ready");
    }, STREAMING_TIMEOUT);
  };

  return (
    <PromptInput globalDrop multiple onSubmit={handleSubmit}>
      <PromptInputBody>
        <PromptInputAttachments>
          {(attachment) => <PromptInputAttachment data={attachment} />}
        </PromptInputAttachments>
        <PromptInputTextarea
          onChange={(e) => setText(e.target.value)}
          value={text}
        />
      </PromptInputBody>
      <PromptInputToolbar>
        <PromptInputTools>
          <PromptInputActionMenu>
            <PromptInputActionMenuTrigger />
            <PromptInputActionMenuContent>
              <PromptInputActionAddAttachments />
            </PromptInputActionMenuContent>
          </PromptInputActionMenu>
          <PromptInputButton>
            <MicIcon size={16} />
          </PromptInputButton>
          <PromptInputButton>
            <GlobeIcon size={16} />
            <span>Search</span>
          </PromptInputButton>
          <PromptInputModelSelect onValueChange={setModel} value={model}>
            <PromptInputModelSelectTrigger>
              <PromptInputModelSelectValue />
            </PromptInputModelSelectTrigger>
            <PromptInputModelSelectContent>
              {models.map((modelOption) => (
                <PromptInputModelSelectItem
                  key={modelOption.id}
                  value={modelOption.id}
                >
                  {modelOption.name}
                </PromptInputModelSelectItem>
              ))}
            </PromptInputModelSelectContent>
          </PromptInputModelSelect>
        </PromptInputTools>
        <PromptInputSubmit status={status} />
      </PromptInputToolbar>
    </PromptInput>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/reasoning.tsx">
"use client";

import {
  Reasoning,
  ReasoningContent,
  ReasoningTrigger,
} from "@repo/elements/reasoning";
import { useCallback, useEffect, useState } from "react";

const reasoningSteps = [
  "Let me think about this problem step by step.",
  "\n\nFirst, I need to understand what the user is asking for.",
  "\n\nThey want a reasoning component that opens automatically when streaming begins and closes when streaming finishes. The component should be composable and follow existing patterns in the codebase.",
  "\n\nThis seems like a collapsible component with state management would be the right approach.",
].join("");

const Example = () => {
  const [content, setContent] = useState("");
  const [isStreaming, setIsStreaming] = useState(false);
  const [currentTokenIndex, setCurrentTokenIndex] = useState(0);
  const [tokens, setTokens] = useState<string[]>([]);

  // Function to chunk text into fake tokens of 3-4 characters
  const chunkIntoTokens = useCallback((text: string): string[] => {
    const tokens: string[] = [];
    let i = 0;
    while (i < text.length) {
      const chunkSize = Math.floor(Math.random() * 2) + 3; // Random size between 3-4
      tokens.push(text.slice(i, i + chunkSize));
      i += chunkSize;
    }
    return tokens;
  }, []);

  useEffect(() => {
    const tokenizedSteps = chunkIntoTokens(reasoningSteps);
    setTokens(tokenizedSteps);
    setContent("");
    setCurrentTokenIndex(0);
    setIsStreaming(true);
  }, [chunkIntoTokens]);

  useEffect(() => {
    if (!isStreaming || currentTokenIndex >= tokens.length) {
      if (isStreaming) {
        setIsStreaming(false);
      }
      return;
    }

    const timer = setTimeout(() => {
      setContent((prev) => prev + tokens[currentTokenIndex]);
      setCurrentTokenIndex((prev) => prev + 1);
    }, 25); // Faster interval since we're streaming smaller chunks

    return () => clearTimeout(timer);
  }, [isStreaming, currentTokenIndex, tokens]);

  return (
    <div className="w-full p-4" style={{ height: "300px" }}>
      <Reasoning className="w-full" isStreaming={isStreaming}>
        <ReasoningTrigger />
        <ReasoningContent>{content}</ReasoningContent>
      </Reasoning>
    </div>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/response.tsx">
"use client";

import { Response } from "@repo/elements/response";
import { useEffect, useState } from "react";

const tokens = [
  "### Hello",
  " World",
  "\n\n",
  "This",
  " is",
  " a",
  " **mark",
  "down",
  "**",
  " response",
  " from",
  " an",
  " AI",
  " model",
  ".",
  "\n\n",
  "---",
  "\n\n",
  "## Tables",
  "\n\n",
  "| Column 1",
  " | Column 2",
  " | Column 3",
  " |",
  "\n",
  "|----------|----------|----------|",
  "\n",
  "| Row 1, Col 1",
  " | Row 1, Col 2",
  " | Row 1, Col 3",
  " |",
  "\n",
  "| Row 2, Col 1",
  " | Row 2, Col 2",
  " | Row 2, Col 3",
  " |",
  "\n",
  "| Row 3, Col 1",
  " | Row 3, Col 2",
  " | Row 3, Col 3",
  " |",
  "\n\n",
  "## Blockquotes",
  "\n\n",
  "> This",
  " is",
  " a",
  " blockquote.",
  " It",
  " can",
  " contain",
  " multiple",
  " lines",
  " and",
  " **formatted**",
  " text.",
  "\n",
  ">",
  "\n",
  "> It",
  " can",
  " even",
  " have",
  " multiple",
  " paragraphs.",
  "\n\n",
  "## Inline",
  " Code",
  "\n\n",
  "Here",
  " is",
  " some",
  " text",
  " with",
  " `inline",
  " code`",
  " in",
  " the",
  " middle",
  " of",
  " a",
  " sentence.",
  " You",
  " can",
  " also",
  " use",
  " `const",
  " x",
  " =",
  " 42`",
  " for",
  " variable",
  " declarations.",
  "\n\n",
  "## Code",
  " Blocks",
  "\n\n",
  "```",
  "javascript",
  "\n",
  "const",
  " greeting",
  " = ",
  "'Hello, world!'",
  ";",
  "\n",
  "console",
  ".",
  "log",
  "(",
  "greeting",
  ")",
  ";",
  "\n",
  "```",
  "\n\n",
  "## Math",
  "\n\n",
  "It",
  " also",
  " supports",
  " math",
  " equations",
  ", ",
  "like",
  " this",
  " inline",
  " one",
  ": ",
  "$",
  "E",
  " = ",
  "mc",
  "^2",
  "$",
  ".",
  "\n\n",
  "And",
  " here",
  " is",
  " a",
  " display",
  " equation",
  " for",
  " the",
  " quadratic",
  " formula",
  ":",
  "\n\n",
  "$$",
  "\n",
  "x",
  " = ",
  "\\frac",
  "{",
  "-b",
  " \\pm",
  " \\sqrt",
  "{",
  "b^2",
  " -",
  " 4ac",
  "}",
  "}",
  "{",
  "2a",
  "}",
  "\n",
  "$$",
  "\n\n",
  "## Links",
  " and",
  " Lists",
  "\n\n",
  "Here's",
  " a",
  " [",
  "link",
  "](",
  "https://example.com",
  ")",
  " and",
  " some",
  " more",
  " text",
  " with",
  " an",
  " unordered",
  " list",
  ":",
  "\n\n",
  "-",
  " Item",
  " one",
  "\n",
  "-",
  " Item",
  " two",
  "\n",
  "-",
  " Item",
  " three",
  "\n\n",
  "## Ordered",
  " Lists",
  "\n\n",
  "1.",
  " First",
  " item",
  "\n",
  "2.",
  " Second",
  " item",
  "\n",
  "3.",
  " Third",
  " item",
];

const INTERVAL = 100;

const Example = () => {
  const [content, setContent] = useState("");

  useEffect(() => {
    let currentContent = "";
    let index = 0;

    const interval = setInterval(() => {
      if (index < tokens.length) {
        currentContent += tokens[index];
        setContent(currentContent);
        index++;
      } else {
        clearInterval(interval);
      }
    }, INTERVAL);

    return () => clearInterval(interval);
  }, []);

  return <Response className="h-[500px] overflow-auto">{content}</Response>;
};

export default Example;
</file>

<file path="apps/test/app/examples/sources.tsx">
"use client";

import {
  Source,
  Sources,
  SourcesContent,
  SourcesTrigger,
} from "@repo/elements/sources";

const sources = [
  { href: "https://stripe.com/docs/api", title: "Stripe API Documentation" },
  { href: "https://docs.github.com/en/rest", title: "GitHub REST API" },
  {
    href: "https://docs.aws.amazon.com/sdk-for-javascript/",
    title: "AWS SDK for JavaScript",
  },
];

const Example = () => (
  <div style={{ height: "110px" }}>
    <Sources>
      <SourcesTrigger count={sources.length} />
      <SourcesContent>
        {sources.map((source) => (
          <Source href={source.href} key={source.href} title={source.title} />
        ))}
      </SourcesContent>
    </Sources>
  </div>
);

export default Example;
</file>

<file path="apps/test/app/examples/suggestion.tsx">
"use client";

import { Suggestion, Suggestions } from "@repo/elements/suggestion";

const suggestions = [
  "What are the latest trends in AI?",
  "How does machine learning work?",
  "Explain quantum computing",
  "Best practices for React development",
  "Tell me about TypeScript benefits",
  "How to optimize database queries?",
  "What is the difference between SQL and NoSQL?",
  "Explain cloud computing basics",
];

const Example = () => {
  const handleSuggestionClick = (suggestion: string) => {
    console.log("Selected suggestion:", suggestion);
  };

  return (
    <Suggestions>
      {suggestions.map((suggestion) => (
        <Suggestion
          key={suggestion}
          onClick={handleSuggestionClick}
          suggestion={suggestion}
        />
      ))}
    </Suggestions>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/task.tsx">
"use client";

import { SiReact } from "@icons-pack/react-simple-icons";
import {
  Task,
  TaskContent,
  TaskItem,
  TaskItemFile,
  TaskTrigger,
} from "@repo/elements/task";
import { nanoid } from "nanoid";
import type { ReactNode } from "react";

const Example = () => {
  const tasks: { key: string; value: ReactNode }[] = [
    { key: nanoid(), value: 'Searching "app/page.tsx, components structure"' },
    {
      key: nanoid(),
      value: (
        <span className="inline-flex items-center gap-1" key="read-page-tsx">
          Read
          <TaskItemFile>
            <SiReact className="size-4" color="#149ECA" />
            <span>page.tsx</span>
          </TaskItemFile>
        </span>
      ),
    },
    { key: nanoid(), value: "Scanning 52 files" },
    { key: nanoid(), value: "Scanning 2 files" },
    {
      key: nanoid(),
      value: (
        <span className="inline-flex items-center gap-1" key="read-layout-tsx">
          Reading files
          <TaskItemFile>
            <SiReact className="size-4" color="#149ECA" />
            <span>layout.tsx</span>
          </TaskItemFile>
        </span>
      ),
    },
  ];

  return (
    <div style={{ height: "200px" }}>
      <Task className="w-full">
        <TaskTrigger title="Found project files" />
        <TaskContent>
          {tasks.map((task) => (
            <TaskItem key={task.key}>{task.value}</TaskItem>
          ))}
        </TaskContent>
      </Task>
    </div>
  );
};

export default Example;
</file>

<file path="apps/test/app/examples/tool.tsx">
"use client";

import { Response } from "@repo/elements/response";
import {
  Tool,
  ToolContent,
  ToolHeader,
  ToolInput,
  ToolOutput,
} from "@repo/elements/tool";
import type { ToolUIPart } from "ai";
import { nanoid } from "nanoid";

const toolCall: ToolUIPart = {
  type: "tool-database_query" as const,
  toolCallId: nanoid(),
  state: "output-available" as const,
  input: {
    query: "SELECT COUNT(*) FROM users WHERE created_at >= ?",
    params: ["2024-01-01"],
    database: "analytics",
  },
  output: `| User ID | Name | Email | Created At |
|---------|------|-------|------------|
| 1 | John Doe | john@example.com | 2024-01-15 |
| 2 | Jane Smith | jane@example.com | 2024-01-20 |
| 3 | Bob Wilson | bob@example.com | 2024-02-01 |
| 4 | Alice Brown | alice@example.com | 2024-02-10 |
| 5 | Charlie Davis | charlie@example.com | 2024-02-15 |`,
  errorText: undefined,
};

const Example = () => (
  <div style={{ height: "500px" }}>
    <Tool>
      <ToolHeader state={toolCall.state} type={toolCall.type} />
      <ToolContent>
        <ToolInput input={toolCall.input} />
        {toolCall.state === "output-available" && (
          <ToolOutput errorText={toolCall.errorText} output={toolCall.output} />
        )}
      </ToolContent>
    </Tool>
  </div>
);

export default Example;
</file>

<file path="apps/test/app/examples/web-preview.tsx">
"use client";

import {
  WebPreview,
  WebPreviewBody,
  WebPreviewConsole,
  WebPreviewNavigation,
  WebPreviewNavigationButton,
  WebPreviewUrl,
} from "@repo/elements/web-preview";
import {
  ArrowLeftIcon,
  ArrowRightIcon,
  ExternalLinkIcon,
  Maximize2Icon,
  MousePointerClickIcon,
  RefreshCcwIcon,
} from "lucide-react";
import { useState } from "react";

const exampleLogs = [
  {
    level: "log" as const,
    message: "Page loaded successfully",
    timestamp: new Date(Date.now() - 10_000),
  },
  {
    level: "warn" as const,
    message: "Deprecated API usage detected",
    timestamp: new Date(Date.now() - 5000),
  },
  {
    level: "error" as const,
    message: "Failed to load resource",
    timestamp: new Date(),
  },
];

const code = [
  {
    language: "jsx",
    filename: "MyComponent.jsx",
    code: `function MyComponent(props) {
  return (
    <div>
      <h1>Hello, {props.name}!</h1>
      <p>This is an example React component.</p>
    </div>
  );
}`,
  },
];

const Example = () => {
  const [fullscreen, setFullscreen] = useState(false);

  return (
    <WebPreview
      defaultUrl="/"
      onUrlChange={(url) => console.log("URL changed to:", url)}
      style={{ height: "400px" }}
    >
      <WebPreviewNavigation>
        <WebPreviewNavigationButton
          onClick={() => console.log("Go back")}
          tooltip="Go back"
        >
          <ArrowLeftIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => console.log("Go forward")}
          tooltip="Go forward"
        >
          <ArrowRightIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => console.log("Reload")}
          tooltip="Reload"
        >
          <RefreshCcwIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewUrl />
        <WebPreviewNavigationButton
          onClick={() => console.log("Select")}
          tooltip="Select"
        >
          <MousePointerClickIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => console.log("Open in new tab")}
          tooltip="Open in new tab"
        >
          <ExternalLinkIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => setFullscreen(!fullscreen)}
          tooltip="Maximize"
        >
          <Maximize2Icon className="size-4" />
        </WebPreviewNavigationButton>
      </WebPreviewNavigation>

      <WebPreviewBody src="https://preview-v0me-kzml7zc6fkcvbyhzrf47.vusercontent.net/" />

      <WebPreviewConsole logs={exampleLogs} />
    </WebPreview>
  );
};

export default Example;
</file>

<file path="apps/test/app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@source "../**/*.{ts,tsx}";
@source "../node_modules/@repo/**/*.{ts,tsx}";
@source "../node_modules/@repo/elements/node_modules/streamdown/dist/index.js";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --success: oklch(50.8% 0.118 165.612);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);

  --font-weight-bold: 700;
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --success: oklch(50.8% 0.118 165.612);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --color-success: var(--success);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }

  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="apps/test/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path="apps/test/app/page.tsx">
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@repo/shadcn-ui/components/ui/card";
import Actions from "@/app/examples/actions";
import Artifact from "@/app/examples/artifact";
import Branch from "@/app/examples/branch";
import ChainOfThought from "@/app/examples/chain-of-thought";
import CodeBlock from "@/app/examples/code-block";
import Context from "@/app/examples/context";
import Conversation from "@/app/examples/conversation";
import Image from "@/app/examples/image";
import InlineCitation from "@/app/examples/inline-citation";
import Loader from "@/app/examples/loader";
import Message from "@/app/examples/message";
import OpenInChat from "@/app/examples/open-in-chat";
import PromptInput from "@/app/examples/prompt-input";
import Reasoning from "@/app/examples/reasoning";
import Response from "@/app/examples/response";
import Sources from "@/app/examples/sources";
import Suggestion from "@/app/examples/suggestion";
import Task from "@/app/examples/task";
import Tool from "@/app/examples/tool";
import WebPreview from "@/app/examples/web-preview";

const components = [
  { name: "Actions", Component: Actions },
  { name: "Artifact", Component: Artifact },
  { name: "Branch", Component: Branch },
  { name: "ChainOfThought", Component: ChainOfThought },
  { name: "CodeBlock", Component: CodeBlock },
  { name: "Context", Component: Context },
  { name: "Conversation", Component: Conversation },
  { name: "Image", Component: Image },
  { name: "InlineCitation", Component: InlineCitation },
  { name: "Loader", Component: Loader },
  { name: "Message", Component: Message },
  { name: "OpenInChat", Component: OpenInChat },
  { name: "PromptInput", Component: PromptInput },
  { name: "Reasoning", Component: Reasoning },
  { name: "Response", Component: Response },
  { name: "Sources", Component: Sources },
  { name: "Suggestion", Component: Suggestion },
  { name: "Task", Component: Task },
  { name: "Tool", Component: Tool },
  { name: "WebPreview", Component: WebPreview },
] as const;

const Home = () => (
  <div className="container mx-auto space-y-8 py-16">
    {components.map(({ name, Component }) => (
      <Card key={name}>
        <CardHeader>
          <CardTitle>
            <h2 className="font-semibold text-lg">{name}</h2>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Component />
        </CardContent>
      </Card>
    ))}
  </div>
);

export default Home;
</file>

<file path="apps/test/public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="apps/test/public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="apps/test/public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="apps/test/public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="apps/test/public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="apps/test/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="apps/test/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="apps/test/package.json">
{
  "name": "test",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@icons-pack/react-simple-icons": "^13.7.0",
    "@repo/elements": "workspace:*",
    "@repo/shadcn-ui": "workspace:*",
    "ai": "5.0.37",
    "lucide-react": "^0.542.0",
    "nanoid": "^5.1.5",
    "next": "15.5.2",
    "react": "19.1.1",
    "react-dom": "19.1.1",
    "tw-animate-css": "^1.3.8"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^24",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="apps/test/postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="apps/test/README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="apps/test/tsconfig.json">
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@repo/*": ["../../packages/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "next.config.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ]
}
</file>

<file path="packages/elements/src/actions.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@repo/shadcn-ui/components/ui/tooltip";
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { ComponentProps } from "react";

export type ActionsProps = ComponentProps<"div">;

export const Actions = ({ className, children, ...props }: ActionsProps) => (
  <div className={cn("flex items-center gap-1", className)} {...props}>
    {children}
  </div>
);

export type ActionProps = ComponentProps<typeof Button> & {
  tooltip?: string;
  label?: string;
};

export const Action = ({
  tooltip,
  children,
  label,
  className,
  variant = "ghost",
  size = "sm",
  ...props
}: ActionProps) => {
  const button = (
    <Button
      className={cn(
        "relative size-9 p-1.5 text-muted-foreground hover:text-foreground",
        className
      )}
      size={size}
      type="button"
      variant={variant}
      {...props}
    >
      {children}
      <span className="sr-only">{label || tooltip}</span>
    </Button>
  );

  if (tooltip) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>{button}</TooltipTrigger>
          <TooltipContent>
            <p>{tooltip}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  return button;
};
</file>

<file path="packages/elements/src/artifact.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@repo/shadcn-ui/components/ui/tooltip";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { type LucideIcon, XIcon } from "lucide-react";
import type { ComponentProps, HTMLAttributes } from "react";

export type ArtifactProps = HTMLAttributes<HTMLDivElement>;

export const Artifact = ({ className, ...props }: ArtifactProps) => (
  <div
    className={cn(
      "flex flex-col overflow-hidden rounded-lg border bg-background shadow-sm",
      className
    )}
    {...props}
  />
);

export type ArtifactHeaderProps = HTMLAttributes<HTMLDivElement>;

export const ArtifactHeader = ({
  className,
  ...props
}: ArtifactHeaderProps) => (
  <div
    className={cn(
      "flex items-center justify-between border-b bg-muted/50 px-4 py-3",
      className
    )}
    {...props}
  />
);

export type ArtifactCloseProps = ComponentProps<typeof Button>;

export const ArtifactClose = ({
  className,
  children,
  size = "sm",
  variant = "ghost",
  ...props
}: ArtifactCloseProps) => (
  <Button
    className={cn(
      "size-8 p-0 text-muted-foreground hover:text-foreground",
      className
    )}
    size={size}
    type="button"
    variant={variant}
    {...props}
  >
    {children ?? <XIcon className="size-4" />}
    <span className="sr-only">Close</span>
  </Button>
);

export type ArtifactTitleProps = HTMLAttributes<HTMLParagraphElement>;

export const ArtifactTitle = ({ className, ...props }: ArtifactTitleProps) => (
  <p
    className={cn("font-medium text-foreground text-sm", className)}
    {...props}
  />
);

export type ArtifactDescriptionProps = HTMLAttributes<HTMLParagraphElement>;

export const ArtifactDescription = ({
  className,
  ...props
}: ArtifactDescriptionProps) => (
  <p className={cn("text-muted-foreground text-sm", className)} {...props} />
);

export type ArtifactActionsProps = HTMLAttributes<HTMLDivElement>;

export const ArtifactActions = ({
  className,
  ...props
}: ArtifactActionsProps) => (
  <div className={cn("flex items-center gap-1", className)} {...props} />
);

export type ArtifactActionProps = ComponentProps<typeof Button> & {
  tooltip?: string;
  label?: string;
  icon?: LucideIcon;
};

export const ArtifactAction = ({
  tooltip,
  label,
  icon: Icon,
  children,
  className,
  size = "sm",
  variant = "ghost",
  ...props
}: ArtifactActionProps) => {
  const button = (
    <Button
      className={cn(
        "size-8 p-0 text-muted-foreground hover:text-foreground",
        className
      )}
      size={size}
      type="button"
      variant={variant}
      {...props}
    >
      {Icon ? <Icon className="size-4" /> : children}
      <span className="sr-only">{label || tooltip}</span>
    </Button>
  );

  if (tooltip) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>{button}</TooltipTrigger>
          <TooltipContent>
            <p>{tooltip}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  return button;
};

export type ArtifactContentProps = HTMLAttributes<HTMLDivElement>;

export const ArtifactContent = ({
  className,
  ...props
}: ArtifactContentProps) => (
  <div className={cn("flex-1 overflow-auto p-4", className)} {...props} />
);
</file>

<file path="packages/elements/src/branch.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { UIMessage } from "ai";
import { ChevronLeftIcon, ChevronRightIcon } from "lucide-react";
import type { ComponentProps, HTMLAttributes, ReactElement } from "react";
import { createContext, useContext, useEffect, useState } from "react";

type BranchContextType = {
  currentBranch: number;
  totalBranches: number;
  goToPrevious: () => void;
  goToNext: () => void;
  branches: ReactElement[];
  setBranches: (branches: ReactElement[]) => void;
};

const BranchContext = createContext<BranchContextType | null>(null);

const useBranch = () => {
  const context = useContext(BranchContext);

  if (!context) {
    throw new Error("Branch components must be used within Branch");
  }

  return context;
};

export type BranchProps = HTMLAttributes<HTMLDivElement> & {
  defaultBranch?: number;
  onBranchChange?: (branchIndex: number) => void;
};

export const Branch = ({
  defaultBranch = 0,
  onBranchChange,
  className,
  ...props
}: BranchProps) => {
  const [currentBranch, setCurrentBranch] = useState(defaultBranch);
  const [branches, setBranches] = useState<ReactElement[]>([]);

  const handleBranchChange = (newBranch: number) => {
    setCurrentBranch(newBranch);
    onBranchChange?.(newBranch);
  };

  const goToPrevious = () => {
    const newBranch =
      currentBranch > 0 ? currentBranch - 1 : branches.length - 1;
    handleBranchChange(newBranch);
  };

  const goToNext = () => {
    const newBranch =
      currentBranch < branches.length - 1 ? currentBranch + 1 : 0;
    handleBranchChange(newBranch);
  };

  const contextValue: BranchContextType = {
    currentBranch,
    totalBranches: branches.length,
    goToPrevious,
    goToNext,
    branches,
    setBranches,
  };

  return (
    <BranchContext.Provider value={contextValue}>
      <div
        className={cn("grid w-full gap-2 [&>div]:pb-0", className)}
        {...props}
      />
    </BranchContext.Provider>
  );
};

export type BranchMessagesProps = HTMLAttributes<HTMLDivElement>;

export const BranchMessages = ({ children, ...props }: BranchMessagesProps) => {
  const { currentBranch, setBranches, branches } = useBranch();
  const childrenArray = Array.isArray(children) ? children : [children];

  // Use useEffect to update branches when they change
  useEffect(() => {
    if (branches.length !== childrenArray.length) {
      setBranches(childrenArray);
    }
  }, [childrenArray, branches, setBranches]);

  return childrenArray.map((branch, index) => (
    <div
      className={cn(
        "grid gap-2 overflow-hidden [&>div]:pb-0",
        index === currentBranch ? "block" : "hidden"
      )}
      key={branch.key}
      {...props}
    >
      {branch}
    </div>
  ));
};

export type BranchSelectorProps = HTMLAttributes<HTMLDivElement> & {
  from: UIMessage["role"];
};

export const BranchSelector = ({
  className,
  from,
  ...props
}: BranchSelectorProps) => {
  const { totalBranches } = useBranch();

  // Don't render if there's only one branch
  if (totalBranches <= 1) {
    return null;
  }

  return (
    <div
      className={cn(
        "flex items-center gap-2 self-end px-10",
        from === "assistant" ? "justify-start" : "justify-end",
        className
      )}
      {...props}
    />
  );
};

export type BranchPreviousProps = ComponentProps<typeof Button>;

export const BranchPrevious = ({
  className,
  children,
  ...props
}: BranchPreviousProps) => {
  const { goToPrevious, totalBranches } = useBranch();

  return (
    <Button
      aria-label="Previous branch"
      className={cn(
        "size-7 shrink-0 rounded-full text-muted-foreground transition-colors",
        "hover:bg-accent hover:text-foreground",
        "disabled:pointer-events-none disabled:opacity-50",
        className
      )}
      disabled={totalBranches <= 1}
      onClick={goToPrevious}
      size="icon"
      type="button"
      variant="ghost"
      {...props}
    >
      {children ?? <ChevronLeftIcon size={14} />}
    </Button>
  );
};

export type BranchNextProps = ComponentProps<typeof Button>;

export const BranchNext = ({
  className,
  children,
  ...props
}: BranchNextProps) => {
  const { goToNext, totalBranches } = useBranch();

  return (
    <Button
      aria-label="Next branch"
      className={cn(
        "size-7 shrink-0 rounded-full text-muted-foreground transition-colors",
        "hover:bg-accent hover:text-foreground",
        "disabled:pointer-events-none disabled:opacity-50",
        className
      )}
      disabled={totalBranches <= 1}
      onClick={goToNext}
      size="icon"
      type="button"
      variant="ghost"
      {...props}
    >
      {children ?? <ChevronRightIcon size={14} />}
    </Button>
  );
};

export type BranchPageProps = HTMLAttributes<HTMLSpanElement>;

export const BranchPage = ({ className, ...props }: BranchPageProps) => {
  const { currentBranch, totalBranches } = useBranch();

  return (
    <span
      className={cn(
        "font-medium text-muted-foreground text-xs tabular-nums",
        className
      )}
      {...props}
    >
      {currentBranch + 1} of {totalBranches}
    </span>
  );
};
</file>

<file path="packages/elements/src/chain-of-thought.tsx">
"use client";

import { useControllableState } from "@radix-ui/react-use-controllable-state";
import { Badge } from "@repo/shadcn-ui/components/ui/badge";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@repo/shadcn-ui/components/ui/collapsible";
import { cn } from "@repo/shadcn-ui/lib/utils";
import {
  BrainIcon,
  ChevronDownIcon,
  DotIcon,
  type LucideIcon,
} from "lucide-react";
import type { ComponentProps } from "react";
import { createContext, memo, useContext } from "react";

type ChainOfThoughtContextValue = {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
};

const ChainOfThoughtContext = createContext<ChainOfThoughtContextValue | null>(
  null
);

const useChainOfThought = () => {
  const context = useContext(ChainOfThoughtContext);
  if (!context) {
    throw new Error(
      "ChainOfThought components must be used within ChainOfThought"
    );
  }
  return context;
};

export type ChainOfThoughtProps = ComponentProps<"div"> & {
  open?: boolean;
  defaultOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
};

export const ChainOfThought = memo(
  ({
    className,
    open,
    defaultOpen = false,
    onOpenChange,
    children,
    ...props
  }: ChainOfThoughtProps) => {
    const [isOpen, setIsOpen] = useControllableState({
      prop: open,
      defaultProp: defaultOpen,
      onChange: onOpenChange,
    });

    return (
      <ChainOfThoughtContext.Provider value={{ isOpen, setIsOpen }}>
        <div
          className={cn("not-prose max-w-prose space-y-4", className)}
          {...props}
        >
          {children}
        </div>
      </ChainOfThoughtContext.Provider>
    );
  }
);

export type ChainOfThoughtHeaderProps = ComponentProps<
  typeof CollapsibleTrigger
>;

export const ChainOfThoughtHeader = memo(
  ({ className, children, ...props }: ChainOfThoughtHeaderProps) => {
    const { isOpen, setIsOpen } = useChainOfThought();

    return (
      <Collapsible onOpenChange={setIsOpen} open={isOpen}>
        <CollapsibleTrigger
          className={cn(
            "flex w-full items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground",
            className
          )}
          {...props}
        >
          <BrainIcon className="size-4" />
          <span className="flex-1 text-left">
            {children ?? "Chain of Thought"}
          </span>
          <ChevronDownIcon
            className={cn(
              "size-4 transition-transform",
              isOpen ? "rotate-180" : "rotate-0"
            )}
          />
        </CollapsibleTrigger>
      </Collapsible>
    );
  }
);

export type ChainOfThoughtStepProps = ComponentProps<"div"> & {
  icon?: LucideIcon;
  label: string;
  description?: string;
  status?: "complete" | "active" | "pending";
};

export const ChainOfThoughtStep = memo(
  ({
    className,
    icon: Icon = DotIcon,
    label,
    description,
    status = "complete",
    children,
    ...props
  }: ChainOfThoughtStepProps) => {
    const statusStyles = {
      complete: "text-muted-foreground",
      active: "text-foreground",
      pending: "text-muted-foreground/50",
    };

    return (
      <div
        className={cn(
          "flex gap-2 text-sm",
          statusStyles[status],
          "fade-in-0 slide-in-from-top-2 animate-in",
          className
        )}
        {...props}
      >
        <div className="relative mt-0.5">
          <Icon className="size-4" />
          <div className="-mx-px absolute top-7 bottom-0 left-1/2 w-px bg-border" />
        </div>
        <div className="flex-1 space-y-2">
          <div>{label}</div>
          {description && (
            <div className="text-muted-foreground text-xs">{description}</div>
          )}
          {children}
        </div>
      </div>
    );
  }
);

export type ChainOfThoughtSearchResultsProps = ComponentProps<"div">;

export const ChainOfThoughtSearchResults = memo(
  ({ className, ...props }: ChainOfThoughtSearchResultsProps) => (
    <div className={cn("flex items-center gap-2", className)} {...props} />
  )
);

export type ChainOfThoughtSearchResultProps = ComponentProps<typeof Badge>;

export const ChainOfThoughtSearchResult = memo(
  ({ className, children, ...props }: ChainOfThoughtSearchResultProps) => (
    <Badge
      className={cn("gap-1 px-2 py-0.5 font-normal text-xs", className)}
      variant="secondary"
      {...props}
    >
      {children}
    </Badge>
  )
);

export type ChainOfThoughtContentProps = ComponentProps<
  typeof CollapsibleContent
>;

export const ChainOfThoughtContent = memo(
  ({ className, children, ...props }: ChainOfThoughtContentProps) => {
    const { isOpen } = useChainOfThought();

    return (
      <Collapsible open={isOpen}>
        <CollapsibleContent
          className={cn(
            "mt-2 space-y-3",
            "data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in",
            className
          )}
          {...props}
        >
          {children}
        </CollapsibleContent>
      </Collapsible>
    );
  }
);

export type ChainOfThoughtImageProps = ComponentProps<"div"> & {
  caption?: string;
};

export const ChainOfThoughtImage = memo(
  ({ className, children, caption, ...props }: ChainOfThoughtImageProps) => (
    <div className={cn("mt-2 space-y-2", className)} {...props}>
      <div className="relative flex max-h-[22rem] items-center justify-center overflow-hidden rounded-lg bg-muted p-3">
        {children}
      </div>
      {caption && <p className="text-muted-foreground text-xs">{caption}</p>}
    </div>
  )
);

ChainOfThought.displayName = "ChainOfThought";
ChainOfThoughtHeader.displayName = "ChainOfThoughtHeader";
ChainOfThoughtStep.displayName = "ChainOfThoughtStep";
ChainOfThoughtSearchResults.displayName = "ChainOfThoughtSearchResults";
ChainOfThoughtSearchResult.displayName = "ChainOfThoughtSearchResult";
ChainOfThoughtContent.displayName = "ChainOfThoughtContent";
ChainOfThoughtImage.displayName = "ChainOfThoughtImage";
</file>

<file path="packages/elements/src/code-block.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { CheckIcon, CopyIcon } from "lucide-react";
import type { ComponentProps, HTMLAttributes, ReactNode } from "react";
import { createContext, useContext, useState } from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import {
  oneDark,
  oneLight,
} from "react-syntax-highlighter/dist/esm/styles/prism";

type CodeBlockContextType = {
  code: string;
};

const CodeBlockContext = createContext<CodeBlockContextType>({
  code: "",
});

export type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {
  code: string;
  language: string;
  showLineNumbers?: boolean;
  children?: ReactNode;
};

export const CodeBlock = ({
  code,
  language,
  showLineNumbers = false,
  className,
  children,
  ...props
}: CodeBlockProps) => (
  <CodeBlockContext.Provider value={{ code }}>
    <div
      className={cn(
        "relative w-full overflow-hidden rounded-md border bg-background text-foreground",
        className
      )}
      {...props}
    >
      <div className="relative">
        <SyntaxHighlighter
          className="overflow-hidden dark:hidden"
          codeTagProps={{
            className: "font-mono text-sm",
          }}
          customStyle={{
            margin: 0,
            padding: "1rem",
            fontSize: "0.875rem",
            background: "hsl(var(--background))",
            color: "hsl(var(--foreground))",
          }}
          language={language}
          lineNumberStyle={{
            color: "hsl(var(--muted-foreground))",
            paddingRight: "1rem",
            minWidth: "2.5rem",
          }}
          showLineNumbers={showLineNumbers}
          style={oneLight}
        >
          {code}
        </SyntaxHighlighter>
        <SyntaxHighlighter
          className="hidden overflow-hidden dark:block"
          codeTagProps={{
            className: "font-mono text-sm",
          }}
          customStyle={{
            margin: 0,
            padding: "1rem",
            fontSize: "0.875rem",
            background: "hsl(var(--background))",
            color: "hsl(var(--foreground))",
          }}
          language={language}
          lineNumberStyle={{
            color: "hsl(var(--muted-foreground))",
            paddingRight: "1rem",
            minWidth: "2.5rem",
          }}
          showLineNumbers={showLineNumbers}
          style={oneDark}
        >
          {code}
        </SyntaxHighlighter>
        {children && (
          <div className="absolute top-2 right-2 flex items-center gap-2">
            {children}
          </div>
        )}
      </div>
    </div>
  </CodeBlockContext.Provider>
);

export type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {
  onCopy?: () => void;
  onError?: (error: Error) => void;
  timeout?: number;
};

export const CodeBlockCopyButton = ({
  onCopy,
  onError,
  timeout = 2000,
  children,
  className,
  ...props
}: CodeBlockCopyButtonProps) => {
  const [isCopied, setIsCopied] = useState(false);
  const { code } = useContext(CodeBlockContext);

  const copyToClipboard = async () => {
    if (typeof window === "undefined" || !navigator.clipboard.writeText) {
      onError?.(new Error("Clipboard API not available"));
      return;
    }

    try {
      await navigator.clipboard.writeText(code);
      setIsCopied(true);
      onCopy?.();
      setTimeout(() => setIsCopied(false), timeout);
    } catch (error) {
      onError?.(error as Error);
    }
  };

  const Icon = isCopied ? CheckIcon : CopyIcon;

  return (
    <Button
      className={cn("shrink-0", className)}
      onClick={copyToClipboard}
      size="icon"
      variant="ghost"
      {...props}
    >
      {children ?? <Icon size={14} />}
    </Button>
  );
};
</file>

<file path="packages/elements/src/context.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@repo/shadcn-ui/components/ui/hover-card";
import { Progress } from "@repo/shadcn-ui/components/ui/progress";
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { LanguageModelUsage } from "ai";
import { type ComponentProps, createContext, useContext } from "react";
import { estimateCost, type ModelId } from "tokenlens";

const PERCENT_MAX = 100;
const ICON_RADIUS = 10;
const ICON_VIEWBOX = 24;
const ICON_CENTER = 12;
const ICON_STROKE_WIDTH = 2;

type ContextSchema = {
  usedTokens: number;
  maxTokens: number;
  usage?: LanguageModelUsage;
  modelId?: ModelId;
};

const ContextContext = createContext<ContextSchema | null>(null);

const useContextValue = () => {
  const context = useContext(ContextContext);

  if (!context) {
    throw new Error("Context components must be used within Context");
  }

  return context;
};

export type ContextProps = ComponentProps<typeof HoverCard> & ContextSchema;

export const Context = ({
  usedTokens,
  maxTokens,
  usage,
  modelId,
  ...props
}: ContextProps) => (
  <ContextContext.Provider
    value={{
      usedTokens,
      maxTokens,
      usage,
      modelId,
    }}
  >
    <HoverCard closeDelay={0} openDelay={0} {...props} />
  </ContextContext.Provider>
);

const ContextIcon = () => {
  const { usedTokens, maxTokens } = useContextValue();
  const circumference = 2 * Math.PI * ICON_RADIUS;
  const usedPercent = usedTokens / maxTokens;
  const dashOffset = circumference * (1 - usedPercent);

  return (
    <svg
      aria-label="Model context usage"
      height="20"
      role="img"
      style={{ color: "currentcolor" }}
      viewBox={`0 0 ${ICON_VIEWBOX} ${ICON_VIEWBOX}`}
      width="20"
    >
      <circle
        cx={ICON_CENTER}
        cy={ICON_CENTER}
        fill="none"
        opacity="0.25"
        r={ICON_RADIUS}
        stroke="currentColor"
        strokeWidth={ICON_STROKE_WIDTH}
      />
      <circle
        cx={ICON_CENTER}
        cy={ICON_CENTER}
        fill="none"
        opacity="0.7"
        r={ICON_RADIUS}
        stroke="currentColor"
        strokeDasharray={`${circumference} ${circumference}`}
        strokeDashoffset={dashOffset}
        strokeLinecap="round"
        strokeWidth={ICON_STROKE_WIDTH}
        style={{ transformOrigin: "center", transform: "rotate(-90deg)" }}
      />
    </svg>
  );
};

export type ContextTriggerProps = ComponentProps<typeof Button>;

export const ContextTrigger = ({ children, ...props }: ContextTriggerProps) => {
  const { usedTokens, maxTokens } = useContextValue();
  const usedPercent = usedTokens / maxTokens;
  const renderedPercent = new Intl.NumberFormat("en-US", {
    style: "percent",
    maximumFractionDigits: 1,
  }).format(usedPercent);

  return (
    <HoverCardTrigger asChild>
      {children ?? (
        <Button type="button" variant="ghost" {...props}>
          <span className="font-medium text-muted-foreground">
            {renderedPercent}
          </span>
          <ContextIcon />
        </Button>
      )}
    </HoverCardTrigger>
  );
};

export type ContextContentProps = ComponentProps<typeof HoverCardContent>;

export const ContextContent = ({
  className,
  ...props
}: ContextContentProps) => (
  <HoverCardContent
    className={cn("min-w-[240px] divide-y overflow-hidden p-0", className)}
    {...props}
  />
);

export type ContextContentHeader = ComponentProps<"div">;

export const ContextContentHeader = ({
  children,
  className,
  ...props
}: ContextContentHeader) => {
  const { usedTokens, maxTokens } = useContextValue();
  const usedPercent = usedTokens / maxTokens;
  const displayPct = new Intl.NumberFormat("en-US", {
    style: "percent",
    maximumFractionDigits: 1,
  }).format(usedPercent);
  const used = new Intl.NumberFormat("en-US", {
    notation: "compact",
  }).format(usedTokens);
  const total = new Intl.NumberFormat("en-US", {
    notation: "compact",
  }).format(maxTokens);

  return (
    <div className={cn("w-full space-y-2 p-3", className)} {...props}>
      {children ?? (
        <>
          <div className="flex items-center justify-between gap-3 text-xs">
            <p>{displayPct}</p>
            <p className="font-mono text-muted-foreground">
              {used} / {total}
            </p>
          </div>
          <div className="space-y-2">
            <Progress className="bg-muted" value={usedPercent * PERCENT_MAX} />
          </div>
        </>
      )}
    </div>
  );
};

export type ContextContentBody = ComponentProps<"div">;

export const ContextContentBody = ({
  children,
  className,
  ...props
}: ContextContentBody) => (
  <div className={cn("w-full p-3", className)} {...props}>
    {children}
  </div>
);

export type ContextContentFooter = ComponentProps<"div">;

export const ContextContentFooter = ({
  children,
  className,
  ...props
}: ContextContentFooter) => {
  const { modelId, usage } = useContextValue();
  const costUSD = modelId
    ? estimateCost({
        modelId,
        usage: {
          input: usage?.inputTokens ?? 0,
          output: usage?.outputTokens ?? 0,
        },
      }).totalUSD
    : undefined;
  const totalCost = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(costUSD ?? 0);

  return (
    <div
      className={cn(
        "flex w-full items-center justify-between gap-3 bg-secondary p-3 text-xs",
        className
      )}
      {...props}
    >
      {children ?? (
        <>
          <span className="text-muted-foreground">Total cost</span>
          <span>{totalCost}</span>
        </>
      )}
    </div>
  );
};

export type ContextInputUsageProps = ComponentProps<"div">;

export const ContextInputUsage = ({
  className,
  children,
  ...props
}: ContextInputUsageProps) => {
  const { usage, modelId } = useContextValue();
  const inputTokens = usage?.inputTokens ?? 0;

  if (children) {
    return children;
  }

  if (!inputTokens) {
    return null;
  }

  const inputCost = modelId
    ? estimateCost({
        modelId,
        usage: { input: inputTokens, output: 0 },
      }).totalUSD
    : undefined;
  const inputCostText = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(inputCost ?? 0);

  return (
    <div
      className={cn("flex items-center justify-between text-xs", className)}
      {...props}
    >
      <span className="text-muted-foreground">Input</span>
      <TokensWithCost costText={inputCostText} tokens={inputTokens} />
    </div>
  );
};

export type ContextOutputUsageProps = ComponentProps<"div">;

export const ContextOutputUsage = ({
  className,
  children,
  ...props
}: ContextOutputUsageProps) => {
  const { usage, modelId } = useContextValue();
  const outputTokens = usage?.outputTokens ?? 0;

  if (children) {
    return children;
  }

  if (!outputTokens) {
    return null;
  }

  const outputCost = modelId
    ? estimateCost({
        modelId,
        usage: { input: 0, output: outputTokens },
      }).totalUSD
    : undefined;
  const outputCostText = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(outputCost ?? 0);

  return (
    <div
      className={cn("flex items-center justify-between text-xs", className)}
      {...props}
    >
      <span className="text-muted-foreground">Output</span>
      <TokensWithCost costText={outputCostText} tokens={outputTokens} />
    </div>
  );
};

export type ContextReasoningUsageProps = ComponentProps<"div">;

export const ContextReasoningUsage = ({
  className,
  children,
  ...props
}: ContextReasoningUsageProps) => {
  const { usage, modelId } = useContextValue();
  const reasoningTokens = usage?.reasoningTokens ?? 0;

  if (children) {
    return children;
  }

  if (!reasoningTokens) {
    return null;
  }

  const reasoningCost = modelId
    ? estimateCost({
        modelId,
        usage: { reasoningTokens },
      }).totalUSD
    : undefined;
  const reasoningCostText = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(reasoningCost ?? 0);

  return (
    <div
      className={cn("flex items-center justify-between text-xs", className)}
      {...props}
    >
      <span className="text-muted-foreground">Reasoning</span>
      <TokensWithCost costText={reasoningCostText} tokens={reasoningTokens} />
    </div>
  );
};

export type ContextCacheUsageProps = ComponentProps<"div">;

export const ContextCacheUsage = ({
  className,
  children,
  ...props
}: ContextCacheUsageProps) => {
  const { usage, modelId } = useContextValue();
  const cacheTokens = usage?.cachedInputTokens ?? 0;

  if (children) {
    return children;
  }

  if (!cacheTokens) {
    return null;
  }

  const cacheCost = modelId
    ? estimateCost({
        modelId,
        usage: { cacheReads: cacheTokens, input: 0, output: 0 },
      }).totalUSD
    : undefined;
  const cacheCostText = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(cacheCost ?? 0);

  return (
    <div
      className={cn("flex items-center justify-between text-xs", className)}
      {...props}
    >
      <span className="text-muted-foreground">Cache</span>
      <TokensWithCost costText={cacheCostText} tokens={cacheTokens} />
    </div>
  );
};

const TokensWithCost = ({
  tokens,
  costText,
}: {
  tokens?: number;
  costText?: string;
}) => (
  <span>
    {tokens === undefined
      ? "—"
      : new Intl.NumberFormat("en-US", {
          notation: "compact",
        }).format(tokens)}
    {costText ? (
      <span className="ml-2 text-muted-foreground">• {costText}</span>
    ) : null}
  </span>
);
</file>

<file path="packages/elements/src/conversation.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { ArrowDownIcon } from "lucide-react";
import type { ComponentProps } from "react";
import { useCallback } from "react";
import { StickToBottom, useStickToBottomContext } from "use-stick-to-bottom";

export type ConversationProps = ComponentProps<typeof StickToBottom>;

export const Conversation = ({ className, ...props }: ConversationProps) => (
  <StickToBottom
    className={cn("relative flex-1 overflow-y-auto", className)}
    initial="smooth"
    resize="smooth"
    role="log"
    {...props}
  />
);

export type ConversationContentProps = ComponentProps<
  typeof StickToBottom.Content
>;

export const ConversationContent = ({
  className,
  ...props
}: ConversationContentProps) => (
  <StickToBottom.Content className={cn("p-4", className)} {...props} />
);

export type ConversationEmptyStateProps = ComponentProps<"div"> & {
  title?: string;
  description?: string;
  icon?: React.ReactNode;
};

export const ConversationEmptyState = ({
  className,
  title = "No messages yet",
  description = "Start a conversation to see messages here",
  icon,
  children,
  ...props
}: ConversationEmptyStateProps) => (
  <div
    className={cn(
      "flex size-full flex-col items-center justify-center gap-3 p-8 text-center",
      className
    )}
    {...props}
  >
    {children ?? (
      <>
        {icon && <div className="text-muted-foreground">{icon}</div>}
        <div className="space-y-1">
          <h3 className="font-medium text-sm">{title}</h3>
          {description && (
            <p className="text-muted-foreground text-sm">{description}</p>
          )}
        </div>
      </>
    )}
  </div>
);

export type ConversationScrollButtonProps = ComponentProps<typeof Button>;

export const ConversationScrollButton = ({
  className,
  ...props
}: ConversationScrollButtonProps) => {
  const { isAtBottom, scrollToBottom } = useStickToBottomContext();

  const handleScrollToBottom = useCallback(() => {
    scrollToBottom();
  }, [scrollToBottom]);

  return (
    !isAtBottom && (
      <Button
        className={cn(
          "absolute bottom-4 left-[50%] translate-x-[-50%] rounded-full",
          className
        )}
        onClick={handleScrollToBottom}
        size="icon"
        type="button"
        variant="outline"
        {...props}
      >
        <ArrowDownIcon className="size-4" />
      </Button>
    )
  );
};
</file>

<file path="packages/elements/src/image.tsx">
/** biome-ignore-all lint/performance/noImgElement: "ai-elements is framework agnostic" */
/** biome-ignore-all lint/nursery/useImageSize: "size will be handled by props" */

import { cn } from "@repo/shadcn-ui/lib/utils";
import type { Experimental_GeneratedImage } from "ai";

export type ImageProps = Experimental_GeneratedImage & {
  className?: string;
  alt?: string;
};

export const Image = ({
  base64,
  uint8Array,
  mediaType,
  ...props
}: ImageProps) => (
  <img
    {...props}
    alt={props.alt}
    className={cn(
      "h-auto max-w-full overflow-hidden rounded-md",
      props.className
    )}
    src={`data:${mediaType};base64,${base64}`}
  />
);
</file>

<file path="packages/elements/src/inline-citation.tsx">
"use client";

import { Badge } from "@repo/shadcn-ui/components/ui/badge";
import {
  Carousel,
  type CarouselApi,
  CarouselContent,
  CarouselItem,
} from "@repo/shadcn-ui/components/ui/carousel";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@repo/shadcn-ui/components/ui/hover-card";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { ArrowLeftIcon, ArrowRightIcon } from "lucide-react";
import {
  type ComponentProps,
  createContext,
  useCallback,
  useContext,
  useEffect,
  useState,
} from "react";

export type InlineCitationProps = ComponentProps<"span">;

export const InlineCitation = ({
  className,
  ...props
}: InlineCitationProps) => (
  <span
    className={cn("group inline items-center gap-1", className)}
    {...props}
  />
);

export type InlineCitationTextProps = ComponentProps<"span">;

export const InlineCitationText = ({
  className,
  ...props
}: InlineCitationTextProps) => (
  <span
    className={cn("transition-colors group-hover:bg-accent", className)}
    {...props}
  />
);

export type InlineCitationCardProps = ComponentProps<typeof HoverCard>;

export const InlineCitationCard = (props: InlineCitationCardProps) => (
  <HoverCard closeDelay={0} openDelay={0} {...props} />
);

export type InlineCitationCardTriggerProps = ComponentProps<typeof Badge> & {
  sources: string[];
};

export const InlineCitationCardTrigger = ({
  sources,
  className,
  ...props
}: InlineCitationCardTriggerProps) => (
  <HoverCardTrigger asChild>
    <Badge
      className={cn("ml-1 rounded-full", className)}
      variant="secondary"
      {...props}
    >
      {sources.length ? (
        <>
          {new URL(sources[0]).hostname}{" "}
          {sources.length > 1 && `+${sources.length - 1}`}
        </>
      ) : (
        "unknown"
      )}
    </Badge>
  </HoverCardTrigger>
);

export type InlineCitationCardBodyProps = ComponentProps<"div">;

export const InlineCitationCardBody = ({
  className,
  ...props
}: InlineCitationCardBodyProps) => (
  <HoverCardContent className={cn("relative w-80 p-0", className)} {...props} />
);

const CarouselApiContext = createContext<CarouselApi | undefined>(undefined);

const useCarouselApi = () => {
  const context = useContext(CarouselApiContext);
  return context;
};

export type InlineCitationCarouselProps = ComponentProps<typeof Carousel>;

export const InlineCitationCarousel = ({
  className,
  children,
  ...props
}: InlineCitationCarouselProps) => {
  const [api, setApi] = useState<CarouselApi>();

  return (
    <CarouselApiContext.Provider value={api}>
      <Carousel className={cn("w-full", className)} setApi={setApi} {...props}>
        {children}
      </Carousel>
    </CarouselApiContext.Provider>
  );
};

export type InlineCitationCarouselContentProps = ComponentProps<"div">;

export const InlineCitationCarouselContent = (
  props: InlineCitationCarouselContentProps
) => <CarouselContent {...props} />;

export type InlineCitationCarouselItemProps = ComponentProps<"div">;

export const InlineCitationCarouselItem = ({
  className,
  ...props
}: InlineCitationCarouselItemProps) => (
  <CarouselItem
    className={cn("w-full space-y-2 p-4 pl-8", className)}
    {...props}
  />
);

export type InlineCitationCarouselHeaderProps = ComponentProps<"div">;

export const InlineCitationCarouselHeader = ({
  className,
  ...props
}: InlineCitationCarouselHeaderProps) => (
  <div
    className={cn(
      "flex items-center justify-between gap-2 rounded-t-md bg-secondary p-2",
      className
    )}
    {...props}
  />
);

export type InlineCitationCarouselIndexProps = ComponentProps<"div">;

export const InlineCitationCarouselIndex = ({
  children,
  className,
  ...props
}: InlineCitationCarouselIndexProps) => {
  const api = useCarouselApi();
  const [current, setCurrent] = useState(0);
  const [count, setCount] = useState(0);

  useEffect(() => {
    if (!api) {
      return;
    }

    setCount(api.scrollSnapList().length);
    setCurrent(api.selectedScrollSnap() + 1);

    api.on("select", () => {
      setCurrent(api.selectedScrollSnap() + 1);
    });
  }, [api]);

  return (
    <div
      className={cn(
        "flex flex-1 items-center justify-end px-3 py-1 text-muted-foreground text-xs",
        className
      )}
      {...props}
    >
      {children ?? `${current}/${count}`}
    </div>
  );
};

export type InlineCitationCarouselPrevProps = ComponentProps<"button">;

export const InlineCitationCarouselPrev = ({
  className,
  ...props
}: InlineCitationCarouselPrevProps) => {
  const api = useCarouselApi();

  const handleClick = useCallback(() => {
    if (api) {
      api.scrollPrev();
    }
  }, [api]);

  return (
    <button
      aria-label="Previous"
      className={cn("shrink-0", className)}
      onClick={handleClick}
      type="button"
      {...props}
    >
      <ArrowLeftIcon className="size-4 text-muted-foreground" />
    </button>
  );
};

export type InlineCitationCarouselNextProps = ComponentProps<"button">;

export const InlineCitationCarouselNext = ({
  className,
  ...props
}: InlineCitationCarouselNextProps) => {
  const api = useCarouselApi();

  const handleClick = useCallback(() => {
    if (api) {
      api.scrollNext();
    }
  }, [api]);

  return (
    <button
      aria-label="Next"
      className={cn("shrink-0", className)}
      onClick={handleClick}
      type="button"
      {...props}
    >
      <ArrowRightIcon className="size-4 text-muted-foreground" />
    </button>
  );
};

export type InlineCitationSourceProps = ComponentProps<"div"> & {
  title?: string;
  url?: string;
  description?: string;
};

export const InlineCitationSource = ({
  title,
  url,
  description,
  className,
  children,
  ...props
}: InlineCitationSourceProps) => (
  <div className={cn("space-y-1", className)} {...props}>
    {title && (
      <h4 className="truncate font-medium text-sm leading-tight">{title}</h4>
    )}
    {url && (
      <p className="truncate break-all text-muted-foreground text-xs">{url}</p>
    )}
    {description && (
      <p className="line-clamp-3 text-muted-foreground text-sm leading-relaxed">
        {description}
      </p>
    )}
    {children}
  </div>
);

export type InlineCitationQuoteProps = ComponentProps<"blockquote">;

export const InlineCitationQuote = ({
  children,
  className,
  ...props
}: InlineCitationQuoteProps) => (
  <blockquote
    className={cn(
      "border-muted border-l-2 pl-3 text-muted-foreground text-sm italic",
      className
    )}
    {...props}
  >
    {children}
  </blockquote>
);
</file>

<file path="packages/elements/src/loader.tsx">
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { HTMLAttributes } from "react";

type LoaderIconProps = {
  size?: number;
};

const LoaderIcon = ({ size = 16 }: LoaderIconProps) => (
  <svg
    height={size}
    strokeLinejoin="round"
    style={{ color: "currentcolor" }}
    viewBox="0 0 16 16"
    width={size}
  >
    <title>Loader</title>
    <g clipPath="url(#clip0_2393_1490)">
      <path d="M8 0V4" stroke="currentColor" strokeWidth="1.5" />
      <path
        d="M8 16V12"
        opacity="0.5"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M3.29773 1.52783L5.64887 4.7639"
        opacity="0.9"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M12.7023 1.52783L10.3511 4.7639"
        opacity="0.1"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M12.7023 14.472L10.3511 11.236"
        opacity="0.4"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M3.29773 14.472L5.64887 11.236"
        opacity="0.6"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M15.6085 5.52783L11.8043 6.7639"
        opacity="0.2"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M0.391602 10.472L4.19583 9.23598"
        opacity="0.7"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M15.6085 10.4722L11.8043 9.2361"
        opacity="0.3"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M0.391602 5.52783L4.19583 6.7639"
        opacity="0.8"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </g>
    <defs>
      <clipPath id="clip0_2393_1490">
        <rect fill="white" height="16" width="16" />
      </clipPath>
    </defs>
  </svg>
);

export type LoaderProps = HTMLAttributes<HTMLDivElement> & {
  size?: number;
};

export const Loader = ({ className, size = 16, ...props }: LoaderProps) => (
  <div
    className={cn(
      "inline-flex animate-spin items-center justify-center",
      className
    )}
    {...props}
  >
    <LoaderIcon size={size} />
  </div>
);
</file>

<file path="packages/elements/src/message.tsx">
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@repo/shadcn-ui/components/ui/avatar";
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { UIMessage } from "ai";
import { cva, type VariantProps } from "class-variance-authority";
import type { ComponentProps, HTMLAttributes } from "react";

export type MessageProps = HTMLAttributes<HTMLDivElement> & {
  from: UIMessage["role"];
};

export const Message = ({ className, from, ...props }: MessageProps) => (
  <div
    className={cn(
      "group flex w-full items-end justify-end gap-2 py-4",
      from === "user" ? "is-user" : "is-assistant flex-row-reverse justify-end",
      className
    )}
    {...props}
  />
);

const messageContentVariants = cva(
  "is-user:dark flex flex-col gap-2 overflow-hidden rounded-lg text-sm",
  {
    variants: {
      variant: {
        contained: [
          "max-w-[80%] px-4 py-3",
          "group-[.is-user]:bg-primary group-[.is-user]:text-primary-foreground",
          "group-[.is-assistant]:bg-secondary group-[.is-assistant]:text-foreground",
        ],
        flat: [
          "group-[.is-user]:max-w-[80%] group-[.is-user]:bg-secondary group-[.is-user]:px-4 group-[.is-user]:py-3 group-[.is-user]:text-foreground",
          "group-[.is-assistant]:text-foreground",
        ],
      },
    },
    defaultVariants: {
      variant: "contained",
    },
  }
);

export type MessageContentProps = HTMLAttributes<HTMLDivElement> &
  VariantProps<typeof messageContentVariants>;

export const MessageContent = ({
  children,
  className,
  variant,
  ...props
}: MessageContentProps) => (
  <div
    className={cn(messageContentVariants({ variant, className }))}
    {...props}
  >
    {children}
  </div>
);

export type MessageAvatarProps = ComponentProps<typeof Avatar> & {
  src: string;
  name?: string;
};

export const MessageAvatar = ({
  src,
  name,
  className,
  ...props
}: MessageAvatarProps) => (
  <Avatar className={cn("size-8 ring-1 ring-border", className)} {...props}>
    <AvatarImage alt="" className="mt-0 mb-0" src={src} />
    <AvatarFallback>{name?.slice(0, 2) || "ME"}</AvatarFallback>
  </Avatar>
);
</file>

<file path="packages/elements/src/open-in-chat.tsx">
import { Button } from "@repo/shadcn-ui/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@repo/shadcn-ui/components/ui/dropdown-menu";
import { cn } from "@repo/shadcn-ui/lib/utils";
import {
  ChevronDownIcon,
  ExternalLinkIcon,
  MessageCircleIcon,
} from "lucide-react";
import { type ComponentProps, createContext, useContext } from "react";

const providers = {
  github: {
    title: "Open in GitHub",
    createUrl: (url: string) => url,
    icon: (
      <svg fill="currentColor" role="img" viewBox="0 0 24 24">
        <title>GitHub</title>
        <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
      </svg>
    ),
  },
  scira: {
    title: "Open in Scira",
    createUrl: (q: string) =>
      `https://scira.ai/?${new URLSearchParams({
        q,
      })}`,
    icon: (
      <svg
        fill="none"
        height="934"
        viewBox="0 0 910 934"
        width="910"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>Scira AI</title>
        <path
          d="M647.664 197.775C569.13 189.049 525.5 145.419 516.774 66.8849C508.048 145.419 464.418 189.049 385.884 197.775C464.418 206.501 508.048 250.131 516.774 328.665C525.5 250.131 569.13 206.501 647.664 197.775Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M516.774 304.217C510.299 275.491 498.208 252.087 480.335 234.214C462.462 216.341 439.058 204.251 410.333 197.775C439.059 191.3 462.462 179.209 480.335 161.336C498.208 143.463 510.299 120.06 516.774 91.334C523.25 120.059 535.34 143.463 553.213 161.336C571.086 179.209 594.49 191.3 623.216 197.775C594.49 204.251 571.086 216.341 553.213 234.214C535.34 252.087 523.25 275.491 516.774 304.217Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M857.5 508.116C763.259 497.644 710.903 445.288 700.432 351.047C689.961 445.288 637.605 497.644 543.364 508.116C637.605 518.587 689.961 570.943 700.432 665.184C710.903 570.943 763.259 518.587 857.5 508.116Z"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="20"
        />
        <path
          d="M700.432 615.957C691.848 589.05 678.575 566.357 660.383 548.165C642.191 529.973 619.499 516.7 592.593 508.116C619.499 499.533 642.191 486.258 660.383 468.066C678.575 449.874 691.848 427.181 700.432 400.274C709.015 427.181 722.289 449.874 740.481 468.066C758.673 486.258 781.365 499.533 808.271 508.116C781.365 516.7 758.673 529.973 740.481 548.165C722.289 566.357 709.015 589.05 700.432 615.957Z"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="20"
        />
        <path
          d="M889.949 121.237C831.049 114.692 798.326 81.9698 791.782 23.0692C785.237 81.9698 752.515 114.692 693.614 121.237C752.515 127.781 785.237 160.504 791.782 219.404C798.326 160.504 831.049 127.781 889.949 121.237Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M791.782 196.795C786.697 176.937 777.869 160.567 765.16 147.858C752.452 135.15 736.082 126.322 716.226 121.237C736.082 116.152 752.452 107.324 765.16 94.6152C777.869 81.9065 786.697 65.5368 791.782 45.6797C796.867 65.5367 805.695 81.9066 818.403 94.6152C831.112 107.324 847.481 116.152 867.338 121.237C847.481 126.322 831.112 135.15 818.403 147.858C805.694 160.567 796.867 176.937 791.782 196.795Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M760.632 764.337C720.719 814.616 669.835 855.1 611.872 882.692C553.91 910.285 490.404 924.255 426.213 923.533C362.022 922.812 298.846 907.419 241.518 878.531C184.19 849.643 134.228 808.026 95.4548 756.863C56.6815 705.7 30.1238 646.346 17.8129 583.343C5.50207 520.339 7.76433 455.354 24.4266 393.359C41.089 331.364 71.7099 274.001 113.947 225.658C156.184 177.315 208.919 139.273 268.117 114.442"
          stroke="currentColor"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="30"
        />
      </svg>
    ),
  },
  chatgpt: {
    title: "Open in ChatGPT",
    createUrl: (q: string) =>
      `https://chatgpt.com/?${new URLSearchParams({
        hints: "search",
        q,
      })}`,
    icon: (
      <svg
        fill="currentColor"
        role="img"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>OpenAI</title>
        <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
      </svg>
    ),
  },
  claude: {
    title: "Open in Claude",
    createUrl: (q: string) =>
      `https://claude.ai/new?${new URLSearchParams({
        q,
      })}`,
    icon: (
      <svg
        fill="currentColor"
        role="img"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>Anthropic</title>
        <path d="M17.3041 3.541h-3.6718l6.696 16.918H24Zm-10.6082 0L0 20.459h3.7442l1.3693-3.5527h7.0052l1.3693 3.5528h3.7442L10.5363 3.5409Zm-.3712 10.2232 2.2914-5.9456 2.2914 5.9456Z" />
      </svg>
    ),
  },
  t3: {
    title: "Open in T3 Chat",
    createUrl: (q: string) =>
      `https://t3.chat/new?${new URLSearchParams({
        q,
      })}`,
    icon: <MessageCircleIcon />,
  },
  v0: {
    title: "Open in V0",
    createUrl: (q: string) =>
      `https://v0.app?${new URLSearchParams({
        q,
      })}`,
    icon: (
      <svg
        fill="currentColor"
        viewBox="0 0 147 70"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>V0</title>
        <path d="M56 50.2031V14H70V60.1562C70 65.5928 65.5928 70 60.1562 70C57.5605 70 54.9982 68.9992 53.1562 67.1573L0 14H19.7969L56 50.2031Z" />
        <path d="M147 56H133V23.9531L100.953 56H133V70H96.6875C85.8144 70 77 61.1856 77 50.3125V14H91V46.1562L123.156 14H91V0H127.312C138.186 0 147 8.81439 147 19.6875V56Z" />
      </svg>
    ),
  },
};

const OpenInContext = createContext<{ query: string } | undefined>(undefined);

const useOpenInContext = () => {
  const context = useContext(OpenInContext);
  if (!context) {
    throw new Error("OpenIn components must be used within an OpenIn provider");
  }
  return context;
};

export type OpenInProps = ComponentProps<typeof DropdownMenu> & {
  query: string;
};

export const OpenIn = ({ query, ...props }: OpenInProps) => (
  <OpenInContext.Provider value={{ query }}>
    <DropdownMenu {...props} />
  </OpenInContext.Provider>
);

export type OpenInContentProps = ComponentProps<typeof DropdownMenuContent>;

export const OpenInContent = ({ className, ...props }: OpenInContentProps) => (
  <DropdownMenuContent
    align="start"
    className={cn("w-[240px]", className)}
    {...props}
  />
);

export type OpenInItemProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInItem = (props: OpenInItemProps) => (
  <DropdownMenuItem {...props} />
);

export type OpenInLabelProps = ComponentProps<typeof DropdownMenuLabel>;

export const OpenInLabel = (props: OpenInLabelProps) => (
  <DropdownMenuLabel {...props} />
);

export type OpenInSeparatorProps = ComponentProps<typeof DropdownMenuSeparator>;

export const OpenInSeparator = (props: OpenInSeparatorProps) => (
  <DropdownMenuSeparator {...props} />
);

export type OpenInTriggerProps = ComponentProps<typeof DropdownMenuTrigger>;

export const OpenInTrigger = ({ children, ...props }: OpenInTriggerProps) => (
  <DropdownMenuTrigger {...props} asChild>
    {children ?? (
      <Button type="button" variant="outline">
        Open in chat
        <ChevronDownIcon className="ml-2 size-4" />
      </Button>
    )}
  </DropdownMenuTrigger>
);

export type OpenInChatGPTProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInChatGPT = (props: OpenInChatGPTProps) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.chatgpt.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.chatgpt.icon}</span>
        <span className="flex-1">{providers.chatgpt.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInClaudeProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInClaude = (props: OpenInClaudeProps) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.claude.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.claude.icon}</span>
        <span className="flex-1">{providers.claude.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInT3Props = ComponentProps<typeof DropdownMenuItem>;

export const OpenInT3 = (props: OpenInT3Props) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.t3.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.t3.icon}</span>
        <span className="flex-1">{providers.t3.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInSciraProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInScira = (props: OpenInSciraProps) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.scira.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.scira.icon}</span>
        <span className="flex-1">{providers.scira.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInv0Props = ComponentProps<typeof DropdownMenuItem>;

export const OpenInv0 = (props: OpenInv0Props) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.v0.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.v0.icon}</span>
        <span className="flex-1">{providers.v0.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};
</file>

<file path="packages/elements/src/prompt-input.tsx">
/** biome-ignore-all lint/performance/noImgElement: "AI Elements is framework agnostic" */

"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@repo/shadcn-ui/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@repo/shadcn-ui/components/ui/select";
import { Textarea } from "@repo/shadcn-ui/components/ui/textarea";
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { ChatStatus, FileUIPart } from "ai";
import {
  ImageIcon,
  Loader2Icon,
  PaperclipIcon,
  PlusIcon,
  SendIcon,
  SquareIcon,
  XIcon,
} from "lucide-react";
import { nanoid } from "nanoid";
import {
  type ChangeEventHandler,
  Children,
  type ComponentProps,
  createContext,
  type FormEvent,
  type FormEventHandler,
  Fragment,
  type HTMLAttributes,
  type KeyboardEventHandler,
  type RefObject,
  useCallback,
  useContext,
  useEffect,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
} from "react";

type AttachmentsContext = {
  files: (FileUIPart & { id: string })[];
  add: (files: File[] | FileList) => void;
  remove: (id: string) => void;
  clear: () => void;
  openFileDialog: () => void;
  fileInputRef: RefObject<HTMLInputElement | null>;
};

const AttachmentsContext = createContext<AttachmentsContext | null>(null);

export const usePromptInputAttachments = () => {
  const context = useContext(AttachmentsContext);

  if (!context) {
    throw new Error(
      "usePromptInputAttachments must be used within a PromptInput"
    );
  }

  return context;
};

export type PromptInputAttachmentProps = HTMLAttributes<HTMLDivElement> & {
  data: FileUIPart & { id: string };
  className?: string;
};

export function PromptInputAttachment({
  data,
  className,
  ...props
}: PromptInputAttachmentProps) {
  const attachments = usePromptInputAttachments();

  return (
    <div
      className={cn("group relative h-14 w-14 rounded-md border", className)}
      key={data.id}
      {...props}
    >
      {data.mediaType?.startsWith("image/") && data.url ? (
        <img
          alt={data.filename || "attachment"}
          className="size-full rounded-md object-cover"
          height={56}
          src={data.url}
          width={56}
        />
      ) : (
        <div className="flex size-full items-center justify-center text-muted-foreground">
          <PaperclipIcon className="size-4" />
        </div>
      )}
      <Button
        aria-label="Remove attachment"
        className="-right-1.5 -top-1.5 absolute h-6 w-6 rounded-full opacity-0 group-hover:opacity-100"
        onClick={() => attachments.remove(data.id)}
        size="icon"
        type="button"
        variant="outline"
      >
        <XIcon className="h-3 w-3" />
      </Button>
    </div>
  );
}

export type PromptInputAttachmentsProps = Omit<
  HTMLAttributes<HTMLDivElement>,
  "children"
> & {
  children: (attachment: FileUIPart & { id: string }) => React.ReactNode;
};

export function PromptInputAttachments({
  className,
  children,
  ...props
}: PromptInputAttachmentsProps) {
  const attachments = usePromptInputAttachments();
  const [height, setHeight] = useState(0);
  const contentRef = useRef<HTMLDivElement>(null);

  useLayoutEffect(() => {
    const el = contentRef.current;
    if (!el) {
      return;
    }
    const ro = new ResizeObserver(() => {
      setHeight(el.getBoundingClientRect().height);
    });
    ro.observe(el);
    setHeight(el.getBoundingClientRect().height);
    return () => ro.disconnect();
  }, []);

  return (
    <div
      aria-live="polite"
      className={cn(
        "overflow-hidden transition-[height] duration-200 ease-out",
        className
      )}
      style={{ height: attachments.files.length ? height : 0 }}
      {...props}
    >
      <div className="flex flex-wrap gap-2 p-3 pt-3" ref={contentRef}>
        {attachments.files.map((file) => (
          <Fragment key={file.id}>{children(file)}</Fragment>
        ))}
      </div>
    </div>
  );
}

export type PromptInputActionAddAttachmentsProps = ComponentProps<
  typeof DropdownMenuItem
> & {
  label?: string;
};

export const PromptInputActionAddAttachments = ({
  label = "Add photos or files",
  ...props
}: PromptInputActionAddAttachmentsProps) => {
  const attachments = usePromptInputAttachments();

  return (
    <DropdownMenuItem
      {...props}
      onSelect={(e) => {
        e.preventDefault();
        attachments.openFileDialog();
      }}
    >
      <ImageIcon className="mr-2 size-4" /> {label}
    </DropdownMenuItem>
  );
};

export type PromptInputMessage = {
  text?: string;
  files?: FileUIPart[];
};

export type PromptInputProps = Omit<
  HTMLAttributes<HTMLFormElement>,
  "onSubmit"
> & {
  accept?: string; // e.g., "image/*" or leave undefined for any
  multiple?: boolean;
  // When true, accepts drops anywhere on document. Default false (opt-in).
  globalDrop?: boolean;
  // Render a hidden input with given name and keep it in sync for native form posts. Default false.
  syncHiddenInput?: boolean;
  // Minimal constraints
  maxFiles?: number;
  maxFileSize?: number; // bytes
  onError?: (err: {
    code: "max_files" | "max_file_size" | "accept";
    message: string;
  }) => void;
  onSubmit: (
    message: PromptInputMessage,
    event: FormEvent<HTMLFormElement>
  ) => void;
};

export const PromptInput = ({
  className,
  accept,
  multiple,
  globalDrop,
  syncHiddenInput,
  maxFiles,
  maxFileSize,
  onError,
  onSubmit,
  ...props
}: PromptInputProps) => {
  const [items, setItems] = useState<(FileUIPart & { id: string })[]>([]);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const anchorRef = useRef<HTMLSpanElement>(null);
  const formRef = useRef<HTMLFormElement | null>(null);

  // Find nearest form to scope drag & drop
  useEffect(() => {
    const root = anchorRef.current?.closest("form");
    if (root instanceof HTMLFormElement) {
      formRef.current = root;
    }
  }, []);

  const openFileDialog = useCallback(() => {
    inputRef.current?.click();
  }, []);

  const matchesAccept = useCallback(
    (f: File) => {
      if (!accept || accept.trim() === "") {
        return true;
      }
      // Simple check: if accept includes "image/*", filter to images; otherwise allow.
      if (accept.includes("image/*")) {
        return f.type.startsWith("image/");
      }
      return true;
    },
    [accept]
  );

  const add = useCallback(
    (files: File[] | FileList) => {
      const incoming = Array.from(files);
      const accepted = incoming.filter((f) => matchesAccept(f));
      if (accepted.length === 0) {
        onError?.({
          code: "accept",
          message: "No files match the accepted types.",
        });
        return;
      }
      const withinSize = (f: File) =>
        maxFileSize ? f.size <= maxFileSize : true;
      const sized = accepted.filter(withinSize);
      if (sized.length === 0 && accepted.length > 0) {
        onError?.({
          code: "max_file_size",
          message: "All files exceed the maximum size.",
        });
        return;
      }
      setItems((prev) => {
        const capacity =
          typeof maxFiles === "number"
            ? Math.max(0, maxFiles - prev.length)
            : undefined;
        const capped =
          typeof capacity === "number" ? sized.slice(0, capacity) : sized;
        if (typeof capacity === "number" && sized.length > capacity) {
          onError?.({
            code: "max_files",
            message: "Too many files. Some were not added.",
          });
        }
        const next: (FileUIPart & { id: string })[] = [];
        for (const file of capped) {
          next.push({
            id: nanoid(),
            type: "file",
            url: URL.createObjectURL(file),
            mediaType: file.type,
            filename: file.name,
          });
        }
        return prev.concat(next);
      });
    },
    [matchesAccept, maxFiles, maxFileSize, onError]
  );

  const remove = useCallback((id: string) => {
    setItems((prev) => {
      const found = prev.find((file) => file.id === id);
      if (found?.url) {
        URL.revokeObjectURL(found.url);
      }
      return prev.filter((file) => file.id !== id);
    });
  }, []);

  const clear = useCallback(() => {
    setItems((prev) => {
      for (const file of prev) {
        if (file.url) {
          URL.revokeObjectURL(file.url);
        }
      }
      return [];
    });
  }, []);

  // Note: File input cannot be programmatically set for security reasons
  // The syncHiddenInput prop is no longer functional
  useEffect(() => {
    if (syncHiddenInput && inputRef.current) {
      // Clear the input when items are cleared
      if (items.length === 0) {
        inputRef.current.value = "";
      }
    }
  }, [items, syncHiddenInput]);

  // Attach drop handlers on nearest form and document (opt-in)
  useEffect(() => {
    const form = formRef.current;
    if (!form) {
      return;
    }
    const onDragOver = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes("Files")) {
        e.preventDefault();
      }
    };
    const onDrop = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes("Files")) {
        e.preventDefault();
      }
      if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {
        add(e.dataTransfer.files);
      }
    };
    form.addEventListener("dragover", onDragOver);
    form.addEventListener("drop", onDrop);
    return () => {
      form.removeEventListener("dragover", onDragOver);
      form.removeEventListener("drop", onDrop);
    };
  }, [add]);

  useEffect(() => {
    if (!globalDrop) {
      return;
    }
    const onDragOver = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes("Files")) {
        e.preventDefault();
      }
    };
    const onDrop = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes("Files")) {
        e.preventDefault();
      }
      if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {
        add(e.dataTransfer.files);
      }
    };
    document.addEventListener("dragover", onDragOver);
    document.addEventListener("drop", onDrop);
    return () => {
      document.removeEventListener("dragover", onDragOver);
      document.removeEventListener("drop", onDrop);
    };
  }, [add, globalDrop]);

  const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {
    if (event.currentTarget.files) {
      add(event.currentTarget.files);
    }
  };

  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {
    event.preventDefault();

    const files: FileUIPart[] = items.map(({ ...item }) => ({
      ...item,
    }));

    onSubmit({ text: event.currentTarget.message.value, files }, event);
  };

  const ctx = useMemo<AttachmentsContext>(
    () => ({
      files: items.map((item) => ({ ...item, id: item.id })),
      add,
      remove,
      clear,
      openFileDialog,
      fileInputRef: inputRef,
    }),
    [items, add, remove, clear, openFileDialog]
  );

  return (
    <AttachmentsContext.Provider value={ctx}>
      <span aria-hidden="true" className="hidden" ref={anchorRef} />
      <input
        accept={accept}
        className="hidden"
        multiple={multiple}
        onChange={handleChange}
        ref={inputRef}
        type="file"
      />
      <form
        className={cn(
          "w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm",
          className
        )}
        onSubmit={handleSubmit}
        {...props}
      />
    </AttachmentsContext.Provider>
  );
};

export type PromptInputBodyProps = HTMLAttributes<HTMLDivElement>;

export const PromptInputBody = ({
  className,
  ...props
}: PromptInputBodyProps) => (
  <div className={cn(className, "flex flex-col")} {...props} />
);

export type PromptInputTextareaProps = ComponentProps<typeof Textarea>;

export const PromptInputTextarea = ({
  onChange,
  className,
  placeholder = "What would you like to know?",
  ...props
}: PromptInputTextareaProps) => {
  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {
    if (e.key === "Enter") {
      // Don't submit if IME composition is in progress
      if (e.nativeEvent.isComposing) {
        return;
      }

      if (e.shiftKey) {
        // Allow newline
        return;
      }

      // Submit on Enter (without Shift)
      e.preventDefault();
      const form = e.currentTarget.form;
      if (form) {
        form.requestSubmit();
      }
    }
  };

  return (
    <Textarea
      className={cn(
        "w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0",
        "field-sizing-content bg-transparent dark:bg-transparent",
        "max-h-48 min-h-16",
        "focus-visible:ring-0",
        className
      )}
      name="message"
      onChange={(e) => {
        onChange?.(e);
      }}
      onKeyDown={handleKeyDown}
      placeholder={placeholder}
      {...props}
    />
  );
};

export type PromptInputToolbarProps = HTMLAttributes<HTMLDivElement>;

export const PromptInputToolbar = ({
  className,
  ...props
}: PromptInputToolbarProps) => (
  <div
    className={cn("flex items-center justify-between p-1", className)}
    {...props}
  />
);

export type PromptInputToolsProps = HTMLAttributes<HTMLDivElement>;

export const PromptInputTools = ({
  className,
  ...props
}: PromptInputToolsProps) => (
  <div
    className={cn(
      "flex items-center gap-1",
      "[&_button:first-child]:rounded-bl-xl",
      className
    )}
    {...props}
  />
);

export type PromptInputButtonProps = ComponentProps<typeof Button>;

export const PromptInputButton = ({
  variant = "ghost",
  className,
  size,
  ...props
}: PromptInputButtonProps) => {
  const newSize =
    (size ?? Children.count(props.children) > 1) ? "default" : "icon";

  return (
    <Button
      className={cn(
        "shrink-0 gap-1.5 rounded-lg",
        variant === "ghost" && "text-muted-foreground",
        newSize === "default" && "px-3",
        className
      )}
      size={newSize}
      type="button"
      variant={variant}
      {...props}
    />
  );
};

export type PromptInputActionMenuProps = ComponentProps<typeof DropdownMenu>;
export const PromptInputActionMenu = (props: PromptInputActionMenuProps) => (
  <DropdownMenu {...props} />
);

export type PromptInputActionMenuTriggerProps = ComponentProps<
  typeof Button
> & {};
export const PromptInputActionMenuTrigger = ({
  className,
  children,
  ...props
}: PromptInputActionMenuTriggerProps) => (
  <DropdownMenuTrigger asChild>
    <PromptInputButton className={className} {...props}>
      {children ?? <PlusIcon className="size-4" />}
    </PromptInputButton>
  </DropdownMenuTrigger>
);

export type PromptInputActionMenuContentProps = ComponentProps<
  typeof DropdownMenuContent
>;
export const PromptInputActionMenuContent = ({
  className,
  ...props
}: PromptInputActionMenuContentProps) => (
  <DropdownMenuContent align="start" className={cn(className)} {...props} />
);

export type PromptInputActionMenuItemProps = ComponentProps<
  typeof DropdownMenuItem
>;
export const PromptInputActionMenuItem = ({
  className,
  ...props
}: PromptInputActionMenuItemProps) => (
  <DropdownMenuItem className={cn(className)} {...props} />
);

// Note: Actions that perform side-effects (like opening a file dialog)
// are provided in opt-in modules (e.g., prompt-input-attachments).

export type PromptInputSubmitProps = ComponentProps<typeof Button> & {
  status?: ChatStatus;
};

export const PromptInputSubmit = ({
  className,
  variant = "default",
  size = "icon",
  status,
  children,
  ...props
}: PromptInputSubmitProps) => {
  let Icon = <SendIcon className="size-4" />;

  if (status === "submitted") {
    Icon = <Loader2Icon className="size-4 animate-spin" />;
  } else if (status === "streaming") {
    Icon = <SquareIcon className="size-4" />;
  } else if (status === "error") {
    Icon = <XIcon className="size-4" />;
  }

  return (
    <Button
      className={cn("gap-1.5 rounded-lg", className)}
      size={size}
      type="submit"
      variant={variant}
      {...props}
    >
      {children ?? Icon}
    </Button>
  );
};

export type PromptInputModelSelectProps = ComponentProps<typeof Select>;

export const PromptInputModelSelect = (props: PromptInputModelSelectProps) => (
  <Select {...props} />
);

export type PromptInputModelSelectTriggerProps = ComponentProps<
  typeof SelectTrigger
>;

export const PromptInputModelSelectTrigger = ({
  className,
  ...props
}: PromptInputModelSelectTriggerProps) => (
  <SelectTrigger
    className={cn(
      "border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors",
      'hover:bg-accent hover:text-foreground [&[aria-expanded="true"]]:bg-accent [&[aria-expanded="true"]]:text-foreground',
      className
    )}
    {...props}
  />
);

export type PromptInputModelSelectContentProps = ComponentProps<
  typeof SelectContent
>;

export const PromptInputModelSelectContent = ({
  className,
  ...props
}: PromptInputModelSelectContentProps) => (
  <SelectContent className={cn(className)} {...props} />
);

export type PromptInputModelSelectItemProps = ComponentProps<typeof SelectItem>;

export const PromptInputModelSelectItem = ({
  className,
  ...props
}: PromptInputModelSelectItemProps) => (
  <SelectItem className={cn(className)} {...props} />
);

export type PromptInputModelSelectValueProps = ComponentProps<
  typeof SelectValue
>;

export const PromptInputModelSelectValue = ({
  className,
  ...props
}: PromptInputModelSelectValueProps) => (
  <SelectValue className={cn(className)} {...props} />
);
</file>

<file path="packages/elements/src/reasoning.tsx">
"use client";

import { useControllableState } from "@radix-ui/react-use-controllable-state";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@repo/shadcn-ui/components/ui/collapsible";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { BrainIcon, ChevronDownIcon } from "lucide-react";
import type { ComponentProps } from "react";
import { createContext, memo, useContext, useEffect, useState } from "react";
import { Response } from "./response";

type ReasoningContextValue = {
  isStreaming: boolean;
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
  duration: number;
};

const ReasoningContext = createContext<ReasoningContextValue | null>(null);

const useReasoning = () => {
  const context = useContext(ReasoningContext);
  if (!context) {
    throw new Error("Reasoning components must be used within Reasoning");
  }
  return context;
};

export type ReasoningProps = ComponentProps<typeof Collapsible> & {
  isStreaming?: boolean;
  open?: boolean;
  defaultOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
  duration?: number;
};

const AUTO_CLOSE_DELAY = 1000;
const MS_IN_S = 1000;

export const Reasoning = memo(
  ({
    className,
    isStreaming = false,
    open,
    defaultOpen = true,
    onOpenChange,
    duration: durationProp,
    children,
    ...props
  }: ReasoningProps) => {
    const [isOpen, setIsOpen] = useControllableState({
      prop: open,
      defaultProp: defaultOpen,
      onChange: onOpenChange,
    });
    const [duration, setDuration] = useControllableState({
      prop: durationProp,
      defaultProp: 0,
    });

    const [hasAutoClosed, setHasAutoClosed] = useState(false);
    const [startTime, setStartTime] = useState<number | null>(null);

    // Track duration when streaming starts and ends
    useEffect(() => {
      if (isStreaming) {
        if (startTime === null) {
          setStartTime(Date.now());
        }
      } else if (startTime !== null) {
        setDuration(Math.ceil((Date.now() - startTime) / MS_IN_S));
        setStartTime(null);
      }
    }, [isStreaming, startTime, setDuration]);

    // Auto-open when streaming starts, auto-close when streaming ends (once only)
    useEffect(() => {
      if (defaultOpen && !isStreaming && isOpen && !hasAutoClosed) {
        // Add a small delay before closing to allow user to see the content
        const timer = setTimeout(() => {
          setIsOpen(false);
          setHasAutoClosed(true);
        }, AUTO_CLOSE_DELAY);

        return () => clearTimeout(timer);
      }
    }, [isStreaming, isOpen, defaultOpen, setIsOpen, hasAutoClosed]);

    const handleOpenChange = (newOpen: boolean) => {
      setIsOpen(newOpen);
    };

    return (
      <ReasoningContext.Provider
        value={{ isStreaming, isOpen, setIsOpen, duration }}
      >
        <Collapsible
          className={cn("not-prose mb-4", className)}
          onOpenChange={handleOpenChange}
          open={isOpen}
          {...props}
        >
          {children}
        </Collapsible>
      </ReasoningContext.Provider>
    );
  }
);

export type ReasoningTriggerProps = ComponentProps<typeof CollapsibleTrigger>;

const getThinkingMessage = (isStreaming: boolean, duration?: number) => {
  if (isStreaming || duration === 0) {
    return <p>Thinking...</p>;
  }
  if (duration === undefined) {
    return <p>Thought for a few seconds</p>;
  }
  return <p>Thought for {duration} seconds</p>;
};

export const ReasoningTrigger = memo(
  ({ className, children, ...props }: ReasoningTriggerProps) => {
    const { isStreaming, isOpen, duration } = useReasoning();

    return (
      <CollapsibleTrigger
        className={cn(
          "flex w-full items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground",
          className
        )}
        {...props}
      >
        {children ?? (
          <>
            <BrainIcon className="size-4" />
            {getThinkingMessage(isStreaming, duration)}
            <ChevronDownIcon
              className={cn(
                "size-4 transition-transform",
                isOpen ? "rotate-180" : "rotate-0"
              )}
            />
          </>
        )}
      </CollapsibleTrigger>
    );
  }
);

export type ReasoningContentProps = ComponentProps<
  typeof CollapsibleContent
> & {
  children: string;
};

export const ReasoningContent = memo(
  ({ className, children, ...props }: ReasoningContentProps) => (
    <CollapsibleContent
      className={cn(
        "mt-4 text-sm",
        "data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-muted-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in",
        className
      )}
      {...props}
    >
      <Response className="grid gap-2">{children}</Response>
    </CollapsibleContent>
  )
);

Reasoning.displayName = "Reasoning";
ReasoningTrigger.displayName = "ReasoningTrigger";
ReasoningContent.displayName = "ReasoningContent";
</file>

<file path="packages/elements/src/response.tsx">
"use client";

import { cn } from "@repo/shadcn-ui/lib/utils";
import { type ComponentProps, memo } from "react";
import { Streamdown } from "streamdown";

type ResponseProps = ComponentProps<typeof Streamdown>;

export const Response = memo(
  ({ className, ...props }: ResponseProps) => (
    <Streamdown
      className={cn(
        "size-full [&>*:first-child]:mt-0 [&>*:last-child]:mb-0",
        className
      )}
      {...props}
    />
  ),
  (prevProps, nextProps) => prevProps.children === nextProps.children
);

Response.displayName = "Response";
</file>

<file path="packages/elements/src/sources.tsx">
"use client";

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@repo/shadcn-ui/components/ui/collapsible";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { BookIcon, ChevronDownIcon } from "lucide-react";
import type { ComponentProps } from "react";

export type SourcesProps = ComponentProps<"div">;

export const Sources = ({ className, ...props }: SourcesProps) => (
  <Collapsible
    className={cn("not-prose mb-4 text-primary text-xs", className)}
    {...props}
  />
);

export type SourcesTriggerProps = ComponentProps<typeof CollapsibleTrigger> & {
  count: number;
};

export const SourcesTrigger = ({
  className,
  count,
  children,
  ...props
}: SourcesTriggerProps) => (
  <CollapsibleTrigger
    className={cn("flex items-center gap-2", className)}
    {...props}
  >
    {children ?? (
      <>
        <p className="font-medium">Used {count} sources</p>
        <ChevronDownIcon className="h-4 w-4" />
      </>
    )}
  </CollapsibleTrigger>
);

export type SourcesContentProps = ComponentProps<typeof CollapsibleContent>;

export const SourcesContent = ({
  className,
  ...props
}: SourcesContentProps) => (
  <CollapsibleContent
    className={cn(
      "mt-3 flex w-fit flex-col gap-2",
      "data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 outline-none data-[state=closed]:animate-out data-[state=open]:animate-in",
      className
    )}
    {...props}
  />
);

export type SourceProps = ComponentProps<"a">;

export const Source = ({ href, title, children, ...props }: SourceProps) => (
  <a
    className="flex items-center gap-2"
    href={href}
    rel="noreferrer"
    target="_blank"
    {...props}
  >
    {children ?? (
      <>
        <BookIcon className="h-4 w-4" />
        <span className="block font-medium">{title}</span>
      </>
    )}
  </a>
);
</file>

<file path="packages/elements/src/suggestion.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import {
  ScrollArea,
  ScrollBar,
} from "@repo/shadcn-ui/components/ui/scroll-area";
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { ComponentProps } from "react";

export type SuggestionsProps = ComponentProps<typeof ScrollArea>;

export const Suggestions = ({
  className,
  children,
  ...props
}: SuggestionsProps) => (
  <ScrollArea className="w-full overflow-x-auto whitespace-nowrap" {...props}>
    <div className={cn("flex w-max flex-nowrap items-center gap-2", className)}>
      {children}
    </div>
    <ScrollBar className="hidden" orientation="horizontal" />
  </ScrollArea>
);

export type SuggestionProps = Omit<ComponentProps<typeof Button>, "onClick"> & {
  suggestion: string;
  onClick?: (suggestion: string) => void;
};

export const Suggestion = ({
  suggestion,
  onClick,
  className,
  variant = "outline",
  size = "sm",
  children,
  ...props
}: SuggestionProps) => {
  const handleClick = () => {
    onClick?.(suggestion);
  };

  return (
    <Button
      className={cn("cursor-pointer rounded-full px-4", className)}
      onClick={handleClick}
      size={size}
      type="button"
      variant={variant}
      {...props}
    >
      {children || suggestion}
    </Button>
  );
};
</file>

<file path="packages/elements/src/task.tsx">
"use client";

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@repo/shadcn-ui/components/ui/collapsible";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { ChevronDownIcon, SearchIcon } from "lucide-react";
import type { ComponentProps } from "react";

export type TaskItemFileProps = ComponentProps<"div">;

export const TaskItemFile = ({
  children,
  className,
  ...props
}: TaskItemFileProps) => (
  <div
    className={cn(
      "inline-flex items-center gap-1 rounded-md border bg-secondary px-1.5 py-0.5 text-foreground text-xs",
      className
    )}
    {...props}
  >
    {children}
  </div>
);

export type TaskItemProps = ComponentProps<"div">;

export const TaskItem = ({ children, className, ...props }: TaskItemProps) => (
  <div className={cn("text-muted-foreground text-sm", className)} {...props}>
    {children}
  </div>
);

export type TaskProps = ComponentProps<typeof Collapsible>;

export const Task = ({
  defaultOpen = true,
  className,
  ...props
}: TaskProps) => (
  <Collapsible
    className={cn(
      "data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 data-[state=closed]:animate-out data-[state=open]:animate-in",
      className
    )}
    defaultOpen={defaultOpen}
    {...props}
  />
);

export type TaskTriggerProps = ComponentProps<typeof CollapsibleTrigger> & {
  title: string;
};

export const TaskTrigger = ({
  children,
  className,
  title,
  ...props
}: TaskTriggerProps) => (
  <CollapsibleTrigger asChild className={cn("group", className)} {...props}>
    {children ?? (
      <div className="flex w-full cursor-pointer items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground">
        <SearchIcon className="size-4" />
        <p className="text-sm">{title}</p>
        <ChevronDownIcon className="size-4 transition-transform group-data-[state=open]:rotate-180" />
      </div>
    )}
  </CollapsibleTrigger>
);

export type TaskContentProps = ComponentProps<typeof CollapsibleContent>;

export const TaskContent = ({
  children,
  className,
  ...props
}: TaskContentProps) => (
  <CollapsibleContent
    className={cn(
      "data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in",
      className
    )}
    {...props}
  >
    <div className="mt-4 space-y-2 border-muted border-l-2 pl-4">
      {children}
    </div>
  </CollapsibleContent>
);
</file>

<file path="packages/elements/src/tool.tsx">
"use client";

import { Badge } from "@repo/shadcn-ui/components/ui/badge";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@repo/shadcn-ui/components/ui/collapsible";
import { cn } from "@repo/shadcn-ui/lib/utils";
import type { ToolUIPart } from "ai";
import {
  CheckCircleIcon,
  ChevronDownIcon,
  CircleIcon,
  ClockIcon,
  WrenchIcon,
  XCircleIcon,
} from "lucide-react";
import type { ComponentProps, ReactNode } from "react";
import { CodeBlock } from "./code-block";

export type ToolProps = ComponentProps<typeof Collapsible>;

export const Tool = ({ className, ...props }: ToolProps) => (
  <Collapsible
    className={cn("not-prose mb-4 w-full rounded-md border", className)}
    {...props}
  />
);

export type ToolHeaderProps = {
  type: ToolUIPart["type"];
  state: ToolUIPart["state"];
  className?: string;
};

const getStatusBadge = (status: ToolUIPart["state"]) => {
  const labels = {
    "input-streaming": "Pending",
    "input-available": "Running",
    "output-available": "Completed",
    "output-error": "Error",
  } as const;

  const icons = {
    "input-streaming": <CircleIcon className="size-4" />,
    "input-available": <ClockIcon className="size-4 animate-pulse" />,
    "output-available": <CheckCircleIcon className="size-4 text-green-600" />,
    "output-error": <XCircleIcon className="size-4 text-red-600" />,
  } as const;

  return (
    <Badge className="gap-1.5 rounded-full text-xs" variant="secondary">
      {icons[status]}
      {labels[status]}
    </Badge>
  );
};

export const ToolHeader = ({
  className,
  type,
  state,
  ...props
}: ToolHeaderProps) => (
  <CollapsibleTrigger
    className={cn(
      "flex w-full items-center justify-between gap-4 p-3",
      className
    )}
    {...props}
  >
    <div className="flex items-center gap-2">
      <WrenchIcon className="size-4 text-muted-foreground" />
      <span className="font-medium text-sm">{type}</span>
      {getStatusBadge(state)}
    </div>
    <ChevronDownIcon className="size-4 text-muted-foreground transition-transform group-data-[state=open]:rotate-180" />
  </CollapsibleTrigger>
);

export type ToolContentProps = ComponentProps<typeof CollapsibleContent>;

export const ToolContent = ({ className, ...props }: ToolContentProps) => (
  <CollapsibleContent
    className={cn(
      "data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in",
      className
    )}
    {...props}
  />
);

export type ToolInputProps = ComponentProps<"div"> & {
  input: ToolUIPart["input"];
};

export const ToolInput = ({ className, input, ...props }: ToolInputProps) => (
  <div className={cn("space-y-2 overflow-hidden p-4", className)} {...props}>
    <h4 className="font-medium text-muted-foreground text-xs uppercase tracking-wide">
      Parameters
    </h4>
    <div className="rounded-md bg-muted/50">
      <CodeBlock code={JSON.stringify(input, null, 2)} language="json" />
    </div>
  </div>
);

export type ToolOutputProps = ComponentProps<"div"> & {
  output: ToolUIPart["output"];
  errorText: ToolUIPart["errorText"];
};

export const ToolOutput = ({
  className,
  output,
  errorText,
  ...props
}: ToolOutputProps) => {
  if (!(output || errorText)) {
    return null;
  }

  let Output = <div>{output as ReactNode}</div>;

  if (typeof output === "object") {
    Output = (
      <CodeBlock code={JSON.stringify(output, null, 2)} language="json" />
    );
  } else if (typeof output === "string") {
    Output = <CodeBlock code={output} language="json" />;
  }

  return (
    <div className={cn("space-y-2 p-4", className)} {...props}>
      <h4 className="font-medium text-muted-foreground text-xs uppercase tracking-wide">
        {errorText ? "Error" : "Result"}
      </h4>
      <div
        className={cn(
          "overflow-x-auto rounded-md text-xs [&_table]:w-full",
          errorText
            ? "bg-destructive/10 text-destructive"
            : "bg-muted/50 text-foreground"
        )}
      >
        {errorText && <div>{errorText}</div>}
        {Output}
      </div>
    </div>
  );
};
</file>

<file path="packages/elements/src/web-preview.tsx">
"use client";

import { Button } from "@repo/shadcn-ui/components/ui/button";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@repo/shadcn-ui/components/ui/collapsible";
import { Input } from "@repo/shadcn-ui/components/ui/input";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@repo/shadcn-ui/components/ui/tooltip";
import { cn } from "@repo/shadcn-ui/lib/utils";
import { ChevronDownIcon } from "lucide-react";
import type { ComponentProps, ReactNode } from "react";
import { createContext, useContext, useState } from "react";

export type WebPreviewContextValue = {
  url: string;
  setUrl: (url: string) => void;
  consoleOpen: boolean;
  setConsoleOpen: (open: boolean) => void;
};

const WebPreviewContext = createContext<WebPreviewContextValue | null>(null);

const useWebPreview = () => {
  const context = useContext(WebPreviewContext);
  if (!context) {
    throw new Error("WebPreview components must be used within a WebPreview");
  }
  return context;
};

export type WebPreviewProps = ComponentProps<"div"> & {
  defaultUrl?: string;
  onUrlChange?: (url: string) => void;
};

export const WebPreview = ({
  className,
  children,
  defaultUrl = "",
  onUrlChange,
  ...props
}: WebPreviewProps) => {
  const [url, setUrl] = useState(defaultUrl);
  const [consoleOpen, setConsoleOpen] = useState(false);

  const handleUrlChange = (newUrl: string) => {
    setUrl(newUrl);
    onUrlChange?.(newUrl);
  };

  const contextValue: WebPreviewContextValue = {
    url,
    setUrl: handleUrlChange,
    consoleOpen,
    setConsoleOpen,
  };

  return (
    <WebPreviewContext.Provider value={contextValue}>
      <div
        className={cn(
          "flex size-full flex-col rounded-lg border bg-card",
          className
        )}
        {...props}
      >
        {children}
      </div>
    </WebPreviewContext.Provider>
  );
};

export type WebPreviewNavigationProps = ComponentProps<"div">;

export const WebPreviewNavigation = ({
  className,
  children,
  ...props
}: WebPreviewNavigationProps) => (
  <div
    className={cn("flex items-center gap-1 border-b p-2", className)}
    {...props}
  >
    {children}
  </div>
);

export type WebPreviewNavigationButtonProps = ComponentProps<typeof Button> & {
  tooltip?: string;
};

export const WebPreviewNavigationButton = ({
  onClick,
  disabled,
  tooltip,
  children,
  ...props
}: WebPreviewNavigationButtonProps) => (
  <TooltipProvider>
    <Tooltip>
      <TooltipTrigger asChild>
        <Button
          className="h-8 w-8 p-0 hover:text-foreground"
          disabled={disabled}
          onClick={onClick}
          size="sm"
          variant="ghost"
          {...props}
        >
          {children}
        </Button>
      </TooltipTrigger>
      <TooltipContent>
        <p>{tooltip}</p>
      </TooltipContent>
    </Tooltip>
  </TooltipProvider>
);

export type WebPreviewUrlProps = ComponentProps<typeof Input>;

export const WebPreviewUrl = ({
  value,
  onChange,
  onKeyDown,
  ...props
}: WebPreviewUrlProps) => {
  const { url, setUrl } = useWebPreview();

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      const target = event.target as HTMLInputElement;
      setUrl(target.value);
    }
    onKeyDown?.(event);
  };

  return (
    <Input
      className="h-8 flex-1 text-sm"
      onChange={onChange}
      onKeyDown={handleKeyDown}
      placeholder="Enter URL..."
      value={value ?? url}
      {...props}
    />
  );
};

export type WebPreviewBodyProps = ComponentProps<"iframe"> & {
  loading?: ReactNode;
};

export const WebPreviewBody = ({
  className,
  loading,
  src,
  ...props
}: WebPreviewBodyProps) => {
  const { url } = useWebPreview();

  return (
    <div className="flex-1">
      <iframe
        className={cn("size-full", className)}
        sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-presentation"
        src={(src ?? url) || undefined}
        title="Preview"
        {...props}
      />
      {loading}
    </div>
  );
};

export type WebPreviewConsoleProps = ComponentProps<"div"> & {
  logs?: Array<{
    level: "log" | "warn" | "error";
    message: string;
    timestamp: Date;
  }>;
};

export const WebPreviewConsole = ({
  className,
  logs = [],
  children,
  ...props
}: WebPreviewConsoleProps) => {
  const { consoleOpen, setConsoleOpen } = useWebPreview();

  return (
    <Collapsible
      className={cn("border-t bg-muted/50 font-mono text-sm", className)}
      onOpenChange={setConsoleOpen}
      open={consoleOpen}
      {...props}
    >
      <CollapsibleTrigger asChild>
        <Button
          className="flex w-full items-center justify-between p-4 text-left font-medium hover:bg-muted/50"
          variant="ghost"
        >
          Console
          <ChevronDownIcon
            className={cn(
              "h-4 w-4 transition-transform duration-200",
              consoleOpen && "rotate-180"
            )}
          />
        </Button>
      </CollapsibleTrigger>
      <CollapsibleContent
        className={cn(
          "px-4 pb-4",
          "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 outline-none data-[state=closed]:animate-out data-[state=open]:animate-in"
        )}
      >
        <div className="max-h-48 space-y-1 overflow-y-auto">
          {logs.length === 0 ? (
            <p className="text-muted-foreground">No console output</p>
          ) : (
            logs.map((log, index) => (
              <div
                className={cn(
                  "text-xs",
                  log.level === "error" && "text-destructive",
                  log.level === "warn" && "text-yellow-600",
                  log.level === "log" && "text-foreground"
                )}
                key={`${log.timestamp.getTime()}-${index}`}
              >
                <span className="text-muted-foreground">
                  {log.timestamp.toLocaleTimeString()}
                </span>{" "}
                {log.message}
              </div>
            ))
          )}
          {children}
        </div>
      </CollapsibleContent>
    </Collapsible>
  );
};
</file>

<file path="packages/elements/package.json">
{
  "name": "@repo/elements",
  "description": "AI components including message, conversation, input, response, suggestion, sources, context, tool and branch components for building chat interfaces.",
  "version": "0.0.0",
  "private": true,
  "exports": {
    "./*": "./src/*.tsx"
  },
  "dependencies": {
    "@radix-ui/react-use-controllable-state": "^1.2.2",
    "@repo/shadcn-ui": "workspace:*",
    "ai": "5.0.37",
    "class-variance-authority": "^0.7.1",
    "lucide-react": "^0.542.0",
    "nanoid": "^5.1.5",
    "react": "19.1.1",
    "react-syntax-highlighter": "^15.6.6",
    "streamdown": "^1.2.0",
    "tokenlens": "^1.1.2",
    "use-stick-to-bottom": "^1.1.1"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/react": "19.1.12",
    "@types/react-syntax-highlighter": "^15.5.13",
    "typescript": "^5.9.2"
  }
}
</file>

<file path="packages/elements/tsconfig.json">
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@repo/*": ["../*"],
      "@/components/*": ["../shadcn-ui/components/*"],
      "@/lib/*": ["../shadcn-ui/lib/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/examples/src/actions-hover.tsx">
"use client";

import { Action, Actions } from "@repo/elements/actions";
import { Message, MessageContent } from "@repo/elements/message";
import {
  CopyIcon,
  HeartIcon,
  RefreshCcwIcon,
  ShareIcon,
  ThumbsDownIcon,
  ThumbsUpIcon,
} from "lucide-react";
import { useState } from "react";

const Example = () => {
  const [liked, setLiked] = useState(false);
  const [disliked, setDisliked] = useState(false);
  const [favorited, setFavorited] = useState(false);

  const responseContent = `This is a response from an assistant.
  
Try hovering over this message to see the actions appear!`;

  const handleRetry = () => {
    console.log("Retrying request...");
  };

  const handleCopy = (content?: string) => {
    console.log("Copied:", content);
  };

  const handleShare = (content?: string) => {
    console.log("Sharing:", content);
  };

  const actions = [
    {
      icon: RefreshCcwIcon,
      label: "Retry",
      onClick: handleRetry,
    },
    {
      icon: ThumbsUpIcon,
      label: "Like",
      onClick: () => setLiked(!liked),
    },

    {
      icon: ThumbsDownIcon,
      label: "Dislike",
      onClick: () => setDisliked(!disliked),
    },
    {
      icon: CopyIcon,
      label: "Copy",
      onClick: () => handleCopy(responseContent),
    },
    {
      icon: ShareIcon,
      label: "Share",
      onClick: () => handleShare(responseContent),
    },
    {
      icon: HeartIcon,
      label: "Favorite",
      onClick: () => setFavorited(!favorited),
    },
  ];

  return (
    <Message className="group flex flex-col items-start gap-2" from="assistant">
      <MessageContent>{responseContent}</MessageContent>
      <Actions className="mt-2 opacity-0 group-hover:opacity-100">
        {actions.map((action) => (
          <Action key={action.label} label={action.label}>
            <action.icon className="size-3" />
          </Action>
        ))}
      </Actions>
    </Message>
  );
};

export default Example;
</file>

<file path="packages/examples/src/actions.tsx">
"use client";

import { Action, Actions } from "@repo/elements/actions";
import { Conversation, ConversationContent } from "@repo/elements/conversation";
import { Message, MessageContent } from "@repo/elements/message";
import {
  CopyIcon,
  RefreshCcwIcon,
  ShareIcon,
  ThumbsDownIcon,
  ThumbsUpIcon,
} from "lucide-react";
import { nanoid } from "nanoid";
import { useState } from "react";

const messages: {
  key: string;
  from: "user" | "assistant";
  content: string;
  avatar: string;
  name: string;
}[] = [
  {
    key: nanoid(),
    from: "user",
    content: "Hello, how are you?",
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
  {
    key: nanoid(),
    from: "assistant",
    content: "I am fine, thank you!",
    avatar: "https://github.com/openai.png",
    name: "OpenAI",
  },
];

const Example = () => {
  const [liked, setLiked] = useState(false);
  const [disliked, setDisliked] = useState(false);
  const [favorited, setFavorited] = useState(false);

  const handleRetry = () => {};

  const handleCopy = () => {};

  const handleShare = () => {};

  const actions = [
    {
      icon: RefreshCcwIcon,
      label: "Retry",
      onClick: handleRetry,
    },
    {
      icon: ThumbsUpIcon,
      label: "Like",
      onClick: () => setLiked(!liked),
    },

    {
      icon: ThumbsDownIcon,
      label: "Dislike",
      onClick: () => setDisliked(!disliked),
    },
    {
      icon: CopyIcon,
      label: "Copy",
      onClick: () => handleCopy(),
    },
    {
      icon: ShareIcon,
      label: "Share",
      onClick: () => handleShare(),
    },
  ];

  return (
    <Conversation className="relative w-full">
      <ConversationContent>
        {messages.map((message) => (
          <Message
            className={`flex flex-col gap-2 ${message.from === "assistant" ? "items-start" : "items-end"}`}
            from={message.from}
            key={message.key}
          >
            <MessageContent>{message.content}</MessageContent>
            {message.from === "assistant" && (
              <Actions className="mt-2">
                {actions.map((action) => (
                  <Action key={action.label} label={action.label}>
                    <action.icon className="size-4" />
                  </Action>
                ))}
              </Actions>
            )}
          </Message>
        ))}
      </ConversationContent>
    </Conversation>
  );
};

export default Example;
</file>

<file path="packages/examples/src/artifact.tsx">
"use client";

import {
  Artifact,
  ArtifactAction,
  ArtifactActions,
  ArtifactContent,
  ArtifactDescription,
  ArtifactHeader,
  ArtifactTitle,
} from "@repo/elements/artifact";
import { CodeBlock } from "@repo/elements/code-block";
import {
  CopyIcon,
  DownloadIcon,
  PlayIcon,
  RefreshCwIcon,
  ShareIcon,
} from "lucide-react";

const code = `# Dijkstra's Algorithm implementation
import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    heap = [(0, start)]
    visited = set()
    
    while heap:
        current_distance, current_node = heapq.heappop(heap)
        if current_node in visited:
            continue
        visited.add(current_node)
        
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(heap, (distance, neighbor))
    
    return distances

# Example graph
 graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

print(dijkstra(graph, 'A'))`;

const Example = () => (
  <Artifact>
    <ArtifactHeader>
      <div>
        <ArtifactTitle>Dijkstra's Algorithm Implementation</ArtifactTitle>
        <ArtifactDescription>Updated 1 minute ago</ArtifactDescription>
      </div>
      <div className="flex items-center gap-2">
        <ArtifactActions>
          <ArtifactAction
            icon={PlayIcon}
            label="Run"
            onClick={() => console.log("Run")}
            tooltip="Run code"
          />
          <ArtifactAction
            icon={CopyIcon}
            label="Copy"
            onClick={() => console.log("Copy")}
            tooltip="Copy to clipboard"
          />
          <ArtifactAction
            icon={RefreshCwIcon}
            label="Regenerate"
            onClick={() => console.log("Regenerate")}
            tooltip="Regenerate content"
          />
          <ArtifactAction
            icon={DownloadIcon}
            label="Download"
            onClick={() => console.log("Download")}
            tooltip="Download file"
          />
          <ArtifactAction
            icon={ShareIcon}
            label="Share"
            onClick={() => console.log("Share")}
            tooltip="Share artifact"
          />
        </ArtifactActions>
      </div>
    </ArtifactHeader>
    <ArtifactContent className="p-0">
      <CodeBlock
        className="border-none"
        code={code}
        language="python"
        showLineNumbers
      />
    </ArtifactContent>
  </Artifact>
);

export default Example;
</file>

<file path="packages/examples/src/branch.tsx">
"use client";

import {
  Branch,
  BranchMessages,
  BranchNext,
  BranchPage,
  BranchPrevious,
  BranchSelector,
} from "@repo/elements/branch";
import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import { nanoid } from "nanoid";

const userMessages = [
  {
    id: nanoid(),
    content: "What are the key strategies for optimizing React performance?",
  },
  {
    id: nanoid(),
    content: "How can I improve the performance of my React application?",
  },
  {
    id: nanoid(),
    content: "What performance optimization techniques should I use in React?",
  },
];

const assistantMessages = [
  {
    id: nanoid(),
    content:
      "Here's the first response to your question. This approach focuses on performance optimization.",
  },
  {
    id: nanoid(),
    content:
      "Here's an alternative response. This approach emphasizes code readability and maintainability over pure performance.",
  },
  {
    id: nanoid(),
    content:
      "And here's a third option. This balanced approach considers both performance and maintainability, making it suitable for most use cases.",
  },
];

const Example = () => {
  const handleBranchChange = (branchIndex: number) => {
    console.log("Branch changed to:", branchIndex);
  };

  return (
    <div style={{ height: "300px" }}>
      <Branch defaultBranch={0} onBranchChange={handleBranchChange}>
        <BranchMessages>
          {userMessages.map((message) => (
            <Message from="user" key={message.id}>
              <MessageContent>{message.content}</MessageContent>
              <MessageAvatar
                name="Hayden Bleasel"
                src="https://github.com/haydenbleasel.png"
              />
            </Message>
          ))}
        </BranchMessages>
        <BranchSelector from="user">
          <BranchPrevious />
          <BranchPage />
          <BranchNext />
        </BranchSelector>
      </Branch>

      <Branch defaultBranch={0} onBranchChange={handleBranchChange}>
        <BranchMessages>
          {assistantMessages.map((message) => (
            <Message from="assistant" key={message.id}>
              <MessageContent>{message.content}</MessageContent>
              <MessageAvatar name="AI" src="https://github.com/openai.png" />
            </Message>
          ))}
        </BranchMessages>
        <BranchSelector from="assistant">
          <BranchPrevious />
          <BranchPage />
          <BranchNext />
        </BranchSelector>
      </Branch>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/chain-of-thought.tsx">
import {
  ChainOfThought,
  ChainOfThoughtContent,
  ChainOfThoughtHeader,
  ChainOfThoughtImage,
  ChainOfThoughtSearchResult,
  ChainOfThoughtSearchResults,
  ChainOfThoughtStep,
} from "@repo/elements/chain-of-thought";
import { Image } from "@repo/elements/image";
import { ImageIcon, SearchIcon } from "lucide-react";

const exampleImage = {
  base64:
    "",
  mediaType: "image/jpeg",
  uint8Array: new Uint8Array([]),
};

const ChainOfThoughtExample = () => (
  <ChainOfThought defaultOpen>
    <ChainOfThoughtHeader />
    <ChainOfThoughtContent>
      <ChainOfThoughtStep
        icon={SearchIcon}
        label="Searching for profiles for Hayden Bleasel"
        status="complete"
      >
        <ChainOfThoughtSearchResults>
          {[
            "https://www.x.com",
            "https://www.instagram.com",
            "https://www.github.com",
          ].map((website) => (
            <ChainOfThoughtSearchResult key={website}>
              {new URL(website).hostname}
            </ChainOfThoughtSearchResult>
          ))}
        </ChainOfThoughtSearchResults>
      </ChainOfThoughtStep>

      <ChainOfThoughtStep
        icon={ImageIcon}
        label="Found the profile photo for Hayden Bleasel"
        status="complete"
      >
        <ChainOfThoughtImage caption="Hayden Bleasel's profile photo from x.com, showing a Ghibli-style man.">
          <Image
            {...exampleImage}
            alt="Example generated image"
            className="aspect-square h-[150px] border"
          />
        </ChainOfThoughtImage>
      </ChainOfThoughtStep>

      <ChainOfThoughtStep
        label="Hayden Bleasel is an Australian product designer, software engineer, and founder. He is currently based in the United States working for Vercel, an American cloud application company."
        status="complete"
      />

      <ChainOfThoughtStep
        icon={SearchIcon}
        label="Searching for recent work..."
        status="active"
      >
        <ChainOfThoughtSearchResults>
          {["https://www.github.com", "https://www.dribbble.com"].map(
            (website) => (
              <ChainOfThoughtSearchResult key={website}>
                {new URL(website).hostname}
              </ChainOfThoughtSearchResult>
            )
          )}
        </ChainOfThoughtSearchResults>
      </ChainOfThoughtStep>
    </ChainOfThoughtContent>
  </ChainOfThought>
);

export default ChainOfThoughtExample;
</file>

<file path="packages/examples/src/chatbot.tsx">
"use client";

import {
  Branch,
  BranchMessages,
  BranchNext,
  BranchPage,
  BranchPrevious,
  BranchSelector,
} from "@repo/elements/branch";
import {
  Conversation,
  ConversationContent,
  ConversationScrollButton,
} from "@repo/elements/conversation";
import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import {
  PromptInput,
  PromptInputActionAddAttachments,
  PromptInputActionMenu,
  PromptInputActionMenuContent,
  PromptInputActionMenuTrigger,
  PromptInputAttachment,
  PromptInputAttachments,
  PromptInputBody,
  PromptInputButton,
  type PromptInputMessage,
  PromptInputModelSelect,
  PromptInputModelSelectContent,
  PromptInputModelSelectItem,
  PromptInputModelSelectTrigger,
  PromptInputModelSelectValue,
  PromptInputSubmit,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
} from "@repo/elements/prompt-input";
import {
  Reasoning,
  ReasoningContent,
  ReasoningTrigger,
} from "@repo/elements/reasoning";
import { Response } from "@repo/elements/response";
import {
  Source,
  Sources,
  SourcesContent,
  SourcesTrigger,
} from "@repo/elements/sources";
import { Suggestion, Suggestions } from "@repo/elements/suggestion";
import type { ToolUIPart } from "ai";
import { GlobeIcon, MicIcon } from "lucide-react";
import { nanoid } from "nanoid";
import { useCallback, useState } from "react";
import { toast } from "sonner";

type MessageType = {
  key: string;
  from: "user" | "assistant";
  sources?: { href: string; title: string }[];
  versions: {
    id: string;
    content: string;
  }[];
  reasoning?: {
    content: string;
    duration: number;
  };
  tools?: {
    name: string;
    description: string;
    status: ToolUIPart["state"];
    parameters: Record<string, unknown>;
    result: string | undefined;
    error: string | undefined;
  }[];
  avatar: string;
  name: string;
};

const initialMessages: MessageType[] = [
  {
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content: "Can you explain how to use React hooks effectively?",
      },
    ],
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
  {
    key: nanoid(),
    from: "assistant",
    sources: [
      {
        href: "https://react.dev/reference/react",
        title: "React Documentation",
      },
      {
        href: "https://react.dev/reference/react-dom",
        title: "React DOM Documentation",
      },
    ],
    tools: [
      {
        name: "mcp",
        description: "Searching React documentation",
        status: "input-available",
        parameters: {
          query: "React hooks best practices",
          source: "react.dev",
        },
        result: `{
  "query": "React hooks best practices",
  "results": [
    {
      "title": "Rules of Hooks",
      "url": "https://react.dev/warnings/invalid-hook-call-warning",
      "snippet": "Hooks must be called at the top level of your React function components or custom hooks. Don't call hooks inside loops, conditions, or nested functions."
    },
    {
      "title": "useState Hook",
      "url": "https://react.dev/reference/react/useState",
      "snippet": "useState is a React Hook that lets you add state to your function components. It returns an array with two values: the current state and a function to update it."
    },
    {
      "title": "useEffect Hook",
      "url": "https://react.dev/reference/react/useEffect",
      "snippet": "useEffect lets you synchronize a component with external systems. It runs after render and can be used to perform side effects like data fetching."
    }
  ]
}`,
        error: undefined,
      },
    ],
    versions: [
      {
        id: nanoid(),
        content: `# React Hooks Best Practices

React hooks are a powerful feature that let you use state and other React features without writing classes. Here are some tips for using them effectively:

## Rules of Hooks

1. **Only call hooks at the top level** of your component or custom hooks
2. **Don't call hooks inside loops, conditions, or nested functions**

## Common Hooks

- **useState**: For local component state
- **useEffect**: For side effects like data fetching
- **useContext**: For consuming context
- **useReducer**: For complex state logic
- **useCallback**: For memoizing functions
- **useMemo**: For memoizing values

## Example of useState and useEffect

\`\`\`jsx
function ProfilePage({ userId }) {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    // This runs after render and when userId changes
    fetchUser(userId).then(userData => {
      setUser(userData);
    });
  }, [userId]);
  
  return user ? <Profile user={user} /> : <Loading />;
}
\`\`\`

Would you like me to explain any specific hook in more detail?`,
      },
    ],
    avatar: "https://github.com/openai.png",
    name: "OpenAI",
  },
  {
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content:
          "Yes, could you explain useCallback and useMemo in more detail? When should I use one over the other?",
      },
      {
        id: nanoid(),
        content:
          "I'm particularly interested in understanding the performance implications of useCallback and useMemo. Could you break down when each is most appropriate?",
      },
      {
        id: nanoid(),
        content:
          "Thanks for the overview! Could you dive deeper into the specific use cases where useCallback and useMemo make the biggest difference in React applications?",
      },
    ],
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
  {
    key: nanoid(),
    from: "assistant",
    reasoning: {
      content: `The user is asking for a detailed explanation of useCallback and useMemo. I should provide a clear and concise explanation of each hook's purpose and how they differ.
      
The useCallback hook is used to memoize functions to prevent unnecessary re-renders of child components that receive functions as props.

The useMemo hook is used to memoize values to avoid expensive recalculations on every render.

Both hooks help with performance optimization, but they serve different purposes.`,
      duration: 10,
    },
    versions: [
      {
        id: nanoid(),
        content: `## useCallback vs useMemo

Both hooks help with performance optimization, but they serve different purposes:

### useCallback

\`useCallback\` memoizes **functions** to prevent unnecessary re-renders of child components that receive functions as props.

\`\`\`jsx
// Without useCallback - a new function is created on every render
const handleClick = () => {
  console.log(count);
};

// With useCallback - the function is only recreated when dependencies change
const handleClick = useCallback(() => {
  console.log(count);
}, [count]);
\`\`\`

### useMemo

\`useMemo\` memoizes **values** to avoid expensive recalculations on every render.

\`\`\`jsx
// Without useMemo - expensive calculation runs on every render
const sortedList = expensiveSort(items);

// With useMemo - calculation only runs when items change
const sortedList = useMemo(() => expensiveSort(items), [items]);
\`\`\`

### When to use which?

- Use **useCallback** when:
  - Passing callbacks to optimized child components that rely on reference equality
  - Working with event handlers that you pass to child components

- Use **useMemo** when:
  - You have computationally expensive calculations
  - You want to avoid recreating objects that are used as dependencies for other hooks

### Performance Note

Don't overuse these hooks! They come with their own overhead. Only use them when you have identified a genuine performance issue.`,
      },
    ],
    avatar: "https://github.com/openai.png",
    name: "OpenAI",
  },
];

const models = [
  { id: "gpt-4", name: "GPT-4" },
  { id: "gpt-3.5-turbo", name: "GPT-3.5 Turbo" },
  { id: "claude-2", name: "Claude 2" },
  { id: "claude-instant", name: "Claude Instant" },
  { id: "palm-2", name: "PaLM 2" },
  { id: "llama-2-70b", name: "Llama 2 70B" },
  { id: "llama-2-13b", name: "Llama 2 13B" },
  { id: "cohere-command", name: "Command" },
  { id: "mistral-7b", name: "Mistral 7B" },
];

const suggestions = [
  "What are the latest trends in AI?",
  "How does machine learning work?",
  "Explain quantum computing",
  "Best practices for React development",
  "Tell me about TypeScript benefits",
  "How to optimize database queries?",
  "What is the difference between SQL and NoSQL?",
  "Explain cloud computing basics",
];

const mockResponses = [
  "That's a great question! Let me help you understand this concept better. The key thing to remember is that proper implementation requires careful consideration of the underlying principles and best practices in the field.",
  "I'd be happy to explain this topic in detail. From my understanding, there are several important factors to consider when approaching this problem. Let me break it down step by step for you.",
  "This is an interesting topic that comes up frequently. The solution typically involves understanding the core concepts and applying them in the right context. Here's what I recommend...",
  "Great choice of topic! This is something that many developers encounter. The approach I'd suggest is to start with the fundamentals and then build up to more complex scenarios.",
  "That's definitely worth exploring. From what I can see, the best way to handle this is to consider both the theoretical aspects and practical implementation details.",
];

const Example = () => {
  const [model, setModel] = useState<string>(models[0].id);
  const [text, setText] = useState<string>("");
  const [useWebSearch, setUseWebSearch] = useState<boolean>(false);
  const [useMicrophone, setUseMicrophone] = useState<boolean>(false);
  const [status, setStatus] = useState<
    "submitted" | "streaming" | "ready" | "error"
  >("ready");
  const [messages, setMessages] = useState<MessageType[]>(initialMessages);
  const [streamingMessageId, setStreamingMessageId] = useState<string | null>(
    null
  );

  const streamResponse = useCallback(
    async (messageId: string, content: string) => {
      setStatus("streaming");
      setStreamingMessageId(messageId);

      const words = content.split(" ");
      let currentContent = "";

      for (let i = 0; i < words.length; i++) {
        currentContent += (i > 0 ? " " : "") + words[i];

        setMessages((prev) =>
          prev.map((msg) => {
            if (msg.versions.some((v) => v.id === messageId)) {
              return {
                ...msg,
                versions: msg.versions.map((v) =>
                  v.id === messageId ? { ...v, content: currentContent } : v
                ),
              };
            }
            return msg;
          })
        );

        await new Promise((resolve) =>
          setTimeout(resolve, Math.random() * 100 + 50)
        );
      }

      setStatus("ready");
      setStreamingMessageId(null);
    },
    []
  );

  const addUserMessage = useCallback(
    (content: string) => {
      const userMessage: MessageType = {
        key: `user-${Date.now()}`,
        from: "user",
        versions: [
          {
            id: `user-${Date.now()}`,
            content,
          },
        ],
        avatar: "https://github.com/haydenbleasel.png",
        name: "User",
      };

      setMessages((prev) => [...prev, userMessage]);

      setTimeout(() => {
        const assistantMessageId = `assistant-${Date.now()}`;
        const randomResponse =
          mockResponses[Math.floor(Math.random() * mockResponses.length)];

        const assistantMessage: MessageType = {
          key: `assistant-${Date.now()}`,
          from: "assistant",
          versions: [
            {
              id: assistantMessageId,
              content: "",
            },
          ],
          avatar: "https://github.com/openai.png",
          name: "Assistant",
        };

        setMessages((prev) => [...prev, assistantMessage]);
        streamResponse(assistantMessageId, randomResponse);
      }, 500);
    },
    [streamResponse]
  );

  const handleSubmit = (message: PromptInputMessage) => {
    const hasText = Boolean(message.text);
    const hasAttachments = Boolean(message.files?.length);

    if (!(hasText || hasAttachments)) {
      return;
    }

    setStatus("submitted");

    if (message.files?.length) {
      toast.success("Files attached", {
        description: `${message.files.length} file(s) attached to message`,
      });
    }

    addUserMessage(message.text || "Sent with attachments");
    setText("");
  };

  const handleSuggestionClick = (suggestion: string) => {
    setStatus("submitted");
    addUserMessage(suggestion);
  };

  return (
    <div className="relative flex size-full flex-col divide-y overflow-hidden">
      <Conversation>
        <ConversationContent>
          {messages.map(({ versions, ...message }) => (
            <Branch defaultBranch={0} key={message.key}>
              <BranchMessages>
                {versions.map((version) => (
                  <Message
                    from={message.from}
                    key={`${message.key}-${version.id}`}
                  >
                    <div>
                      {message.sources?.length && (
                        <Sources>
                          <SourcesTrigger count={message.sources.length} />
                          <SourcesContent>
                            {message.sources.map((source) => (
                              <Source
                                href={source.href}
                                key={source.href}
                                title={source.title}
                              />
                            ))}
                          </SourcesContent>
                        </Sources>
                      )}
                      {message.reasoning && (
                        <Reasoning duration={message.reasoning.duration}>
                          <ReasoningTrigger />
                          <ReasoningContent>
                            {message.reasoning.content}
                          </ReasoningContent>
                        </Reasoning>
                      )}
                      <MessageContent>
                        <Response>{version.content}</Response>
                      </MessageContent>
                    </div>
                    <MessageAvatar name={message.name} src={message.avatar} />
                  </Message>
                ))}
              </BranchMessages>
              {versions.length > 1 && (
                <BranchSelector from={message.from}>
                  <BranchPrevious />
                  <BranchPage />
                  <BranchNext />
                </BranchSelector>
              )}
            </Branch>
          ))}
        </ConversationContent>
        <ConversationScrollButton />
      </Conversation>
      <div className="grid shrink-0 gap-4 pt-4">
        <Suggestions className="px-4">
          {suggestions.map((suggestion) => (
            <Suggestion
              key={suggestion}
              onClick={() => handleSuggestionClick(suggestion)}
              suggestion={suggestion}
            />
          ))}
        </Suggestions>
        <div className="w-full px-4 pb-4">
          <PromptInput globalDrop multiple onSubmit={handleSubmit}>
            <PromptInputBody>
              <PromptInputAttachments>
                {(attachment) => <PromptInputAttachment data={attachment} />}
              </PromptInputAttachments>
              <PromptInputTextarea
                onChange={(event) => setText(event.target.value)}
                value={text}
              />
            </PromptInputBody>
            <PromptInputToolbar>
              <PromptInputTools>
                <PromptInputActionMenu>
                  <PromptInputActionMenuTrigger />
                  <PromptInputActionMenuContent>
                    <PromptInputActionAddAttachments />
                  </PromptInputActionMenuContent>
                </PromptInputActionMenu>
                <PromptInputButton
                  onClick={() => setUseMicrophone(!useMicrophone)}
                  variant={useMicrophone ? "default" : "ghost"}
                >
                  <MicIcon size={16} />
                  <span className="sr-only">Microphone</span>
                </PromptInputButton>
                <PromptInputButton
                  onClick={() => setUseWebSearch(!useWebSearch)}
                  variant={useWebSearch ? "default" : "ghost"}
                >
                  <GlobeIcon size={16} />
                  <span>Search</span>
                </PromptInputButton>
                <PromptInputModelSelect onValueChange={setModel} value={model}>
                  <PromptInputModelSelectTrigger>
                    <PromptInputModelSelectValue />
                  </PromptInputModelSelectTrigger>
                  <PromptInputModelSelectContent>
                    {models.map((model) => (
                      <PromptInputModelSelectItem
                        key={model.id}
                        value={model.id}
                      >
                        {model.name}
                      </PromptInputModelSelectItem>
                    ))}
                  </PromptInputModelSelectContent>
                </PromptInputModelSelect>
              </PromptInputTools>
              <PromptInputSubmit
                disabled={!(text.trim() || status) || status === "streaming"}
                status={status}
              />
            </PromptInputToolbar>
          </PromptInput>
        </div>
      </div>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/code-block-dark.tsx">
"use client";

import { CodeBlock, CodeBlockCopyButton } from "@repo/elements/code-block";

const code = `function MyComponent(props) {
  return (
    <div>
      <h1>Hello, {props.name}!</h1>
      <p>This is an example React component.</p>
    </div>
  );
}`;

const Example = () => (
  <div className="dark">
    <CodeBlock code={code} language="jsx">
      <CodeBlockCopyButton
        onCopy={() => console.log("Copied code to clipboard")}
        onError={() => console.error("Failed to copy code to clipboard")}
      />
    </CodeBlock>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/code-block.tsx">
"use client";

import { CodeBlock, CodeBlockCopyButton } from "@repo/elements/code-block";

const code = `function MyComponent(props) {
  return (
    <div>
      <h1>Hello, {props.name}!</h1>
      <p>This is an example React component.</p>
    </div>
  );
}`;

const Example = () => (
  <CodeBlock code={code} language="jsx">
    <CodeBlockCopyButton
      onCopy={() => console.log("Copied code to clipboard")}
      onError={() => console.error("Failed to copy code to clipboard")}
    />
  </CodeBlock>
);

export default Example;
</file>

<file path="packages/examples/src/context.tsx">
"use client";

import {
  Context,
  ContextCacheUsage,
  ContextContent,
  ContextContentBody,
  ContextContentFooter,
  ContextContentHeader,
  ContextInputUsage,
  ContextOutputUsage,
  ContextReasoningUsage,
  ContextTrigger,
} from "@repo/elements/context";

const Example = () => (
  <div className="flex items-center justify-center p-8">
    <Context
      maxTokens={128_000}
      modelId="openai:gpt-5"
      usage={{
        inputTokens: 32_000,
        outputTokens: 8000,
        totalTokens: 40_000,
        cachedInputTokens: 0,
        reasoningTokens: 0,
      }}
      usedTokens={40_000}
    >
      <ContextTrigger />
      <ContextContent>
        <ContextContentHeader />
        <ContextContentBody>
          <ContextInputUsage />
          <ContextOutputUsage />
          <ContextReasoningUsage />
          <ContextCacheUsage />
        </ContextContentBody>
        <ContextContentFooter />
      </ContextContent>
    </Context>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/conversation.tsx">
"use client";

import {
  Conversation,
  ConversationContent,
  ConversationEmptyState,
  ConversationScrollButton,
} from "@repo/elements/conversation";
import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import { MessageSquareIcon } from "lucide-react";
import { nanoid } from "nanoid";
import { useEffect, useState } from "react";

const messages: { key: string; value: string; name: string; avatar: string }[] =
  [
    {
      key: nanoid(),
      value: "Hello, how are you?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "I'm good, thank you! How can I assist you today?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "I'm looking for information about your services.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value:
        "Sure! We offer a variety of AI solutions. What are you interested in?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "I'm interested in natural language processing tools.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Great choice! We have several NLP APIs. Would you like a demo?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Yes, a demo would be helpful.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Alright, I can show you a sentiment analysis example. Ready?",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Yes, please proceed.",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Here is a sample: 'I love this product!' → Positive sentiment.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Impressive! Can it handle multiple languages?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Absolutely, our models support over 20 languages.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "How do I get started with the API?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "You can sign up on our website and get an API key instantly.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Is there a free trial available?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "Yes, we offer a 14-day free trial with full access.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "What kind of support do you provide?",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "We provide 24/7 chat and email support for all users.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
    {
      key: nanoid(),
      value: "Thank you for the information!",
      name: "Alex Johnson",
      avatar: "https://github.com/haydenbleasel.png",
    },
    {
      key: nanoid(),
      value: "You're welcome! Let me know if you have any more questions.",
      name: "AI Assistant",
      avatar: "https://github.com/openai.png",
    },
  ];

const Example = () => {
  const [visibleMessages, setVisibleMessages] = useState<
    {
      key: string;
      value: string;
      name: string;
      avatar: string;
    }[]
  >([]);

  useEffect(() => {
    let currentIndex = 0;
    const interval = setInterval(() => {
      if (currentIndex < messages.length && messages[currentIndex]) {
        const currentMessage = messages[currentIndex];
        setVisibleMessages((prev) => [
          ...prev,
          {
            key: currentMessage.key,
            value: currentMessage.value,
            name: currentMessage.name,
            avatar: currentMessage.avatar,
          },
        ]);
        currentIndex++;
      } else {
        clearInterval(interval);
      }
    }, 500);

    return () => clearInterval(interval);
  }, []);

  return (
    <Conversation className="relative size-full" style={{ height: "498px" }}>
      <ConversationContent>
        {visibleMessages.length === 0 ? (
          <ConversationEmptyState
            description="Messages will appear here as the conversation progresses."
            icon={<MessageSquareIcon className="size-6" />}
            title="Start a conversation"
          />
        ) : (
          visibleMessages.map(({ key, value, name, avatar }, index) => (
            <Message from={index % 2 === 0 ? "user" : "assistant"} key={key}>
              <MessageContent>{value}</MessageContent>
              <MessageAvatar name={name} src={avatar} />
            </Message>
          ))
        )}
      </ConversationContent>
      <ConversationScrollButton />
    </Conversation>
  );
};

export default Example;
</file>

<file path="packages/examples/src/demo-chatgpt.tsx">
"use client";

import {
  Branch,
  BranchMessages,
  BranchNext,
  BranchPage,
  BranchPrevious,
  BranchSelector,
} from "@repo/elements/branch";
import {
  Conversation,
  ConversationContent,
  ConversationScrollButton,
} from "@repo/elements/conversation";
import { Message, MessageContent } from "@repo/elements/message";
import {
  PromptInput,
  PromptInputButton,
  type PromptInputMessage,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
} from "@repo/elements/prompt-input";
import {
  Reasoning,
  ReasoningContent,
  ReasoningTrigger,
} from "@repo/elements/reasoning";
import { Response } from "@repo/elements/response";
import {
  Source,
  Sources,
  SourcesContent,
  SourcesTrigger,
} from "@repo/elements/sources";
import { Suggestion, Suggestions } from "@repo/elements/suggestion";
import type { ToolUIPart } from "ai";
import {
  AudioWaveformIcon,
  BarChartIcon,
  BoxIcon,
  CameraIcon,
  CodeSquareIcon,
  FileIcon,
  GlobeIcon,
  GraduationCapIcon,
  ImageIcon,
  NotepadTextIcon,
  PaperclipIcon,
  ScreenShareIcon,
} from "lucide-react";
import { nanoid } from "nanoid";
import { useCallback, useEffect, useState } from "react";
import { toast } from "sonner";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";

type MessageType = {
  key: string;
  from: "user" | "assistant";
  sources?: { href: string; title: string }[];
  versions: {
    id: string;
    content: string;
  }[];
  reasoning?: {
    content: string;
    duration: number;
  };
  tools?: {
    name: string;
    description: string;
    status: ToolUIPart["state"];
    parameters: Record<string, unknown>;
    result: string | undefined;
    error: string | undefined;
  }[];
  avatar: string;
  name: string;
  isReasoningComplete?: boolean;
  isContentComplete?: boolean;
  isReasoningStreaming?: boolean;
};

const mockMessages: MessageType[] = [
  {
    avatar: "",
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content: "Can you explain how to use React hooks effectively?",
      },
    ],
    name: "Hayden Bleasel",
  },
  {
    avatar: "",
    key: nanoid(),
    from: "assistant",
    sources: [
      {
        href: "https://react.dev/reference/react",
        title: "React Documentation",
      },
      {
        href: "https://react.dev/reference/react-dom",
        title: "React DOM Documentation",
      },
    ],
    tools: [
      {
        name: "mcp",
        description: "Searching React documentation",
        status: "input-available",
        parameters: {
          query: "React hooks best practices",
          source: "react.dev",
        },
        result: `{
  "query": "React hooks best practices",
  "results": [
    {
      "title": "Rules of Hooks",
      "url": "https://react.dev/warnings/invalid-hook-call-warning",
      "snippet": "Hooks must be called at the top level of your React function components or custom hooks. Don't call hooks inside loops, conditions, or nested functions."
    },
    {
      "title": "useState Hook",
      "url": "https://react.dev/reference/react/useState",
      "snippet": "useState is a React Hook that lets you add state to your function components. It returns an array with two values: the current state and a function to update it."
    },
    {
      "title": "useEffect Hook",
      "url": "https://react.dev/reference/react/useEffect",
      "snippet": "useEffect lets you synchronize a component with external systems. It runs after render and can be used to perform side effects like data fetching."
    }
  ]
}`,
        error: undefined,
      },
    ],
    versions: [
      {
        id: nanoid(),
        content: `# React Hooks Best Practices

React hooks are a powerful feature that let you use state and other React features without writing classes. Here are some tips for using them effectively:

## Rules of Hooks

1. **Only call hooks at the top level** of your component or custom hooks
2. **Don't call hooks inside loops, conditions, or nested functions**

## Common Hooks

- **useState**: For local component state
- **useEffect**: For side effects like data fetching
- **useContext**: For consuming context
- **useReducer**: For complex state logic
- **useCallback**: For memoizing functions
- **useMemo**: For memoizing values

## Example of useState and useEffect

\`\`\`jsx
function ProfilePage({ userId }) {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    // This runs after render and when userId changes
    fetchUser(userId).then(userData => {
      setUser(userData);
    });
  }, [userId]);
  
  return user ? <Profile user={user} /> : <Loading />;
}
\`\`\`

Would you like me to explain any specific hook in more detail?`,
      },
    ],
    name: "OpenAI",
  },
  {
    avatar: "",
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content:
          "Yes, could you explain useCallback and useMemo in more detail? When should I use one over the other?",
      },
      {
        id: nanoid(),
        content:
          "I'm particularly interested in understanding the performance implications of useCallback and useMemo. Could you break down when each is most appropriate?",
      },
      {
        id: nanoid(),
        content:
          "Thanks for the overview! Could you dive deeper into the specific use cases where useCallback and useMemo make the biggest difference in React applications?",
      },
    ],
    name: "Hayden Bleasel",
  },
  {
    avatar: "",
    key: nanoid(),
    from: "assistant",
    reasoning: {
      content: `The user is asking for a detailed explanation of useCallback and useMemo. I should provide a clear and concise explanation of each hook's purpose and how they differ.
      
The useCallback hook is used to memoize functions to prevent unnecessary re-renders of child components that receive functions as props.

The useMemo hook is used to memoize values to avoid expensive recalculations on every render.

Both hooks help with performance optimization, but they serve different purposes.`,
      duration: 10,
    },
    versions: [
      {
        id: nanoid(),
        content: `## useCallback vs useMemo

Both hooks help with *performance optimization*, but they serve different purposes:

### useCallback

\`useCallback\` memoizes **functions** to prevent unnecessary re-renders of child components that receive functions as props.

\`\`\`jsx
// Without useCallback - a new function is created on every render
const handleClick = () => {
  console.log(count);
};

// With useCallback - the function is only recreated when dependencies change
const handleClick = useCallback(() => {
  console.log(count);
}, [count]);
\`\`\`

### useMemo

\`useMemo\` memoizes **values** to avoid expensive recalculations on every render.

\`\`\`jsx
// Without useMemo - expensive calculation runs on every render
const sortedList = expensiveSort(items);

// With useMemo - calculation only runs when items change
const sortedList = useMemo(() => expensiveSort(items), [items]);
\`\`\`

### When to use which?

- Use **useCallback** when:
  - Passing callbacks to optimized child components that rely on reference equality
  - Working with event handlers that you pass to child components

- Use **useMemo** when:
  - You have computationally expensive calculations
  - You want to avoid recreating objects that are used as dependencies for other hooks

### Performance Note

Don't overuse these hooks! They come with their own overhead. Only use them when you have identified a genuine performance issue.

### ~~Deprecated Methods~~

Note that ~~class-based lifecycle methods~~ like \`componentDidMount\` are now replaced by the \`useEffect\` hook in modern React development.`,
      },
    ],
    name: "OpenAI",
  },
];

const suggestions = [
  { icon: BarChartIcon, text: "Analyze data", color: "#76d0eb" },
  { icon: BoxIcon, text: "Surprise me", color: "#76d0eb" },
  { icon: NotepadTextIcon, text: "Summarize text", color: "#ea8444" },
  { icon: CodeSquareIcon, text: "Code", color: "#6c71ff" },
  { icon: GraduationCapIcon, text: "Get advice", color: "#76d0eb" },
  { icon: null, text: "More" },
];

const mockResponses = [
  "That's a great question! Let me help you understand this concept better. The key thing to remember is that proper implementation requires careful consideration of the underlying principles and best practices in the field.",
  "I'd be happy to explain this topic in detail. From my understanding, there are several important factors to consider when approaching this problem. Let me break it down step by step for you.",
  "This is an interesting topic that comes up frequently. The solution typically involves understanding the core concepts and applying them in the right context. Here's what I recommend...",
  "Great choice of topic! This is something that many developers encounter. The approach I'd suggest is to start with the fundamentals and then build up to more complex scenarios.",
  "That's definitely worth exploring. From what I can see, the best way to handle this is to consider both the theoretical aspects and practical implementation details.",
];

const Example = () => {
  const [text, setText] = useState<string>("");
  const [useWebSearch, setUseWebSearch] = useState<boolean>(false);
  const [useMicrophone, setUseMicrophone] = useState<boolean>(false);
  const [status, setStatus] = useState<
    "submitted" | "streaming" | "ready" | "error"
  >("ready");
  const [messages, setMessages] = useState<MessageType[]>([]);
  const [streamingMessageId, setStreamingMessageId] = useState<string | null>(
    null
  );

  const streamReasoning = async (
    messageKey: string,
    versionId: string,
    reasoningContent: string
  ) => {
    const words = reasoningContent.split(" ");
    let currentContent = "";

    for (let i = 0; i < words.length; i++) {
      currentContent += (i > 0 ? " " : "") + words[i];

      setMessages((prev) =>
        prev.map((msg) => {
          if (msg.key === messageKey) {
            return {
              ...msg,
              reasoning: msg.reasoning
                ? { ...msg.reasoning, content: currentContent }
                : undefined,
            };
          }
          return msg;
        })
      );

      await new Promise((resolve) =>
        setTimeout(resolve, Math.random() * 30 + 20)
      );
    }

    // Mark reasoning as complete
    setMessages((prev) =>
      prev.map((msg) => {
        if (msg.key === messageKey) {
          return {
            ...msg,
            isReasoningComplete: true,
            isReasoningStreaming: false,
          };
        }
        return msg;
      })
    );
  };

  const streamContent = async (
    messageKey: string,
    versionId: string,
    content: string
  ) => {
    const words = content.split(" ");
    let currentContent = "";

    for (let i = 0; i < words.length; i++) {
      currentContent += (i > 0 ? " " : "") + words[i];

      setMessages((prev) =>
        prev.map((msg) => {
          if (msg.key === messageKey) {
            return {
              ...msg,
              versions: msg.versions.map((v) =>
                v.id === versionId ? { ...v, content: currentContent } : v
              ),
            };
          }
          return msg;
        })
      );

      await new Promise((resolve) =>
        setTimeout(resolve, Math.random() * 50 + 25)
      );
    }

    // Mark content as complete
    setMessages((prev) =>
      prev.map((msg) => {
        if (msg.key === messageKey) {
          return { ...msg, isContentComplete: true };
        }
        return msg;
      })
    );
  };

  const streamResponse = useCallback(
    async (
      messageKey: string,
      versionId: string,
      content: string,
      reasoning?: { content: string; duration: number }
    ) => {
      setStatus("streaming");
      setStreamingMessageId(versionId);

      // First stream the reasoning if it exists
      if (reasoning) {
        await streamReasoning(messageKey, versionId, reasoning.content);
        await new Promise((resolve) => setTimeout(resolve, 500)); // Pause between reasoning and content
      }

      // Then stream the content
      await streamContent(messageKey, versionId, content);

      setStatus("ready");
      setStreamingMessageId(null);
    },
    []
  );

  const streamMessage = useCallback(
    async (message: MessageType) => {
      if (message.from === "user") {
        setMessages((prev) => [...prev, message]);
        return;
      }

      // Add empty assistant message with reasoning structure
      const newMessage = {
        ...message,
        versions: message.versions.map((v) => ({ ...v, content: "" })),
        reasoning: message.reasoning
          ? { ...message.reasoning, content: "" }
          : undefined,
        isReasoningComplete: false,
        isContentComplete: false,
        isReasoningStreaming: !!message.reasoning,
      };

      setMessages((prev) => [...prev, newMessage]);

      // Get the first version for streaming
      const firstVersion = message.versions[0];
      if (!firstVersion) return;

      // Stream the response
      await streamResponse(
        newMessage.key,
        firstVersion.id,
        firstVersion.content,
        message.reasoning
      );
    },
    [streamResponse]
  );

  const addUserMessage = useCallback(
    (content: string) => {
      const userMessage: MessageType = {
        key: `user-${Date.now()}`,
        from: "user",
        versions: [
          {
            id: `user-${Date.now()}`,
            content,
          },
        ],
        name: "User",
        avatar: "",
      };

      setMessages((prev) => [...prev, userMessage]);

      setTimeout(() => {
        const assistantMessageKey = `assistant-${Date.now()}`;
        const assistantMessageId = `version-${Date.now()}`;
        const randomResponse =
          mockResponses[Math.floor(Math.random() * mockResponses.length)];

        // Create reasoning for some responses
        const shouldHaveReasoning = Math.random() > 0.5;
        const reasoning = shouldHaveReasoning
          ? {
              content:
                "Let me think about this question carefully. I need to provide a comprehensive and helpful response that addresses the user's needs while being clear and concise.",
              duration: 3,
            }
          : undefined;

        const assistantMessage: MessageType = {
          key: assistantMessageKey,
          from: "assistant",
          versions: [
            {
              id: assistantMessageId,
              content: "",
            },
          ],
          name: "Assistant",
          avatar: "",
          reasoning: reasoning ? { ...reasoning, content: "" } : undefined,
          isReasoningComplete: false,
          isContentComplete: false,
          isReasoningStreaming: !!reasoning,
        };

        setMessages((prev) => [...prev, assistantMessage]);
        streamResponse(
          assistantMessageKey,
          assistantMessageId,
          randomResponse,
          reasoning
        );
      }, 500);
    },
    [streamResponse]
  );

  useEffect(() => {
    // Reset state on mount to ensure fresh component
    setMessages([]);

    const processMessages = async () => {
      for (let i = 0; i < mockMessages.length; i++) {
        await streamMessage(mockMessages[i]);

        if (i < mockMessages.length - 1) {
          await new Promise((resolve) => setTimeout(resolve, 1000));
        }
      }
    };

    // Small delay to ensure state is reset before starting
    const timer = setTimeout(() => {
      processMessages();
    }, 100);

    // Cleanup function to cancel any ongoing operations
    return () => {
      clearTimeout(timer);
      setMessages([]);
    };
  }, [streamMessage]);

  const handleSubmit = (message: PromptInputMessage) => {
    const hasText = Boolean(message.text);
    const hasAttachments = Boolean(message.files?.length);

    if (!(hasText || hasAttachments)) {
      return;
    }

    setStatus("submitted");
    addUserMessage(message.text || "Sent with attachments");
    setText("");
  };

  const handleFileAction = (action: string) => {
    toast.success("File action", {
      description: action,
    });
  };

  const handleSuggestionClick = (suggestion: string) => {
    setStatus("submitted");
    addUserMessage(suggestion);
  };

  return (
    <div className="relative flex size-full flex-col divide-y overflow-hidden">
      <Conversation>
        <ConversationContent>
          {messages.map(({ versions, ...message }) => (
            <Branch defaultBranch={0} key={message.key}>
              <BranchMessages>
                {versions.map((version) => (
                  <Message
                    from={message.from}
                    key={`${message.key}-${version.id}`}
                  >
                    <div>
                      {message.sources?.length && (
                        <Sources>
                          <SourcesTrigger count={message.sources.length} />
                          <SourcesContent>
                            {message.sources.map((source) => (
                              <Source
                                href={source.href}
                                key={source.href}
                                title={source.title}
                              />
                            ))}
                          </SourcesContent>
                        </Sources>
                      )}
                      {message.reasoning && (
                        <Reasoning
                          duration={message.reasoning.duration}
                          isStreaming={message.isReasoningStreaming}
                        >
                          <ReasoningTrigger />
                          <ReasoningContent>
                            {message.reasoning.content}
                          </ReasoningContent>
                        </Reasoning>
                      )}
                      {(message.from === "user" ||
                        message.isReasoningComplete ||
                        !message.reasoning) && (
                        <MessageContent
                          className={cn(
                            "group-[.is-user]:rounded-[24px] group-[.is-user]:bg-secondary group-[.is-user]:text-foreground",
                            "group-[.is-assistant]:bg-transparent group-[.is-assistant]:p-0 group-[.is-assistant]:text-foreground"
                          )}
                        >
                          <Response>{version.content}</Response>
                        </MessageContent>
                      )}
                    </div>
                  </Message>
                ))}
              </BranchMessages>
              {versions.length > 1 && (
                <BranchSelector className="px-0" from={message.from}>
                  <BranchPrevious />
                  <BranchPage />
                  <BranchNext />
                </BranchSelector>
              )}
            </Branch>
          ))}
        </ConversationContent>
        <ConversationScrollButton />
      </Conversation>
      <div className="grid shrink-0 gap-4 p-4">
        <PromptInput
          className="divide-y-0 rounded-[28px]"
          onSubmit={handleSubmit}
        >
          <PromptInputTextarea
            className="px-5 md:text-base"
            onChange={(event) => setText(event.target.value)}
            placeholder="Ask anything"
            value={text}
          />
          <PromptInputToolbar className="p-2.5">
            <PromptInputTools>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <PromptInputButton
                    className="!rounded-full border font-medium"
                    variant="outline"
                  >
                    <PaperclipIcon size={16} />
                    <span>Attach</span>
                  </PromptInputButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="start">
                  <DropdownMenuItem
                    onClick={() => handleFileAction("upload-file")}
                  >
                    <FileIcon className="mr-2" size={16} />
                    Upload file
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("upload-photo")}
                  >
                    <ImageIcon className="mr-2" size={16} />
                    Upload photo
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("take-screenshot")}
                  >
                    <ScreenShareIcon className="mr-2" size={16} />
                    Take screenshot
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("take-photo")}
                  >
                    <CameraIcon className="mr-2" size={16} />
                    Take photo
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              <PromptInputButton
                className="rounded-full border font-medium"
                onClick={() => setUseWebSearch(!useWebSearch)}
                variant="outline"
              >
                <GlobeIcon size={16} />
                <span>Search</span>
              </PromptInputButton>
            </PromptInputTools>
            <PromptInputButton
              className="rounded-full font-medium text-foreground"
              onClick={() => setUseMicrophone(!useMicrophone)}
              variant="secondary"
            >
              <AudioWaveformIcon size={16} />
              <span>Voice</span>
            </PromptInputButton>
          </PromptInputToolbar>
        </PromptInput>
        <Suggestions className="px-4">
          {suggestions.map(({ icon: Icon, text, color }) => (
            <Suggestion
              className="font-normal"
              key={text}
              onClick={() => handleSuggestionClick(text)}
              suggestion={text}
            >
              {Icon && <Icon size={16} style={{ color }} />}
              {text}
            </Suggestion>
          ))}
        </Suggestions>
      </div>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/demo-claude.tsx">
"use client";

import {
  Branch,
  BranchMessages,
  BranchNext,
  BranchPage,
  BranchPrevious,
  BranchSelector,
} from "@repo/elements/branch";
import {
  Conversation,
  ConversationContent,
  ConversationScrollButton,
} from "@repo/elements/conversation";
import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import {
  PromptInput,
  PromptInputButton,
  type PromptInputMessage,
  PromptInputModelSelect,
  PromptInputModelSelectContent,
  PromptInputModelSelectItem,
  PromptInputModelSelectTrigger,
  PromptInputModelSelectValue,
  PromptInputSubmit,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
} from "@repo/elements/prompt-input";
import {
  Reasoning,
  ReasoningContent,
  ReasoningTrigger,
} from "@repo/elements/reasoning";
import { Response } from "@repo/elements/response";
import {
  Source,
  Sources,
  SourcesContent,
  SourcesTrigger,
} from "@repo/elements/sources";
import type { ToolUIPart } from "ai";
import {
  ArrowUpIcon,
  CameraIcon,
  FileIcon,
  ImageIcon,
  PlusIcon,
  ScreenShareIcon,
  Settings2Icon,
} from "lucide-react";
import { nanoid } from "nanoid";
import { useCallback, useEffect, useState } from "react";
import { toast } from "sonner";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";

type MessageType = {
  key: string;
  from: "user" | "assistant";
  sources?: { href: string; title: string }[];
  versions: {
    id: string;
    content: string;
  }[];
  reasoning?: {
    content: string;
    duration: number;
  };
  tools?: {
    name: string;
    description: string;
    status: ToolUIPart["state"];
    parameters: Record<string, unknown>;
    result: string | undefined;
    error: string | undefined;
  }[];
  avatar: string;
  name: string;
  isReasoningComplete?: boolean;
  isContentComplete?: boolean;
  isReasoningStreaming?: boolean;
};

const mockMessages: MessageType[] = [
  {
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content: "Can you explain how to use React hooks effectively?",
      },
    ],
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
  {
    key: nanoid(),
    from: "assistant",
    sources: [
      {
        href: "https://react.dev/reference/react",
        title: "React Documentation",
      },
      {
        href: "https://react.dev/reference/react-dom",
        title: "React DOM Documentation",
      },
    ],
    tools: [
      {
        name: "mcp",
        description: "Searching React documentation",
        status: "input-available",
        parameters: {
          query: "React hooks best practices",
          source: "react.dev",
        },
        result: `{
  "query": "React hooks best practices",
  "results": [
    {
      "title": "Rules of Hooks",
      "url": "https://react.dev/warnings/invalid-hook-call-warning",
      "snippet": "Hooks must be called at the top level of your React function components or custom hooks. Don't call hooks inside loops, conditions, or nested functions."
    },
    {
      "title": "useState Hook",
      "url": "https://react.dev/reference/react/useState",
      "snippet": "useState is a React Hook that lets you add state to your function components. It returns an array with two values: the current state and a function to update it."
    },
    {
      "title": "useEffect Hook",
      "url": "https://react.dev/reference/react/useEffect",
      "snippet": "useEffect lets you synchronize a component with external systems. It runs after render and can be used to perform side effects like data fetching."
    }
  ]
}`,
        error: undefined,
      },
    ],
    versions: [
      {
        id: nanoid(),
        content: `# React Hooks Best Practices

React hooks are a powerful feature that let you use state and other React features without writing classes. Here are some tips for using them effectively:

## Rules of Hooks

1. **Only call hooks at the top level** of your component or custom hooks
2. **Don't call hooks inside loops, conditions, or nested functions**

## Common Hooks

- **useState**: For local component state
- **useEffect**: For side effects like data fetching
- **useContext**: For consuming context
- **useReducer**: For complex state logic
- **useCallback**: For memoizing functions
- **useMemo**: For memoizing values

## Example of useState and useEffect

\`\`\`jsx
function ProfilePage({ userId }) {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    // This runs after render and when userId changes
    fetchUser(userId).then(userData => {
      setUser(userData);
    });
  }, [userId]);
  
  return user ? <Profile user={user} /> : <Loading />;
}
\`\`\`

Would you like me to explain any specific hook in more detail?`,
      },
    ],
    avatar: "https://github.com/openai.png",
    name: "OpenAI",
  },
  {
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content:
          "Yes, could you explain useCallback and useMemo in more detail? When should I use one over the other?",
      },
      {
        id: nanoid(),
        content:
          "I'm particularly interested in understanding the performance implications of useCallback and useMemo. Could you break down when each is most appropriate?",
      },
      {
        id: nanoid(),
        content:
          "Thanks for the overview! Could you dive deeper into the specific use cases where useCallback and useMemo make the biggest difference in React applications?",
      },
    ],
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
  {
    key: nanoid(),
    from: "assistant",
    reasoning: {
      content: `The user is asking for a detailed explanation of useCallback and useMemo. I should provide a clear and concise explanation of each hook's purpose and how they differ.
      
The useCallback hook is used to memoize functions to prevent unnecessary re-renders of child components that receive functions as props.

The useMemo hook is used to memoize values to avoid expensive recalculations on every render.

Both hooks help with performance optimization, but they serve different purposes.`,
      duration: 10,
    },
    versions: [
      {
        id: nanoid(),
        content: `## useCallback vs useMemo

Both hooks help with _performance optimization_, but they serve different purposes:

### useCallback

\`useCallback\` memoizes **functions** to prevent unnecessary re-renders of child components that receive functions as props.

\`\`\`jsx
// Without useCallback - a new function is created on every render
const handleClick = () => {
  console.log(count);
};

// With useCallback - the function is only recreated when dependencies change
const handleClick = useCallback(() => {
  console.log(count);
}, [count]);
\`\`\`

### useMemo

\`useMemo\` memoizes __values__ to avoid expensive recalculations on every render.

\`\`\`jsx
// Without useMemo - expensive calculation runs on every render
const sortedList = expensiveSort(items);

// With useMemo - calculation only runs when items change
const sortedList = useMemo(() => expensiveSort(items), [items]);
\`\`\`

### When to use which?

- Use **useCallback** when:
  - Passing callbacks to optimized child components that rely on reference equality
  - Working with event handlers that you pass to child components

- Use **useMemo** when:
  - You have computationally expensive calculations
  - You want to avoid recreating objects that are used as dependencies for other hooks

### Performance Note

Don't overuse these hooks! They come with their own overhead. Only use them when you have identified a genuine performance issue.

### ~~Common Mistakes~~

Avoid these ~~anti-patterns~~ when using hooks:
- ~~Calling hooks conditionally~~ - Always call hooks at the top level
- Using \`useEffect\` without proper dependency arrays`,
      },
    ],
    avatar: "https://github.com/openai.png",
    name: "OpenAI",
  },
];

const models = [
  { id: "claude-3-opus", name: "Claude 3 Opus" },
  { id: "claude-3-sonnet", name: "Claude 3 Sonnet" },
  { id: "claude-3-haiku", name: "Claude 3 Haiku" },
];

const mockResponses = [
  "That's a great question! Let me help you understand this concept better. The key thing to remember is that proper implementation requires careful consideration of the underlying principles and best practices in the field.",
  "I'd be happy to explain this topic in detail. From my understanding, there are several important factors to consider when approaching this problem. Let me break it down step by step for you.",
  "This is an interesting topic that comes up frequently. The solution typically involves understanding the core concepts and applying them in the right context. Here's what I recommend...",
  "Great choice of topic! This is something that many developers encounter. The approach I'd suggest is to start with the fundamentals and then build up to more complex scenarios.",
  "That's definitely worth exploring. From what I can see, the best way to handle this is to consider both the theoretical aspects and practical implementation details.",
];

const Example = () => {
  const [model, setModel] = useState<string>(models[0].id);
  const [text, setText] = useState<string>("");
  const [useWebSearch, setUseWebSearch] = useState<boolean>(false);
  const [useMicrophone, setUseMicrophone] = useState<boolean>(false);
  const [status, setStatus] = useState<
    "submitted" | "streaming" | "ready" | "error"
  >("ready");
  const [messages, setMessages] = useState<MessageType[]>([]);
  const [streamingMessageId, setStreamingMessageId] = useState<string | null>(
    null
  );

  const streamReasoning = async (
    messageKey: string,
    versionId: string,
    reasoningContent: string
  ) => {
    const words = reasoningContent.split(" ");
    let currentContent = "";

    for (let i = 0; i < words.length; i++) {
      currentContent += (i > 0 ? " " : "") + words[i];

      setMessages((prev) =>
        prev.map((msg) => {
          if (msg.key === messageKey) {
            return {
              ...msg,
              reasoning: msg.reasoning
                ? { ...msg.reasoning, content: currentContent }
                : undefined,
            };
          }
          return msg;
        })
      );

      await new Promise((resolve) =>
        setTimeout(resolve, Math.random() * 30 + 20)
      );
    }

    // Mark reasoning as complete
    setMessages((prev) =>
      prev.map((msg) => {
        if (msg.key === messageKey) {
          return {
            ...msg,
            isReasoningComplete: true,
            isReasoningStreaming: false,
          };
        }
        return msg;
      })
    );
  };

  const streamContent = async (
    messageKey: string,
    versionId: string,
    content: string
  ) => {
    const words = content.split(" ");
    let currentContent = "";

    for (let i = 0; i < words.length; i++) {
      currentContent += (i > 0 ? " " : "") + words[i];

      setMessages((prev) =>
        prev.map((msg) => {
          if (msg.key === messageKey) {
            return {
              ...msg,
              versions: msg.versions.map((v) =>
                v.id === versionId ? { ...v, content: currentContent } : v
              ),
            };
          }
          return msg;
        })
      );

      await new Promise((resolve) =>
        setTimeout(resolve, Math.random() * 50 + 25)
      );
    }

    // Mark content as complete
    setMessages((prev) =>
      prev.map((msg) => {
        if (msg.key === messageKey) {
          return { ...msg, isContentComplete: true };
        }
        return msg;
      })
    );
  };

  const streamResponse = useCallback(
    async (
      messageKey: string,
      versionId: string,
      content: string,
      reasoning?: { content: string; duration: number }
    ) => {
      setStatus("streaming");
      setStreamingMessageId(versionId);

      // First stream the reasoning if it exists
      if (reasoning) {
        await streamReasoning(messageKey, versionId, reasoning.content);
        await new Promise((resolve) => setTimeout(resolve, 500)); // Pause between reasoning and content
      }

      // Then stream the content
      await streamContent(messageKey, versionId, content);

      setStatus("ready");
      setStreamingMessageId(null);
    },
    []
  );

  const streamMessage = useCallback(
    async (message: MessageType) => {
      if (message.from === "user") {
        setMessages((prev) => [...prev, message]);
        return;
      }

      // Add empty assistant message with reasoning structure
      const newMessage = {
        ...message,
        versions: message.versions.map((v) => ({ ...v, content: "" })),
        reasoning: message.reasoning
          ? { ...message.reasoning, content: "" }
          : undefined,
        isReasoningComplete: false,
        isContentComplete: false,
        isReasoningStreaming: !!message.reasoning,
      };

      setMessages((prev) => [...prev, newMessage]);

      // Get the first version for streaming
      const firstVersion = message.versions[0];
      if (!firstVersion) return;

      // Stream the response
      await streamResponse(
        newMessage.key,
        firstVersion.id,
        firstVersion.content,
        message.reasoning
      );
    },
    [streamResponse]
  );

  const addUserMessage = useCallback(
    (content: string) => {
      const userMessage: MessageType = {
        key: `user-${Date.now()}`,
        from: "user",
        versions: [
          {
            id: `user-${Date.now()}`,
            content,
          },
        ],
        avatar: "https://github.com/haydenbleasel.png",
        name: "User",
      };

      setMessages((prev) => [...prev, userMessage]);

      setTimeout(() => {
        const assistantMessageKey = `assistant-${Date.now()}`;
        const assistantMessageId = `version-${Date.now()}`;
        const randomResponse =
          mockResponses[Math.floor(Math.random() * mockResponses.length)];

        // Create reasoning for some responses
        const shouldHaveReasoning = Math.random() > 0.5;
        const reasoning = shouldHaveReasoning
          ? {
              content:
                "Let me think about this question carefully. I need to provide a comprehensive and helpful response that addresses the user's needs while being clear and concise.",
              duration: 3,
            }
          : undefined;

        const assistantMessage: MessageType = {
          key: assistantMessageKey,
          from: "assistant",
          versions: [
            {
              id: assistantMessageId,
              content: "",
            },
          ],
          avatar: "https://github.com/openai.png",
          name: "Assistant",
          reasoning: reasoning ? { ...reasoning, content: "" } : undefined,
          isReasoningComplete: false,
          isContentComplete: false,
          isReasoningStreaming: !!reasoning,
        };

        setMessages((prev) => [...prev, assistantMessage]);
        streamResponse(
          assistantMessageKey,
          assistantMessageId,
          randomResponse,
          reasoning
        );
      }, 500);
    },
    [streamResponse]
  );

  useEffect(() => {
    // Reset state on mount to ensure fresh component
    setMessages([]);

    const processMessages = async () => {
      for (let i = 0; i < mockMessages.length; i++) {
        await streamMessage(mockMessages[i]);

        if (i < mockMessages.length - 1) {
          await new Promise((resolve) => setTimeout(resolve, 1000));
        }
      }
    };

    // Small delay to ensure state is reset before starting
    const timer = setTimeout(() => {
      processMessages();
    }, 100);

    // Cleanup function to cancel any ongoing operations
    return () => {
      clearTimeout(timer);
      setMessages([]);
    };
  }, [streamMessage]);

  const handleSubmit = (message: PromptInputMessage) => {
    const hasText = Boolean(message.text);
    const hasAttachments = Boolean(message.files?.length);

    if (!(hasText || hasAttachments)) {
      return;
    }

    setStatus("submitted");
    addUserMessage(message.text || "Sent with attachments");
    setText("");
  };

  const handleFileAction = (action: string) => {
    toast.success("File action", {
      description: action,
    });
  };

  const handleSuggestionClick = (suggestion: string) => {
    setStatus("submitted");
    addUserMessage(suggestion);
  };

  return (
    <div className="relative flex size-full flex-col divide-y overflow-hidden bg-[#faf9f5] dark:bg-background">
      <Conversation>
        <ConversationContent>
          {messages.map(({ versions, ...message }) => (
            <Branch defaultBranch={0} key={message.key}>
              <BranchMessages>
                {versions.map((version) => (
                  <Message
                    className="flex-row-reverse"
                    from={message.from}
                    key={`${message.key}-${version.id}`}
                  >
                    <div>
                      {message.sources?.length && (
                        <Sources>
                          <SourcesTrigger count={message.sources.length} />
                          <SourcesContent>
                            {message.sources.map((source) => (
                              <Source
                                href={source.href}
                                key={source.href}
                                title={source.title}
                              />
                            ))}
                          </SourcesContent>
                        </Sources>
                      )}
                      {message.reasoning && (
                        <Reasoning
                          duration={message.reasoning.duration}
                          isStreaming={message.isReasoningStreaming}
                        >
                          <ReasoningTrigger />
                          <ReasoningContent>
                            {message.reasoning.content}
                          </ReasoningContent>
                        </Reasoning>
                      )}
                      {(message.from === "user" ||
                        message.isReasoningComplete ||
                        !message.reasoning) && (
                        <MessageContent
                          className={cn(
                            "group-[.is-user]:bg-[#f0eee6] group-[.is-user]:text-foreground dark:group-[.is-user]:bg-muted",
                            "group-[.is-assistant]:bg-transparent group-[.is-assistant]:p-0 group-[.is-assistant]:font-serif group-[.is-assistant]:text-foreground"
                          )}
                        >
                          <div className="flex gap-2">
                            {message.from === "user" && (
                              <MessageAvatar
                                className="size-7"
                                name={message.name}
                                src={message.avatar}
                              />
                            )}
                            <div className="mt-1 w-full">
                              <Response>{version.content}</Response>
                            </div>
                          </div>
                        </MessageContent>
                      )}
                    </div>
                  </Message>
                ))}
              </BranchMessages>
              {versions.length > 1 && (
                <BranchSelector from={message.from}>
                  <BranchPrevious />
                  <BranchPage />
                  <BranchNext />
                </BranchSelector>
              )}
            </Branch>
          ))}
        </ConversationContent>
        <ConversationScrollButton />
      </Conversation>
      <div className="grid shrink-0 gap-4 p-4">
        <PromptInput
          className="divide-y-0 rounded-2xl p-3"
          onSubmit={handleSubmit}
        >
          <PromptInputTextarea
            className="p-0 md:text-base"
            onChange={(event) => setText(event.target.value)}
            placeholder="Reply to Claude..."
            value={text}
          />
          <PromptInputToolbar className="p-0">
            <PromptInputTools>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <PromptInputButton variant="outline">
                    <PlusIcon size={16} />
                    <span className="sr-only">Add attachment</span>
                  </PromptInputButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="start">
                  <DropdownMenuItem
                    onClick={() => handleFileAction("upload-file")}
                  >
                    <FileIcon className="mr-2" size={16} />
                    Upload file
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("upload-photo")}
                  >
                    <ImageIcon className="mr-2" size={16} />
                    Upload photo
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("take-screenshot")}
                  >
                    <ScreenShareIcon className="mr-2" size={16} />
                    Take screenshot
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("take-photo")}
                  >
                    <CameraIcon className="mr-2" size={16} />
                    Take photo
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              <PromptInputButton variant="outline">
                <Settings2Icon size={16} />
                <span className="sr-only">Settings</span>
              </PromptInputButton>
            </PromptInputTools>
            <div className="flex items-center gap-2">
              <PromptInputModelSelect onValueChange={setModel} value={model}>
                <PromptInputModelSelectTrigger className="font-serif">
                  <PromptInputModelSelectValue />
                </PromptInputModelSelectTrigger>
                <PromptInputModelSelectContent className="font-serif">
                  {models.map((model) => (
                    <PromptInputModelSelectItem key={model.id} value={model.id}>
                      {model.name}
                    </PromptInputModelSelectItem>
                  ))}
                </PromptInputModelSelectContent>
              </PromptInputModelSelect>
              <PromptInputSubmit
                className="bg-[#c96442]"
                disabled={!text.trim() || status === "streaming"}
                status={status}
              >
                <ArrowUpIcon size={16} />
              </PromptInputSubmit>
            </div>
          </PromptInputToolbar>
        </PromptInput>
      </div>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/demo-grok.tsx">
"use client";

import {
  Branch,
  BranchMessages,
  BranchNext,
  BranchPage,
  BranchPrevious,
  BranchSelector,
} from "@repo/elements/branch";
import {
  Conversation,
  ConversationContent,
  ConversationScrollButton,
} from "@repo/elements/conversation";
import { Message, MessageContent } from "@repo/elements/message";
import {
  PromptInput,
  PromptInputButton,
  type PromptInputMessage,
  PromptInputModelSelect,
  PromptInputModelSelectContent,
  PromptInputModelSelectItem,
  PromptInputModelSelectTrigger,
  PromptInputModelSelectValue,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
} from "@repo/elements/prompt-input";
import {
  Reasoning,
  ReasoningContent,
  ReasoningTrigger,
} from "@repo/elements/reasoning";
import { Response } from "@repo/elements/response";
import {
  Source,
  Sources,
  SourcesContent,
  SourcesTrigger,
} from "@repo/elements/sources";
import type { ToolUIPart } from "ai";
import {
  AudioWaveformIcon,
  CameraIcon,
  ChevronDownIcon,
  FileIcon,
  ImageIcon,
  LightbulbIcon,
  PaperclipIcon,
  ScreenShareIcon,
  SearchIcon,
} from "lucide-react";
import { nanoid } from "nanoid";
import { useCallback, useEffect, useState } from "react";
import { toast } from "sonner";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";

type MessageType = {
  key: string;
  from: "user" | "assistant";
  sources?: { href: string; title: string }[];
  versions: {
    id: string;
    content: string;
  }[];
  reasoning?: {
    content: string;
    duration: number;
  };
  tools?: {
    name: string;
    description: string;
    status: ToolUIPart["state"];
    parameters: Record<string, unknown>;
    result: string | undefined;
    error: string | undefined;
  }[];
  avatar: string;
  name: string;
  isReasoningComplete?: boolean;
  isContentComplete?: boolean;
  isReasoningStreaming?: boolean;
};

const models = [
  { id: "grok-3", name: "Grok-3" },
  { id: "grok-2-1212", name: "Grok-2-1212" },
];

const mockMessages: MessageType[] = [
  {
    avatar: "",
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content: "Can you explain how to use React hooks effectively?",
      },
    ],
    name: "Hayden Bleasel",
  },
  {
    avatar: "",
    key: nanoid(),
    from: "assistant",
    sources: [
      {
        href: "https://react.dev/reference/react",
        title: "React Documentation",
      },
      {
        href: "https://react.dev/reference/react-dom",
        title: "React DOM Documentation",
      },
    ],
    tools: [
      {
        name: "mcp",
        description: "Searching React documentation",
        status: "input-available",
        parameters: {
          query: "React hooks best practices",
          source: "react.dev",
        },
        result: `{
  "query": "React hooks best practices",
  "results": [
    {
      "title": "Rules of Hooks",
      "url": "https://react.dev/warnings/invalid-hook-call-warning",
      "snippet": "Hooks must be called at the top level of your React function components or custom hooks. Don't call hooks inside loops, conditions, or nested functions."
    },
    {
      "title": "useState Hook",
      "url": "https://react.dev/reference/react/useState",
      "snippet": "useState is a React Hook that lets you add state to your function components. It returns an array with two values: the current state and a function to update it."
    },
    {
      "title": "useEffect Hook",
      "url": "https://react.dev/reference/react/useEffect",
      "snippet": "useEffect lets you synchronize a component with external systems. It runs after render and can be used to perform side effects like data fetching."
    }
  ]
}`,
        error: undefined,
      },
    ],
    versions: [
      {
        id: nanoid(),
        content: `# React Hooks Best Practices

React hooks are a powerful feature that let you use state and other React features without writing classes. Here are some tips for using them effectively:

## Rules of Hooks

1. **Only call hooks at the top level** of your component or custom hooks
2. **Don't call hooks inside loops, conditions, or nested functions**

## Common Hooks

- **useState**: For local component state
- **useEffect**: For side effects like data fetching
- **useContext**: For consuming context
- **useReducer**: For complex state logic
- **useCallback**: For memoizing functions
- **useMemo**: For memoizing values

## Example of useState and useEffect

\`\`\`jsx
function ProfilePage({ userId }) {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    // This runs after render and when userId changes
    fetchUser(userId).then(userData => {
      setUser(userData);
    });
  }, [userId]);
  
  return user ? <Profile user={user} /> : <Loading />;
}
\`\`\`

Would you like me to explain any specific hook in more detail?`,
      },
    ],
    name: "OpenAI",
  },
  {
    avatar: "",
    key: nanoid(),
    from: "user",
    versions: [
      {
        id: nanoid(),
        content:
          "Yes, could you explain useCallback and useMemo in more detail? When should I use one over the other?",
      },
      {
        id: nanoid(),
        content:
          "I'm particularly interested in understanding the performance implications of useCallback and useMemo. Could you break down when each is most appropriate?",
      },
      {
        id: nanoid(),
        content:
          "Thanks for the overview! Could you dive deeper into the specific use cases where useCallback and useMemo make the biggest difference in React applications?",
      },
    ],
    name: "Hayden Bleasel",
  },
  {
    avatar: "",
    key: nanoid(),
    from: "assistant",
    reasoning: {
      content: `The user is asking for a detailed explanation of useCallback and useMemo. I should provide a clear and concise explanation of each hook's purpose and how they differ.
      
The useCallback hook is used to memoize functions to prevent unnecessary re-renders of child components that receive functions as props.

The useMemo hook is used to memoize values to avoid expensive recalculations on every render.

Both hooks help with performance optimization, but they serve different purposes.`,
      duration: 10,
    },
    versions: [
      {
        id: nanoid(),
        content: `## useCallback vs useMemo

Both hooks help with **performance optimization**, but they serve _different purposes_:

### useCallback

\`useCallback\` memoizes __functions__ to prevent unnecessary re-renders of child components that receive functions as props.

\`\`\`jsx
// Without useCallback - a new function is created on every render
const handleClick = () => {
  console.log(count);
};

// With useCallback - the function is only recreated when dependencies change
const handleClick = useCallback(() => {
  console.log(count);
}, [count]);
\`\`\`

### useMemo

\`useMemo\` memoizes *values* to avoid expensive recalculations on every render.

\`\`\`jsx
// Without useMemo - expensive calculation runs on every render
const sortedList = expensiveSort(items);

// With useMemo - calculation only runs when items change
const sortedList = useMemo(() => expensiveSort(items), [items]);
\`\`\`

### When to use which?

- Use **useCallback** when:
  - Passing callbacks to optimized child components that rely on reference equality
  - Working with event handlers that you pass to child components

- Use **useMemo** when:
  - You have computationally expensive calculations
  - You want to avoid recreating objects that are used as dependencies for other hooks

### Performance Note

Don't overuse these hooks! They come with their own overhead. Only use them when you have identified a genuine performance issue.

### ~~Legacy Patterns~~

Remember that these ~~outdated approaches~~ should be avoided:
- ~~Class components for simple state~~ - Use \`useState\` instead
- ~~Manual event listener cleanup~~ - Let \`useEffect\` handle it`,
      },
    ],
    name: "OpenAI",
  },
];

const mockResponses = [
  "That's a great question! Let me help you understand this concept better. The key thing to remember is that proper implementation requires careful consideration of the underlying principles and best practices in the field.",
  "I'd be happy to explain this topic in detail. From my understanding, there are several important factors to consider when approaching this problem. Let me break it down step by step for you.",
  "This is an interesting topic that comes up frequently. The solution typically involves understanding the core concepts and applying them in the right context. Here's what I recommend...",
  "Great choice of topic! This is something that many developers encounter. The approach I'd suggest is to start with the fundamentals and then build up to more complex scenarios.",
  "That's definitely worth exploring. From what I can see, the best way to handle this is to consider both the theoretical aspects and practical implementation details.",
];

const Example = () => {
  const [model, setModel] = useState<string>(models[0].id);
  const [text, setText] = useState<string>("");
  const [useWebSearch, setUseWebSearch] = useState<boolean>(false);
  const [useMicrophone, setUseMicrophone] = useState<boolean>(false);
  const [status, setStatus] = useState<
    "submitted" | "streaming" | "ready" | "error"
  >("ready");
  const [messages, setMessages] = useState<MessageType[]>([]);
  const [streamingMessageId, setStreamingMessageId] = useState<string | null>(
    null
  );

  const streamReasoning = async (
    messageKey: string,
    versionId: string,
    reasoningContent: string
  ) => {
    const words = reasoningContent.split(" ");
    let currentContent = "";

    for (let i = 0; i < words.length; i++) {
      currentContent += (i > 0 ? " " : "") + words[i];

      setMessages((prev) =>
        prev.map((msg) => {
          if (msg.key === messageKey) {
            return {
              ...msg,
              reasoning: msg.reasoning
                ? { ...msg.reasoning, content: currentContent }
                : undefined,
            };
          }
          return msg;
        })
      );

      await new Promise((resolve) =>
        setTimeout(resolve, Math.random() * 30 + 20)
      );
    }

    // Mark reasoning as complete
    setMessages((prev) =>
      prev.map((msg) => {
        if (msg.key === messageKey) {
          return {
            ...msg,
            isReasoningComplete: true,
            isReasoningStreaming: false,
          };
        }
        return msg;
      })
    );
  };

  const streamContent = async (
    messageKey: string,
    versionId: string,
    content: string
  ) => {
    const words = content.split(" ");
    let currentContent = "";

    for (let i = 0; i < words.length; i++) {
      currentContent += (i > 0 ? " " : "") + words[i];

      setMessages((prev) =>
        prev.map((msg) => {
          if (msg.key === messageKey) {
            return {
              ...msg,
              versions: msg.versions.map((v) =>
                v.id === versionId ? { ...v, content: currentContent } : v
              ),
            };
          }
          return msg;
        })
      );

      await new Promise((resolve) =>
        setTimeout(resolve, Math.random() * 50 + 25)
      );
    }

    // Mark content as complete
    setMessages((prev) =>
      prev.map((msg) => {
        if (msg.key === messageKey) {
          return { ...msg, isContentComplete: true };
        }
        return msg;
      })
    );
  };

  const streamResponse = useCallback(
    async (
      messageKey: string,
      versionId: string,
      content: string,
      reasoning?: { content: string; duration: number }
    ) => {
      setStatus("streaming");
      setStreamingMessageId(versionId);

      // First stream the reasoning if it exists
      if (reasoning) {
        await streamReasoning(messageKey, versionId, reasoning.content);
        await new Promise((resolve) => setTimeout(resolve, 500)); // Pause between reasoning and content
      }

      // Then stream the content
      await streamContent(messageKey, versionId, content);

      setStatus("ready");
      setStreamingMessageId(null);
    },
    []
  );

  const streamMessage = useCallback(
    async (message: MessageType) => {
      if (message.from === "user") {
        setMessages((prev) => [...prev, message]);
        return;
      }

      // Add empty assistant message with reasoning structure
      const newMessage = {
        ...message,
        versions: message.versions.map((v) => ({ ...v, content: "" })),
        reasoning: message.reasoning
          ? { ...message.reasoning, content: "" }
          : undefined,
        isReasoningComplete: false,
        isContentComplete: false,
        isReasoningStreaming: !!message.reasoning,
      };

      setMessages((prev) => [...prev, newMessage]);

      // Get the first version for streaming
      const firstVersion = message.versions[0];
      if (!firstVersion) return;

      // Stream the response
      await streamResponse(
        newMessage.key,
        firstVersion.id,
        firstVersion.content,
        message.reasoning
      );
    },
    [streamResponse]
  );

  const addUserMessage = useCallback(
    (content: string) => {
      const userMessage: MessageType = {
        key: `user-${Date.now()}`,
        from: "user",
        versions: [
          {
            id: `user-${Date.now()}`,
            content,
          },
        ],
        avatar: "",
        name: "User",
      };

      setMessages((prev) => [...prev, userMessage]);

      setTimeout(() => {
        const assistantMessageKey = `assistant-${Date.now()}`;
        const assistantMessageId = `version-${Date.now()}`;
        const randomResponse =
          mockResponses[Math.floor(Math.random() * mockResponses.length)];

        // Create reasoning for some responses
        const shouldHaveReasoning = Math.random() > 0.5;
        const reasoning = shouldHaveReasoning
          ? {
              content:
                "Let me think about this question carefully. I need to provide a comprehensive and helpful response that addresses the user's needs while being clear and concise.",
              duration: 3,
            }
          : undefined;

        const assistantMessage: MessageType = {
          key: assistantMessageKey,
          from: "assistant",
          versions: [
            {
              id: assistantMessageId,
              content: "",
            },
          ],
          name: "Assistant",
          avatar: "",
          reasoning: reasoning ? { ...reasoning, content: "" } : undefined,
          isReasoningComplete: false,
          isContentComplete: false,
          isReasoningStreaming: !!reasoning,
        };

        setMessages((prev) => [...prev, assistantMessage]);
        streamResponse(
          assistantMessageKey,
          assistantMessageId,
          randomResponse,
          reasoning
        );
      }, 500);
    },
    [streamResponse]
  );

  useEffect(() => {
    // Reset state on mount to ensure fresh component
    setMessages([]);

    const processMessages = async () => {
      for (let i = 0; i < mockMessages.length; i++) {
        await streamMessage(mockMessages[i]);

        if (i < mockMessages.length - 1) {
          await new Promise((resolve) => setTimeout(resolve, 1000));
        }
      }
    };

    // Small delay to ensure state is reset before starting
    const timer = setTimeout(() => {
      processMessages();
    }, 100);

    // Cleanup function to cancel any ongoing operations
    return () => {
      clearTimeout(timer);
      setMessages([]);
    };
  }, [streamMessage]);

  const handleSubmit = (message: PromptInputMessage) => {
    const hasText = Boolean(message.text);
    const hasAttachments = Boolean(message.files?.length);

    if (!(hasText || hasAttachments)) {
      return;
    }

    setStatus("submitted");
    addUserMessage(message.text || "Sent with attachments");
    setText("");
  };

  const handleFileAction = (action: string) => {
    toast.success("File action", {
      description: action,
    });
  };

  const handleSuggestionClick = (suggestion: string) => {
    setStatus("submitted");
    addUserMessage(suggestion);
  };

  return (
    <div className="relative flex size-full flex-col divide-y overflow-hidden bg-secondary">
      <Conversation>
        <ConversationContent>
          {messages.map(({ versions, ...message }) => (
            <Branch defaultBranch={0} key={message.key}>
              <BranchMessages>
                {versions.map((version) => (
                  <Message
                    from={message.from}
                    key={`${message.key}-${version.id}`}
                  >
                    <div>
                      {message.sources?.length && (
                        <Sources>
                          <SourcesTrigger count={message.sources.length} />
                          <SourcesContent>
                            {message.sources.map((source) => (
                              <Source
                                href={source.href}
                                key={source.href}
                                title={source.title}
                              />
                            ))}
                          </SourcesContent>
                        </Sources>
                      )}
                      {message.reasoning && (
                        <Reasoning
                          duration={message.reasoning.duration}
                          isStreaming={message.isReasoningStreaming}
                        >
                          <ReasoningTrigger />
                          <ReasoningContent>
                            {message.reasoning.content}
                          </ReasoningContent>
                        </Reasoning>
                      )}
                      {(message.from === "user" ||
                        message.isReasoningComplete ||
                        !message.reasoning) && (
                        <MessageContent
                          className={cn(
                            "group-[.is-user]:rounded-[24px] group-[.is-user]:rounded-br-sm group-[.is-user]:border group-[.is-user]:bg-background group-[.is-user]:text-foreground",
                            "group-[.is-assistant]:bg-transparent group-[.is-assistant]:p-0 group-[.is-assistant]:text-foreground"
                          )}
                        >
                          <Response>{version.content}</Response>
                        </MessageContent>
                      )}
                    </div>
                  </Message>
                ))}
              </BranchMessages>
              {versions.length > 1 && (
                <BranchSelector className="px-0" from={message.from}>
                  <BranchPrevious />
                  <BranchPage />
                  <BranchNext />
                </BranchSelector>
              )}
            </Branch>
          ))}
        </ConversationContent>
        <ConversationScrollButton />
      </Conversation>
      <div className="grid shrink-0 gap-4 p-4">
        <PromptInput
          className="divide-y-0 rounded-[28px]"
          onSubmit={handleSubmit}
        >
          <PromptInputTextarea
            className="px-5 md:text-base"
            onChange={(event) => setText(event.target.value)}
            placeholder="How can Grok help?"
            value={text}
          />
          <PromptInputToolbar className="p-2.5">
            <PromptInputTools>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <PromptInputButton
                    className="!rounded-full border text-foreground"
                    variant="outline"
                  >
                    <PaperclipIcon size={16} />
                    <span className="sr-only">Attach</span>
                  </PromptInputButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="start">
                  <DropdownMenuItem
                    onClick={() => handleFileAction("upload-file")}
                  >
                    <FileIcon className="mr-2" size={16} />
                    Upload file
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("upload-photo")}
                  >
                    <ImageIcon className="mr-2" size={16} />
                    Upload photo
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("take-screenshot")}
                  >
                    <ScreenShareIcon className="mr-2" size={16} />
                    Take screenshot
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleFileAction("take-photo")}
                  >
                    <CameraIcon className="mr-2" size={16} />
                    Take photo
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              <div className="flex items-center rounded-full border">
                <PromptInputButton
                  className="!rounded-l-full text-foreground"
                  onClick={() => setUseWebSearch(!useWebSearch)}
                  variant="ghost"
                >
                  <SearchIcon size={16} />
                  <span>DeepSearch</span>
                </PromptInputButton>
                <div className="h-full w-px bg-border" />
                <PromptInputButton
                  className="rounded-r-full"
                  size="icon"
                  variant="ghost"
                >
                  <ChevronDownIcon size={16} />
                </PromptInputButton>
              </div>
              <PromptInputButton
                className="!rounded-full text-foreground"
                variant="outline"
              >
                <LightbulbIcon size={16} />
                <span>Think</span>
              </PromptInputButton>
            </PromptInputTools>
            <div className="flex items-center gap-2">
              <PromptInputModelSelect onValueChange={setModel} value={model}>
                <PromptInputModelSelectTrigger>
                  <PromptInputModelSelectValue />
                </PromptInputModelSelectTrigger>
                <PromptInputModelSelectContent>
                  {models.map((model) => (
                    <PromptInputModelSelectItem key={model.id} value={model.id}>
                      {model.name}
                    </PromptInputModelSelectItem>
                  ))}
                </PromptInputModelSelectContent>
              </PromptInputModelSelect>
              <PromptInputButton
                className="rounded-full bg-foreground font-medium text-background"
                onClick={() => setUseMicrophone(!useMicrophone)}
                variant="default"
              >
                <AudioWaveformIcon size={16} />
                <span className="sr-only">Voice</span>
              </PromptInputButton>
            </div>
          </PromptInputToolbar>
        </PromptInput>
      </div>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/image.tsx">
"use client";

import { Image } from "@repo/elements/image";

const exampleImage = {
  base64:
    "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",
  mediaType: "image/jpeg",
  uint8Array: new Uint8Array([]),
};

const Example = () => (
  <Image
    {...exampleImage}
    alt="Example generated image"
    className="aspect-square h-[150px] border"
  />
);

export default Example;
</file>

<file path="packages/examples/src/inline-citation.tsx">
"use client";

import {
  InlineCitation,
  InlineCitationCard,
  InlineCitationCardBody,
  InlineCitationCardTrigger,
  InlineCitationCarousel,
  InlineCitationCarouselContent,
  InlineCitationCarouselHeader,
  InlineCitationCarouselIndex,
  InlineCitationCarouselItem,
  InlineCitationCarouselNext,
  InlineCitationCarouselPrev,
  InlineCitationSource,
  InlineCitationText,
} from "@repo/elements/inline-citation";

const citation = {
  text: "The technology continues to evolve rapidly, with new breakthroughs being announced regularly",
  sources: [
    {
      title: "Advances in Natural Language Processing",
      url: "https://example.com/nlp-advances",
      description:
        "A comprehensive study on the recent developments in natural language processing technologies and their applications.",
    },
    {
      title: "Breakthroughs in Machine Learning",
      url: "https://mlnews.org/breakthroughs",
      description:
        "An overview of the most significant machine learning breakthroughs in the past year.",
    },
    {
      title: "AI in Healthcare: Current Trends",
      url: "https://healthai.com/trends",
      description:
        "A report on how artificial intelligence is transforming healthcare and diagnostics.",
    },
    {
      title: "Ethics of Artificial Intelligence",
      url: "https://aiethics.org/overview",
      description:
        "A discussion on the ethical considerations and challenges in the development of AI.",
    },
    {
      title: "Scaling Deep Learning Models",
      url: "https://deeplearninghub.com/scaling-models",
      description:
        "Insights into the technical challenges and solutions for scaling deep learning architectures.",
    },
    {
      title: "Natural Language Understanding Benchmarks",
      url: "https://nlubenchmarks.com/latest",
      description:
        "A summary of the latest benchmarks and evaluation metrics for natural language understanding systems.",
    },
  ],
};

const Example = () => {
  return (
    <p className="text-sm leading-relaxed">
      According to recent studies, artificial intelligence has shown remarkable
      progress in natural language processing.{" "}
      <InlineCitation>
        <InlineCitationText>{citation.text}</InlineCitationText>
        <InlineCitationCard>
          <InlineCitationCardTrigger
            sources={citation.sources.map((source) => source.url)}
          />
          <InlineCitationCardBody>
            <InlineCitationCarousel>
              <InlineCitationCarouselHeader>
                <InlineCitationCarouselPrev />
                <InlineCitationCarouselNext />
                <InlineCitationCarouselIndex />
              </InlineCitationCarouselHeader>
              <InlineCitationCarouselContent>
                {citation.sources.map((source) => (
                  <InlineCitationCarouselItem key={source.url}>
                    <InlineCitationSource
                      description={source.description}
                      title={source.title}
                      url={source.url}
                    />
                  </InlineCitationCarouselItem>
                ))}
              </InlineCitationCarouselContent>
            </InlineCitationCarousel>
          </InlineCitationCardBody>
        </InlineCitationCard>
      </InlineCitation>
      .
    </p>
  );
};

export default Example;
</file>

<file path="packages/examples/src/loader-custom.tsx">
"use client";

import { Loader } from "@repo/elements/loader";

const Example = () => {
  return (
    <div className="grid grid-cols-2 gap-6 p-8 md:grid-cols-4">
      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">Blue</p>
        <Loader className="text-blue-500" size={24} />
      </div>

      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">Green</p>
        <Loader className="text-green-500" size={24} />
      </div>

      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">Purple</p>
        <Loader className="text-purple-500" size={24} />
      </div>

      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">Orange</p>
        <Loader className="text-orange-500" size={24} />
      </div>

      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">Slow Animation</p>
        <Loader
          className="animate-spin text-blue-500"
          size={24}
          style={{ animationDuration: "3s" }}
        />
      </div>

      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">Fast Animation</p>
        <Loader
          className="animate-spin text-red-500"
          size={24}
          style={{ animationDuration: "0.5s" }}
        />
      </div>

      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">With Background</p>
        <div className="flex items-center justify-center rounded-lg bg-gray-100 p-3">
          <Loader className="text-gray-700" size={24} />
        </div>
      </div>

      <div className="text-center">
        <p className="mb-2 text-gray-600 text-sm">Dark Background</p>
        <div className="flex items-center justify-center rounded-lg bg-gray-800 p-3">
          <Loader className="text-white" size={24} />
        </div>
      </div>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/loader-sizes.tsx">
"use client";

import { Loader } from "@repo/elements/loader";

const Example = () => (
  <div className="flex items-center gap-8 p-8">
    <div className="text-center">
      <p className="mb-2 text-gray-600 text-sm">Small (16px)</p>
      <Loader size={16} />
    </div>

    <div className="text-center">
      <p className="mb-2 text-gray-600 text-sm">Medium (24px)</p>
      <Loader size={24} />
    </div>

    <div className="text-center">
      <p className="mb-2 text-gray-600 text-sm">Large (32px)</p>
      <Loader size={32} />
    </div>

    <div className="text-center">
      <p className="mb-2 text-gray-600 text-sm">Extra Large (48px)</p>
      <Loader size={48} />
    </div>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/loader.tsx">
"use client";

import { Loader } from "@repo/elements/loader";

const Example = () => {
  return (
    <div className="flex items-center justify-center p-8">
      <Loader />
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/message-markdown.tsx">
"use client";

import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import { Response } from "@repo/elements/response";
import { useEffect, useState } from "react";

const assistantMessageTokens = [
  "To",
  " get",
  " the",
  " **",
  "weather",
  " in",
  " Tokyo",
  "**",
  " using",
  " an",
  " API",
  " call",
  ",",
  " you",
  " can",
  " use",
  " the",
  " [",
  "OpenWeatherMap",
  "](",
  "https://openweathermap.org/api",
  ")",
  " API",
  ".",
  " After",
  " signing",
  " up",
  ",",
  " you",
  " can",
  " make",
  " a",
  " request",
  " to",
  " their",
  " API",
  ":",
  "\n\n",
  "```",
  "bash",
  "\n",
  "curl",
  " -X",
  " GET",
  ' "https://api.openweathermap.org/data/2.5/weather?q=Tokyo&appid=YOUR_API_KEY"',
  " \\",
  "\n",
  "  --header",
  ' "Content-Type:',
  ' application/json"',
  " \\",
  "\n",
  "  --header",
  ' "Accept:',
  ' application/json"',
  "\n",
  "```",
  "\n\n",
  "This",
  " will",
  " return",
  " a",
  " JSON",
  " object",
  " with",
  " the",
  " weather",
  " data",
  " for",
  " Tokyo",
  ".",
];

const Example = () => {
  const [content, setContent] = useState("");

  useEffect(() => {
    let currentContent = "";
    let index = 0;

    const interval = setInterval(() => {
      if (index < assistantMessageTokens.length) {
        currentContent += assistantMessageTokens[index];
        setContent(currentContent);
        index++;
      } else {
        clearInterval(interval);
      }
    }, 100);

    return () => clearInterval(interval);
  }, []);

  return (
    <>
      <Message from="user">
        <MessageContent>
          <Response>What is the weather in Tokyo?</Response>
        </MessageContent>
        <MessageAvatar
          name="Hayden Bleasel"
          src="https://github.com/haydenbleasel.png"
        />
      </Message>
      <Message from="assistant">
        <MessageContent>
          <Response>{content}</Response>
        </MessageContent>
        <MessageAvatar name="OpenAI" src="https://github.com/openai.png" />
      </Message>
    </>
  );
};

export default Example;
</file>

<file path="packages/examples/src/message.tsx">
"use client";

import { Message, MessageAvatar, MessageContent } from "@repo/elements/message";
import { nanoid } from "nanoid";

const messages: {
  key: string;
  from: "user" | "assistant";
  content: string;
  avatar: string;
  name: string;
}[] = [
  {
    key: nanoid(),
    from: "user",
    content: "Hello, how are you?",
    avatar: "https://github.com/haydenbleasel.png",
    name: "Hayden Bleasel",
  },
];

const Example = () => (
  <>
    {messages.map(({ content, ...message }) => (
      <Message from={message.from} key={message.key}>
        <MessageContent>{content}</MessageContent>
        <MessageAvatar name={message.name} src={message.avatar} />
      </Message>
    ))}
  </>
);

export default Example;
</file>

<file path="packages/examples/src/open-in-chat.tsx">
"use client";

import {
  OpenIn,
  OpenInChatGPT,
  OpenInClaude,
  OpenInContent,
  OpenInScira,
  OpenInT3,
  OpenInTrigger,
  OpenInv0,
} from "@repo/elements/open-in-chat";

const Example = () => {
  const sampleQuery = "How can I implement authentication in Next.js?";

  return (
    <OpenIn>
      <OpenInTrigger />
      <OpenInContent>
        <OpenInChatGPT query={sampleQuery} />
        <OpenInClaude query={sampleQuery} />
        <OpenInT3 query={sampleQuery} />
        <OpenInScira query={sampleQuery} />
        <OpenInv0 query={sampleQuery} />
      </OpenInContent>
    </OpenIn>
  );
};

export default Example;
</file>

<file path="packages/examples/src/prompt-input.tsx">
"use client";

import {
  PromptInput,
  PromptInputActionAddAttachments,
  PromptInputActionMenu,
  PromptInputActionMenuContent,
  PromptInputActionMenuTrigger,
  PromptInputAttachment,
  PromptInputAttachments,
  PromptInputBody,
  PromptInputButton,
  type PromptInputMessage,
  PromptInputModelSelect,
  PromptInputModelSelectContent,
  PromptInputModelSelectItem,
  PromptInputModelSelectTrigger,
  PromptInputModelSelectValue,
  PromptInputSubmit,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
} from "@repo/elements/prompt-input";
import { GlobeIcon, MicIcon } from "lucide-react";
import { useState } from "react";

const models = [
  { id: "gpt-4", name: "GPT-4" },
  { id: "gpt-3.5-turbo", name: "GPT-3.5 Turbo" },
  { id: "claude-2", name: "Claude 2" },
  { id: "claude-instant", name: "Claude Instant" },
  { id: "palm-2", name: "PaLM 2" },
  { id: "llama-2-70b", name: "Llama 2 70B" },
  { id: "llama-2-13b", name: "Llama 2 13B" },
  { id: "cohere-command", name: "Command" },
  { id: "mistral-7b", name: "Mistral 7B" },
];

const SUBMITTING_TIMEOUT = 200;
const STREAMING_TIMEOUT = 2000;

const Example = () => {
  const [text, setText] = useState<string>("");
  const [model, setModel] = useState<string>(models[0].id);
  const [status, setStatus] = useState<
    "submitted" | "streaming" | "ready" | "error"
  >("ready");

  const handleSubmit = (message: PromptInputMessage) => {
    const hasText = Boolean(message.text);
    const hasAttachments = Boolean(message.files?.length);

    if (!(hasText || hasAttachments)) {
      return;
    }

    setStatus("submitted");

    console.log("Submitting message:", message);

    setTimeout(() => {
      setStatus("streaming");
    }, SUBMITTING_TIMEOUT);

    setTimeout(() => {
      setStatus("ready");
    }, STREAMING_TIMEOUT);
  };

  return (
    <PromptInput globalDrop multiple onSubmit={handleSubmit}>
      <PromptInputBody>
        <PromptInputAttachments>
          {(attachment) => <PromptInputAttachment data={attachment} />}
        </PromptInputAttachments>
        <PromptInputTextarea
          onChange={(e) => setText(e.target.value)}
          value={text}
        />
      </PromptInputBody>
      <PromptInputToolbar>
        <PromptInputTools>
          <PromptInputActionMenu>
            <PromptInputActionMenuTrigger />
            <PromptInputActionMenuContent>
              <PromptInputActionAddAttachments />
            </PromptInputActionMenuContent>
          </PromptInputActionMenu>
          <PromptInputButton>
            <MicIcon size={16} />
          </PromptInputButton>
          <PromptInputButton>
            <GlobeIcon size={16} />
            <span>Search</span>
          </PromptInputButton>
          <PromptInputModelSelect onValueChange={setModel} value={model}>
            <PromptInputModelSelectTrigger>
              <PromptInputModelSelectValue />
            </PromptInputModelSelectTrigger>
            <PromptInputModelSelectContent>
              {models.map((modelOption) => (
                <PromptInputModelSelectItem
                  key={modelOption.id}
                  value={modelOption.id}
                >
                  {modelOption.name}
                </PromptInputModelSelectItem>
              ))}
            </PromptInputModelSelectContent>
          </PromptInputModelSelect>
        </PromptInputTools>
        <PromptInputSubmit status={status} />
      </PromptInputToolbar>
    </PromptInput>
  );
};

export default Example;
</file>

<file path="packages/examples/src/reasoning.tsx">
"use client";

import {
  Reasoning,
  ReasoningContent,
  ReasoningTrigger,
} from "@repo/elements/reasoning";
import { useCallback, useEffect, useState } from "react";

const reasoningSteps = [
  "Let me think about this problem step by step.",
  "\n\nFirst, I need to understand what the user is asking for.",
  "\n\nThey want a reasoning component that opens automatically when streaming begins and closes when streaming finishes. The component should be composable and follow existing patterns in the codebase.",
  "\n\nThis seems like a collapsible component with state management would be the right approach.",
].join("");

const Example = () => {
  const [content, setContent] = useState("");
  const [isStreaming, setIsStreaming] = useState(false);
  const [currentTokenIndex, setCurrentTokenIndex] = useState(0);
  const [tokens, setTokens] = useState<string[]>([]);

  // Function to chunk text into fake tokens of 3-4 characters
  const chunkIntoTokens = useCallback((text: string): string[] => {
    const tokens: string[] = [];
    let i = 0;
    while (i < text.length) {
      const chunkSize = Math.floor(Math.random() * 2) + 3; // Random size between 3-4
      tokens.push(text.slice(i, i + chunkSize));
      i += chunkSize;
    }
    return tokens;
  }, []);

  useEffect(() => {
    const tokenizedSteps = chunkIntoTokens(reasoningSteps);
    setTokens(tokenizedSteps);
    setContent("");
    setCurrentTokenIndex(0);
    setIsStreaming(true);
  }, [chunkIntoTokens]);

  useEffect(() => {
    if (!isStreaming || currentTokenIndex >= tokens.length) {
      if (isStreaming) {
        setIsStreaming(false);
      }
      return;
    }

    const timer = setTimeout(() => {
      setContent((prev) => prev + tokens[currentTokenIndex]);
      setCurrentTokenIndex((prev) => prev + 1);
    }, 25); // Faster interval since we're streaming smaller chunks

    return () => clearTimeout(timer);
  }, [isStreaming, currentTokenIndex, tokens]);

  return (
    <div className="w-full p-4" style={{ height: "300px" }}>
      <Reasoning className="w-full" isStreaming={isStreaming}>
        <ReasoningTrigger />
        <ReasoningContent>{content}</ReasoningContent>
      </Reasoning>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/response.tsx">
"use client";

import { Response } from "@repo/elements/response";
import { useEffect, useState } from "react";

const tokens = [
  "### Hello",
  " World",
  "\n\n",
  "This",
  " is",
  " a",
  " **mark",
  "down",
  "**",
  " response",
  " from",
  " an",
  " AI",
  " model",
  ".",
  "\n\n",
  "---",
  "\n\n",
  "## Tables",
  "\n\n",
  "| Column 1",
  " | Column 2",
  " | Column 3",
  " |",
  "\n",
  "|----------|----------|----------|",
  "\n",
  "| Row 1, Col 1",
  " | Row 1, Col 2",
  " | Row 1, Col 3",
  " |",
  "\n",
  "| Row 2, Col 1",
  " | Row 2, Col 2",
  " | Row 2, Col 3",
  " |",
  "\n",
  "| Row 3, Col 1",
  " | Row 3, Col 2",
  " | Row 3, Col 3",
  " |",
  "\n\n",
  "## Blockquotes",
  "\n\n",
  "> This",
  " is",
  " a",
  " blockquote.",
  " It",
  " can",
  " contain",
  " multiple",
  " lines",
  " and",
  " **formatted**",
  " text.",
  "\n",
  ">",
  "\n",
  "> It",
  " can",
  " even",
  " have",
  " multiple",
  " paragraphs.",
  "\n\n",
  "## Inline",
  " Code",
  "\n\n",
  "Here",
  " is",
  " some",
  " text",
  " with",
  " `inline",
  " code`",
  " in",
  " the",
  " middle",
  " of",
  " a",
  " sentence.",
  " You",
  " can",
  " also",
  " use",
  " `const",
  " x",
  " =",
  " 42`",
  " for",
  " variable",
  " declarations.",
  "\n\n",
  "## Code",
  " Blocks",
  "\n\n",
  "```",
  "javascript",
  "\n",
  "const",
  " greeting",
  " = ",
  "'Hello, world!'",
  ";",
  "\n",
  "console",
  ".",
  "log",
  "(",
  "greeting",
  ")",
  ";",
  "\n",
  "```",
  "\n\n",
  "## Math",
  "\n\n",
  "It",
  " also",
  " supports",
  " math",
  " equations",
  ", ",
  "like",
  " this",
  " inline",
  " one",
  ": ",
  "$",
  "E",
  " = ",
  "mc",
  "^2",
  "$",
  ".",
  "\n\n",
  "And",
  " here",
  " is",
  " a",
  " display",
  " equation",
  " for",
  " the",
  " quadratic",
  " formula",
  ":",
  "\n\n",
  "$$",
  "\n",
  "x",
  " = ",
  "\\frac",
  "{",
  "-b",
  " \\pm",
  " \\sqrt",
  "{",
  "b^2",
  " -",
  " 4ac",
  "}",
  "}",
  "{",
  "2a",
  "}",
  "\n",
  "$$",
  "\n\n",
  "## Links",
  " and",
  " Lists",
  "\n\n",
  "Here's",
  " a",
  " [",
  "link",
  "](",
  "https://example.com",
  ")",
  " and",
  " some",
  " more",
  " text",
  " with",
  " an",
  " unordered",
  " list",
  ":",
  "\n\n",
  "-",
  " Item",
  " one",
  "\n",
  "-",
  " Item",
  " two",
  "\n",
  "-",
  " Item",
  " three",
  "\n\n",
  "## Ordered",
  " Lists",
  "\n\n",
  "1.",
  " First",
  " item",
  "\n",
  "2.",
  " Second",
  " item",
  "\n",
  "3.",
  " Third",
  " item",
];

const Example = () => {
  const [content, setContent] = useState("");

  useEffect(() => {
    let currentContent = "";
    let index = 0;

    const interval = setInterval(() => {
      if (index < tokens.length) {
        currentContent += tokens[index];
        setContent(currentContent);
        index++;
      } else {
        clearInterval(interval);
      }
    }, 100);

    return () => clearInterval(interval);
  }, []);

  return <Response className="h-[500px]">{content}</Response>;
};

export default Example;
</file>

<file path="packages/examples/src/sources-custom.tsx">
"use client";

import {
  Source,
  Sources,
  SourcesContent,
  SourcesTrigger,
} from "@repo/elements/sources";
import { ChevronDownIcon, ExternalLinkIcon } from "lucide-react";

const sources = [
  { href: "https://stripe.com/docs/api", title: "Stripe API Documentation" },
  { href: "https://docs.github.com/en/rest", title: "GitHub REST API" },
  {
    href: "https://docs.aws.amazon.com/sdk-for-javascript/",
    title: "AWS SDK for JavaScript",
  },
];

const Example = () => (
  <div style={{ height: "110px" }}>
    <Sources>
      <SourcesTrigger count={sources.length}>
        <p className="font-medium">Using {sources.length} citations</p>
        <ChevronDownIcon className="size-4" />
      </SourcesTrigger>
      <SourcesContent>
        {sources.map((source) => (
          <Source href={source.href} key={source.href}>
            {source.title}
            <ExternalLinkIcon className="size-4" />
          </Source>
        ))}
      </SourcesContent>
    </Sources>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/sources.tsx">
"use client";

import {
  Source,
  Sources,
  SourcesContent,
  SourcesTrigger,
} from "@repo/elements/sources";

const sources = [
  { href: "https://stripe.com/docs/api", title: "Stripe API Documentation" },
  { href: "https://docs.github.com/en/rest", title: "GitHub REST API" },
  {
    href: "https://docs.aws.amazon.com/sdk-for-javascript/",
    title: "AWS SDK for JavaScript",
  },
];

const Example = () => (
  <div style={{ height: "110px" }}>
    <Sources>
      <SourcesTrigger count={sources.length} />
      <SourcesContent>
        {sources.map((source) => (
          <Source href={source.href} key={source.href} title={source.title} />
        ))}
      </SourcesContent>
    </Sources>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/suggestion-input.tsx">
"use client";

import {
  PromptInput,
  PromptInputButton,
  type PromptInputMessage,
  PromptInputModelSelect,
  PromptInputModelSelectContent,
  PromptInputModelSelectItem,
  PromptInputModelSelectTrigger,
  PromptInputModelSelectValue,
  PromptInputSubmit,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
} from "@repo/elements/prompt-input";
import { Suggestion, Suggestions } from "@repo/elements/suggestion";
import { GlobeIcon, MicIcon, PlusIcon, SendIcon } from "lucide-react";
import { nanoid } from "nanoid";
import { useState } from "react";

const suggestions: { key: string; value: string }[] = [
  { key: nanoid(), value: "What are the latest trends in AI?" },
  { key: nanoid(), value: "How does machine learning work?" },
  { key: nanoid(), value: "Explain quantum computing" },
  { key: nanoid(), value: "Best practices for React development" },
  { key: nanoid(), value: "Tell me about TypeScript benefits" },
  { key: nanoid(), value: "How to optimize database queries?" },
  { key: nanoid(), value: "What is the difference between SQL and NoSQL?" },
  { key: nanoid(), value: "Explain cloud computing basics" },
];

const models = [
  { id: "gpt-4", name: "GPT-4" },
  { id: "gpt-3.5-turbo", name: "GPT-3.5 Turbo" },
  { id: "claude-2", name: "Claude 2" },
  { id: "claude-instant", name: "Claude Instant" },
  { id: "palm-2", name: "PaLM 2" },
  { id: "llama-2-70b", name: "Llama 2 70B" },
  { id: "llama-2-13b", name: "Llama 2 13B" },
  { id: "cohere-command", name: "Command" },
  { id: "mistral-7b", name: "Mistral 7B" },
];

const Example = () => {
  const [model, setModel] = useState<string>(models[0].id);
  const [text, setText] = useState<string>("");

  const handleSubmit = (message: PromptInputMessage) => {
    const hasText = Boolean(message.text);
    const hasAttachments = Boolean(message.files?.length);

    if (!(hasText || hasAttachments)) {
      return;
    }

    console.log("Submitted message:", message.text || "Sent with attachments");
    console.log("Attached files:", message.files);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setText(suggestion);
  };

  return (
    <div className="grid gap-4">
      <Suggestions>
        {suggestions.map((suggestion) => (
          <Suggestion
            key={suggestion.key}
            onClick={handleSuggestionClick}
            suggestion={suggestion.value}
          />
        ))}
      </Suggestions>
      <PromptInput onSubmit={handleSubmit}>
        <PromptInputTextarea
          onChange={(e) => setText(e.target.value)}
          placeholder="Ask me about anything..."
          value={text}
        />
        <PromptInputToolbar>
          <PromptInputTools>
            <PromptInputButton>
              <PlusIcon size={16} />
            </PromptInputButton>
            <PromptInputButton>
              <MicIcon size={16} />
            </PromptInputButton>
            <PromptInputButton>
              <GlobeIcon size={16} />
              <span>Search</span>
            </PromptInputButton>
            <PromptInputModelSelect onValueChange={setModel} value={model}>
              <PromptInputModelSelectTrigger>
                <PromptInputModelSelectValue />
              </PromptInputModelSelectTrigger>
              <PromptInputModelSelectContent>
                {models.map((model) => (
                  <PromptInputModelSelectItem key={model.id} value={model.id}>
                    {model.name}
                  </PromptInputModelSelectItem>
                ))}
              </PromptInputModelSelectContent>
            </PromptInputModelSelect>
          </PromptInputTools>
          <PromptInputSubmit>
            <SendIcon size={16} />
          </PromptInputSubmit>
        </PromptInputToolbar>
      </PromptInput>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/suggestion.tsx">
"use client";

import { Suggestion, Suggestions } from "@repo/elements/suggestion";

const suggestions = [
  "What are the latest trends in AI?",
  "How does machine learning work?",
  "Explain quantum computing",
  "Best practices for React development",
  "Tell me about TypeScript benefits",
  "How to optimize database queries?",
  "What is the difference between SQL and NoSQL?",
  "Explain cloud computing basics",
];

const Example = () => {
  const handleSuggestionClick = (suggestion: string) => {
    console.log("Selected suggestion:", suggestion);
  };

  return (
    <Suggestions>
      {suggestions.map((suggestion) => (
        <Suggestion
          key={suggestion}
          onClick={handleSuggestionClick}
          suggestion={suggestion}
        />
      ))}
    </Suggestions>
  );
};

export default Example;
</file>

<file path="packages/examples/src/task.tsx">
"use client";

import { SiReact } from "@icons-pack/react-simple-icons";
import {
  Task,
  TaskContent,
  TaskItem,
  TaskItemFile,
  TaskTrigger,
} from "@repo/elements/task";
import { nanoid } from "nanoid";
import type { ReactNode } from "react";

const Example = () => {
  const tasks: { key: string; value: ReactNode }[] = [
    { key: nanoid(), value: 'Searching "app/page.tsx, components structure"' },
    {
      key: nanoid(),
      value: (
        <span className="inline-flex items-center gap-1" key="read-page-tsx">
          Read
          <TaskItemFile>
            <SiReact className="size-4" color="#149ECA" />
            <span>page.tsx</span>
          </TaskItemFile>
        </span>
      ),
    },
    { key: nanoid(), value: "Scanning 52 files" },
    { key: nanoid(), value: "Scanning 2 files" },
    {
      key: nanoid(),
      value: (
        <span className="inline-flex items-center gap-1" key="read-layout-tsx">
          Reading files
          <TaskItemFile>
            <SiReact className="size-4" color="#149ECA" />
            <span>layout.tsx</span>
          </TaskItemFile>
        </span>
      ),
    },
  ];

  return (
    <div style={{ height: "200px" }}>
      <Task className="w-full">
        <TaskTrigger title="Found project files" />
        <TaskContent>
          {tasks.map((task) => (
            <TaskItem key={task.key}>{task.value}</TaskItem>
          ))}
        </TaskContent>
      </Task>
    </div>
  );
};

export default Example;
</file>

<file path="packages/examples/src/tool-input-available.tsx">
"use client";

import { Tool, ToolContent, ToolHeader, ToolInput } from "@repo/elements/tool";
import { nanoid } from "nanoid";

const toolCall = {
  type: "tool-image_generation" as const,
  toolCallId: nanoid(),
  state: "input-available" as const,
  input: {
    prompt: "A futuristic cityscape at sunset with flying cars",
    style: "digital_art",
    resolution: "1024x1024",
    quality: "high",
  },
  output: undefined,
  errorText: undefined,
};

const Example = () => (
  <div style={{ height: "500px" }}>
    <Tool>
      <ToolHeader state={toolCall.state} type={toolCall.type} />
      <ToolContent>
        <ToolInput input={toolCall.input} />
      </ToolContent>
    </Tool>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/tool-input-streaming.tsx">
"use client";

import { Tool, ToolContent, ToolHeader, ToolInput } from "@repo/elements/tool";
import { nanoid } from "nanoid";

const toolCall = {
  type: "tool-web_search" as const,
  toolCallId: nanoid(),
  state: "input-streaming" as const,
  input: {
    query: "latest AI market trends 2024",
    max_results: 10,
    include_snippets: true,
  },
  output: undefined,
  errorText: undefined,
};

const Example = () => (
  <div style={{ height: "500px" }}>
    <Tool>
      <ToolHeader state={toolCall.state} type={toolCall.type} />
      <ToolContent>
        <ToolInput input={toolCall.input} />
      </ToolContent>
    </Tool>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/tool-output-available.tsx">
"use client";

import { CodeBlock } from "@repo/elements/code-block";
import {
  Tool,
  ToolContent,
  ToolHeader,
  ToolInput,
  ToolOutput,
} from "@repo/elements/tool";
import type { ToolUIPart } from "ai";
import { nanoid } from "nanoid";

const toolCall: ToolUIPart = {
  type: "tool-database_query" as const,
  toolCallId: nanoid(),
  state: "output-available" as const,
  input: {
    query: "SELECT COUNT(*) FROM users WHERE created_at >= ?",
    params: ["2024-01-01"],
    database: "analytics",
  },
  output: [
    {
      "User ID": 1,
      Name: "John Doe",
      Email: "john@example.com",
      "Created At": "2024-01-15",
    },
    {
      "User ID": 2,
      Name: "Jane Smith",
      Email: "jane@example.com",
      "Created At": "2024-01-20",
    },
    {
      "User ID": 3,
      Name: "Bob Wilson",
      Email: "bob@example.com",
      "Created At": "2024-02-01",
    },
    {
      "User ID": 4,
      Name: "Alice Brown",
      Email: "alice@example.com",
      "Created At": "2024-02-10",
    },
    {
      "User ID": 5,
      Name: "Charlie Davis",
      Email: "charlie@example.com",
      "Created At": "2024-02-15",
    },
  ],
  errorText: undefined,
};

const Example = () => (
  <div style={{ height: "500px" }}>
    <Tool>
      <ToolHeader state={toolCall.state} type={toolCall.type} />
      <ToolContent>
        <ToolInput input={toolCall.input} />
        {toolCall.state === "output-available" && (
          <ToolOutput
            errorText={toolCall.errorText}
            output={
              <CodeBlock
                code={JSON.stringify(toolCall.output)}
                language="json"
              />
            }
          />
        )}
      </ToolContent>
    </Tool>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/tool-output-error.tsx">
"use client";

import {
  Tool,
  ToolContent,
  ToolHeader,
  ToolInput,
  ToolOutput,
} from "@repo/elements/tool";
import type { ToolUIPart } from "ai";

const toolCall: ToolUIPart = {
  type: "tool-api_request" as const,
  toolCallId: "api_request_1",
  state: "output-error" as const,
  input: {
    url: "https://api.example.com/data",
    method: "GET",
    headers: {
      Authorization: "Bearer token123",
      "Content-Type": "application/json",
    },
    timeout: 5000,
  },
  output: undefined,
  errorText:
    "Connection timeout: The request took longer than 5000ms to complete. Please check your network connection and try again.",
};

const Example = () => (
  <div style={{ height: "500px" }}>
    <Tool>
      <ToolHeader state={toolCall.state} type={toolCall.type} />
      <ToolContent>
        <ToolInput input={toolCall.input} />
        {toolCall.state === "output-error" && (
          <ToolOutput errorText={toolCall.errorText} output={toolCall.output} />
        )}
      </ToolContent>
    </Tool>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/tool.tsx">
"use client";

import { Response } from "@repo/elements/response";
import {
  Tool,
  ToolContent,
  ToolHeader,
  ToolInput,
  ToolOutput,
} from "@repo/elements/tool";
import type { ToolUIPart } from "ai";
import { nanoid } from "nanoid";

const toolCall: ToolUIPart = {
  type: "tool-database_query" as const,
  toolCallId: nanoid(),
  state: "output-available" as const,
  input: {
    query: "SELECT COUNT(*) FROM users WHERE created_at >= ?",
    params: ["2024-01-01"],
    database: "analytics",
  },
  output: `| User ID | Name | Email | Created At |
|---------|------|-------|------------|
| 1 | John Doe | john@example.com | 2024-01-15 |
| 2 | Jane Smith | jane@example.com | 2024-01-20 |
| 3 | Bob Wilson | bob@example.com | 2024-02-01 |
| 4 | Alice Brown | alice@example.com | 2024-02-10 |
| 5 | Charlie Davis | charlie@example.com | 2024-02-15 |`,
  errorText: undefined,
};

const Example = () => (
  <div style={{ height: "500px" }}>
    <Tool>
      <ToolHeader state={toolCall.state} type={toolCall.type} />
      <ToolContent>
        <ToolInput input={toolCall.input} />
        {toolCall.state === "output-available" && (
          <ToolOutput errorText={toolCall.errorText} output={toolCall.output} />
        )}
      </ToolContent>
    </Tool>
  </div>
);

export default Example;
</file>

<file path="packages/examples/src/v0-clone.tsx">
"use client";

import { Conversation, ConversationContent } from "@repo/elements/conversation";
import { Loader } from "@repo/elements/loader";
import { Message, MessageContent } from "@repo/elements/message";
import {
  PromptInput,
  type PromptInputMessage,
  PromptInputSubmit,
  PromptInputTextarea,
} from "@repo/elements/prompt-input";
import { Suggestion, Suggestions } from "@repo/elements/suggestion";
import {
  WebPreview,
  WebPreviewBody,
  WebPreviewNavigation,
  WebPreviewUrl,
} from "@repo/elements/web-preview";
import { nanoid } from "nanoid";
import { useState } from "react";

type Chat = {
  id: string;
  demo: string;
};

export default function Home() {
  const [message, setMessage] = useState("");
  const [currentChat, setCurrentChat] = useState<Chat | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState<
    Array<{
      id: string;
      type: "user" | "assistant";
      content: string;
    }>
  >([]);

  const handleSendMessage = async (promptMessage: PromptInputMessage) => {
    const hasText = Boolean(promptMessage.text);
    const hasAttachments = Boolean(promptMessage.files?.length);

    if (!(hasText || hasAttachments) || isLoading) {
      return;
    }

    const userMessage = promptMessage.text?.trim() || "Sent with attachments";
    setMessage("");
    setIsLoading(true);

    setChatHistory((prev) => [
      ...prev,
      { id: nanoid(), type: "user", content: userMessage },
    ]);

    try {
      const response = await fetch("/api/v0", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: userMessage,
          chatId: currentChat?.id,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to create chat");
      }

      const chat: Chat = await response.json();
      setCurrentChat(chat);

      setChatHistory((prev) => [
        ...prev,
        {
          id: nanoid(),
          type: "assistant",
          content: "Generated new app preview. Check the preview panel!",
        },
      ]);
    } catch (error) {
      console.error("Error:", error);
      setChatHistory((prev) => [
        ...prev,
        {
          id: nanoid(),
          type: "assistant",
          content:
            "Sorry, there was an error creating your app. Please try again.",
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex h-[800px]">
      {/* Chat Panel */}
      <div className="flex w-1/2 flex-col border-r">
        {/* Header */}
        <div className="flex h-14 items-center justify-between border-b p-3">
          <h1 className="font-semibold text-lg">v0 Clone</h1>
        </div>

        <div className="flex-1 space-y-4 overflow-y-auto p-4">
          {chatHistory.length === 0 ? (
            <div className="mt-8 text-center font-semibold">
              <p className="mt-4 text-3xl">What can we build together?</p>
            </div>
          ) : (
            <>
              <Conversation>
                <ConversationContent>
                  {chatHistory.map((msg) => (
                    <Message from={msg.type} key={msg.id}>
                      <MessageContent>{msg.content}</MessageContent>
                    </Message>
                  ))}
                </ConversationContent>
              </Conversation>
              {isLoading && (
                <Message from="assistant">
                  <MessageContent>
                    <p className="flex items-center gap-2">
                      <Loader />
                      Creating your app...
                    </p>
                  </MessageContent>
                </Message>
              )}
            </>
          )}
        </div>

        {/* Input */}
        <div className="border-t p-4">
          {!currentChat && (
            <Suggestions>
              <Suggestion
                onClick={() =>
                  setMessage("Create a responsive navbar with Tailwind CSS")
                }
                suggestion="Create a responsive navbar with Tailwind CSS"
              />
              <Suggestion
                onClick={() => setMessage("Build a todo app with React")}
                suggestion="Build a todo app with React"
              />
              <Suggestion
                onClick={() =>
                  setMessage("Make a landing page for a coffee shop")
                }
                suggestion="Make a landing page for a coffee shop"
              />
            </Suggestions>
          )}
          <div className="flex gap-2">
            <PromptInput
              className="relative mx-auto mt-4 w-full max-w-2xl"
              onSubmit={handleSendMessage}
            >
              <PromptInputTextarea
                className="min-h-[60px] pr-12"
                onChange={(e) => setMessage(e.target.value)}
                value={message}
              />
              <PromptInputSubmit
                className="absolute right-1 bottom-1"
                disabled={!message}
                status={isLoading ? "streaming" : "ready"}
              />
            </PromptInput>
          </div>
        </div>
      </div>

      {/* Preview Panel */}
      <div className="flex w-1/2 flex-col">
        <WebPreview>
          <WebPreviewNavigation>
            <WebPreviewUrl
              placeholder="Your app here..."
              value={currentChat?.demo}
            />
          </WebPreviewNavigation>
          <WebPreviewBody src={currentChat?.demo} />
        </WebPreview>
      </div>
    </div>
  );
}
</file>

<file path="packages/examples/src/web-preview.tsx">
"use client";

import {
  WebPreview,
  WebPreviewBody,
  WebPreviewConsole,
  WebPreviewNavigation,
  WebPreviewNavigationButton,
  WebPreviewUrl,
} from "@repo/elements/web-preview";
import {
  ArrowLeftIcon,
  ArrowRightIcon,
  ExternalLinkIcon,
  Maximize2Icon,
  MousePointerClickIcon,
  RefreshCcwIcon,
} from "lucide-react";
import { useState } from "react";

const exampleLogs = [
  {
    level: "log" as const,
    message: "Page loaded successfully",
    timestamp: new Date(Date.now() - 10_000),
  },
  {
    level: "warn" as const,
    message: "Deprecated API usage detected",
    timestamp: new Date(Date.now() - 5000),
  },
  {
    level: "error" as const,
    message: "Failed to load resource",
    timestamp: new Date(),
  },
];

const code = [
  {
    language: "jsx",
    filename: "MyComponent.jsx",
    code: `function MyComponent(props) {
  return (
    <div>
      <h1>Hello, {props.name}!</h1>
      <p>This is an example React component.</p>
    </div>
  );
}`,
  },
];

const Example = () => {
  const [fullscreen, setFullscreen] = useState(false);

  return (
    <WebPreview
      defaultUrl="/"
      onUrlChange={(url) => console.log("URL changed to:", url)}
      style={{ height: "400px" }}
    >
      <WebPreviewNavigation>
        <WebPreviewNavigationButton
          onClick={() => console.log("Go back")}
          tooltip="Go back"
        >
          <ArrowLeftIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => console.log("Go forward")}
          tooltip="Go forward"
        >
          <ArrowRightIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => console.log("Reload")}
          tooltip="Reload"
        >
          <RefreshCcwIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewUrl />
        <WebPreviewNavigationButton
          onClick={() => console.log("Select")}
          tooltip="Select"
        >
          <MousePointerClickIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => console.log("Open in new tab")}
          tooltip="Open in new tab"
        >
          <ExternalLinkIcon className="size-4" />
        </WebPreviewNavigationButton>
        <WebPreviewNavigationButton
          onClick={() => setFullscreen(!fullscreen)}
          tooltip="Maximize"
        >
          <Maximize2Icon className="size-4" />
        </WebPreviewNavigationButton>
      </WebPreviewNavigation>

      <WebPreviewBody src="https://preview-v0me-kzml7zc6fkcvbyhzrf47.vusercontent.net/" />

      <WebPreviewConsole logs={exampleLogs} />
    </WebPreview>
  );
};

export default Example;
</file>

<file path="packages/examples/package.json">
{
  "name": "@repo/examples",
  "description": "Examples for the repo.",
  "version": "0.0.0",
  "private": true,
  "exports": {
    "./*": "./src/*.tsx"
  },
  "dependencies": {
    "@icons-pack/react-simple-icons": "^13.7.0",
    "@repo/elements": "workspace:*",
    "ai": "5.0.37",
    "lucide-react": "^0.542.0",
    "nanoid": "^5.1.5",
    "react": "19.1.1",
    "sonner": "^2.0.7"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/react": "19.1.12",
    "typescript": "^5.9.2"
  }
}
</file>

<file path="packages/examples/tsconfig.json">
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@repo/*": ["../*"],
      "@/components/*": ["../shadcn-ui/components/*"],
      "@/lib/*": ["../shadcn-ui/lib/*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/registry/index.js">
#!/usr/bin/env node

const { spawnSync } = require("node:child_process");

// Function to detect the command used to invoke this script
function getCommandPrefix() {
  // Check for common package manager environment variables
  if (process.env.npm_config_user_agent) {
    const userAgent = process.env.npm_config_user_agent;

    if (userAgent.includes("pnpm")) {
      return "pnpm dlx";
    }
    if (userAgent.includes("yarn")) {
      return "yarn dlx";
    }
    if (userAgent.includes("bun")) {
      return "bunx";
    }
  }

  // Default fallback
  return "npx -y";
}

const commandPrefix = getCommandPrefix();

// Parse command line arguments
const args = process.argv.slice(2);

// Set the path as 'all' if no component is provided
const component = args.length >= 2 ? args[1] : "all";

// Get the target URL
const targetUrl = new URL(
  `/${component}.json`,
  "https://registry.ai-sdk.dev"
).toString();

const fullCommand = `${commandPrefix} shadcn@latest add ${targetUrl}`;
const result = spawnSync(fullCommand, {
  stdio: "inherit",
  shell: true,
});

if (result.error) {
  console.error("Failed to execute command:", result.error.message);
  process.exit(1);
} else if (result.status !== 0) {
  console.error(`Command failed with exit code ${result.status}`);
  process.exit(1);
}
</file>

<file path="packages/registry/LICENSE">
Copyright 2023 Vercel, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</file>

<file path="packages/registry/package.json">
{
  "name": "ai-elements",
  "version": "1.1.2",
  "description": "AI Elements is a component library and custom registry built on top of shadcn/ui to help you build AI-native applications faster.",
  "bin": {
    "elements": "index.js"
  },
  "files": [
    "index.js",
    "README.md",
    "LICENSE"
  ]
}
</file>

<file path="packages/registry/README.md">
# ▲ AI Elements

A command-line interface for installing [AI Elements](https://ai-sdk.dev/elements) components - a component library built on top of [shadcn/ui](https://ui.shadcn.com/) to help you build AI-native applications faster.

## Overview

AI Elements provides pre-built, customizable React components specifically designed for AI applications, including conversations, messages, code blocks, reasoning displays, and more. The CLI makes it easy to add these components to your Next.js project.

## Installation

You can use the AI Elements CLI directly with npx, or install it globally:

```bash
# Use directly (recommended)
npx ai-elements@latest

# Or using shadcn cli
npx shadcn@latest add https://registry.ai-sdk.dev/all.json
```

## Prerequisites

Before using AI Elements, ensure your project meets these requirements:

- **Node.js** 18 or later
- **Next.js** project with [AI SDK](https://ai-sdk.dev/) installed
- **shadcn/ui** initialized in your project (`npx shadcn@latest init`)
- **Tailwind CSS** configured (AI Elements supports CSS Variables mode only)

## Usage

### Install All Components

Install all available AI Elements components at once:

```bash
npx ai-elements@latest
```

This command will:
- Set up shadcn/ui if not already configured
- Install all AI Elements components to your configured components directory
- Add necessary dependencies to your project

### Install Specific Components

Install individual components using the `add` command:

```bash
npx ai-elements@latest add <component-name>
```

Examples:
```bash
# Install the message component
npx ai-elements@latest add message

# Install the conversation component
npx ai-elements@latest add conversation

# Install the code-block component
npx ai-elements@latest add code-block
```

### Alternative: Use with shadcn CLI

You can also install components using the standard shadcn/ui CLI:

```bash
# Install all components
npx shadcn@latest add https://registry.ai-sdk.dev/all.json

# Install a specific component
npx shadcn@latest add https://registry.ai-sdk.dev/message.json
```

## Available Components

AI Elements includes the following components:

| Component | Description |
|-----------|-------------|
| `actions` | Interactive action buttons for AI responses |
| `branch` | Branch visualization for conversation flows |
| `code-block` | Syntax-highlighted code display with copy functionality |
| `conversation` | Container for chat conversations |
| `image` | AI-generated image display component |
| `inline-citation` | Inline source citations |
| `loader` | Loading states for AI operations |
| `message` | Individual chat messages with avatars |
| `prompt-form` | Controlled form wrapper for prompt submission |
| `prompt-input` | Advanced input component with model selection |
| `prompt-input-attachments` | Opt-in file/image attachments for prompt input |
| `reasoning` | Display AI reasoning and thought processes |
| `response` | Formatted AI response display |
| `source` | Source attribution component |
| `suggestion` | Quick action suggestions |
| `task` | Task completion tracking |
| `tool` | Tool usage visualization |
| `web-preview` | Embedded web page previews |

## Quick Start Example

After installing components, you can use them in your React application:

```tsx
'use client';

import { useChat } from '@ai-sdk/react';
import {
  Conversation,
  ConversationContent,
} from '@/components/ai-elements/conversation';
import {
  Message,
  MessageContent,
} from '@/components/ai-elements/message';
import { Response } from '@/components/ai-elements/response';

export default function Chat() {
  const { messages } = useChat();

  return (
    <Conversation>
      <ConversationContent>
        {messages.map((message, index) => (
          <Message key={index} from={message.role}>
            <MessageContent>
              <Response>{message.content}</Response>
            </MessageContent>
          </Message>
        ))}
      </ConversationContent>
    </Conversation>
  );
}
```

## How It Works

The AI Elements CLI:

1. **Detects your package manager** (npm, pnpm, yarn, or bun) automatically
2. **Fetches component registry** from `https://registry.ai-sdk.dev/registry.json`
3. **Installs components** using the shadcn/ui CLI under the hood
4. **Adds dependencies** and integrates with your existing shadcn/ui setup

Components are installed to your configured shadcn/ui components directory (typically `@/components/ai-elements/`) and become part of your codebase, allowing for full customization.

## Configuration

AI Elements uses your existing shadcn/ui configuration. Components will be installed to the directory specified in your `components.json` file.

## Recommended Setup

For the best experience, we recommend:

1. **AI Gateway**: Set up [Vercel AI Gateway](https://vercel.com/docs/ai-gateway) and add `AI_GATEWAY_API_KEY` to your `.env.local`
2. **CSS Variables**: Use shadcn/ui's CSS Variables mode for theming
3. **TypeScript**: Enable TypeScript for better development experience

---

Made with ❤️ by [Vercel](https://vercel.com)
</file>

<file path="packages/shadcn-ui/components/ui/accordion.tsx">
"use client"

import * as React from "react"
import { Accordion as AccordionPrimitive } from "radix-ui";
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="packages/shadcn-ui/components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import { AlertDialog as AlertDialogPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"
import { buttonVariants } from "@repo/shadcn-ui/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="packages/shadcn-ui/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/shadcn-ui/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="packages/shadcn-ui/components/ui/aspect-ratio.tsx">
"use client"

import { AspectRatio as AspectRatioPrimitive } from "radix-ui";

function AspectRatio({
  ...props
}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />
}

export { AspectRatio }
</file>

<file path="packages/shadcn-ui/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import { Avatar as AvatarPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="packages/shadcn-ui/components/ui/badge.tsx">
import * as React from "react"
import { Slot as SlotPrimitive } from "radix-ui";
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/shadcn-ui/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? SlotPrimitive.Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
</file>

<file path="packages/shadcn-ui/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot as SlotPrimitive } from "radix-ui";
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Breadcrumb({ ...props }: React.ComponentProps<"nav">) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />
}

function BreadcrumbList({ className, ...props }: React.ComponentProps<"ol">) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props}
    />
  )
}

function BreadcrumbItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props}
    />
  )
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
}) {
  const Comp = asChild ? SlotPrimitive.Slot : "a"

  return (
    <Comp
      data-slot="breadcrumb-link"
      className={cn("hover:text-foreground transition-colors", className)}
      {...props}
    />
  )
}

function BreadcrumbPage({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("text-foreground font-normal", className)}
      {...props}
    />
  )
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:size-3.5", className)}
      {...props}
    >
      {children ?? <ChevronRight />}
    </li>
  )
}

function BreadcrumbEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontal className="size-4" />
      <span className="sr-only">More</span>
    </span>
  )
}

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="packages/shadcn-ui/components/ui/button.tsx">
import * as React from "react"
import { Slot as SlotPrimitive } from "radix-ui";
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/shadcn-ui/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? SlotPrimitive.Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="packages/shadcn-ui/components/ui/calendar.tsx">
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@repo/shadcn-ui/lib/utils"
import { Button, buttonVariants } from "@repo/shadcn-ui/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn("absolute inset-0 opacity-0", defaultClassNames.dropdown),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }
</file>

<file path="packages/shadcn-ui/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="packages/shadcn-ui/components/ui/carousel.tsx">
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"
import { Button } from "@repo/shadcn-ui/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="packages/shadcn-ui/components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@repo/shadcn-ui/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<"div"> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >["children"]
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
  React.ComponentProps<"div"> & {
    hideLabel?: boolean
    hideIndicator?: boolean
    indicator?: "line" | "dot" | "dashed"
    nameKey?: string
    labelKey?: string
  }) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }

    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label

    if (labelFormatter) {
      return (
        <div className={cn("font-medium", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }

    if (!value) {
      return null
    }

    return <div className={cn("font-medium", labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== "dot"

  return (
    <div
      className={cn(
        "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                indicator === "dot" && "items-center"
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          "shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)",
                          {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent":
                              indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          }
                        )}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center"
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}

const ChartLegend = RechartsPrimitive.Legend

function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey,
}: React.ComponentProps<"div"> &
  Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
    hideIcon?: boolean
    nameKey?: string
  }) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="packages/shadcn-ui/components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import { Checkbox as CheckboxPrimitive } from "radix-ui";
import { CheckIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }
</file>

<file path="packages/shadcn-ui/components/ui/collapsible.tsx">
"use client"

import { Collapsible as CollapsiblePrimitive } from "radix-ui";

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="packages/shadcn-ui/components/ui/command.tsx">
"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@repo/shadcn-ui/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn("overflow-hidden p-0", className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="packages/shadcn-ui/components/ui/context-menu.tsx">
"use client"

import * as React from "react"
import { ContextMenu as ContextMenuPrimitive } from "radix-ui";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />
}

function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  )
}

function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  )
}

function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  )
}

function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />
}

function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  )
}

function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  )
}

function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
}

function ContextMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
}

function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
}

function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        "text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="packages/shadcn-ui/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import { Dialog as DialogPrimitive } from "radix-ui";
import { XIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="packages/shadcn-ui/components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-header"
      className={cn(
        "flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left",
        className
      )}
      {...props}
    />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="packages/shadcn-ui/components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import { DropdownMenu as DropdownMenuPrimitive } from "radix-ui";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="packages/shadcn-ui/components/ui/form.tsx">
"use client"

import * as React from "react"
import { Label as LabelPrimitive, Slot as SlotPrimitive } from "radix-ui";

import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@repo/shadcn-ui/lib/utils"
import { Label } from "@repo/shadcn-ui/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof SlotPrimitive.Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <SlotPrimitive.Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="packages/shadcn-ui/components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import { HoverCard as HoverCardPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function HoverCard({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {
  return <HoverCardPrimitive.Root data-slot="hover-card" {...props} />
}

function HoverCardTrigger({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {
  return (
    <HoverCardPrimitive.Trigger data-slot="hover-card-trigger" {...props} />
  )
}

function HoverCardContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {
  return (
    <HoverCardPrimitive.Portal data-slot="hover-card-portal">
      <HoverCardPrimitive.Content
        data-slot="hover-card-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </HoverCardPrimitive.Portal>
  )
}

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="packages/shadcn-ui/components/ui/input-otp.tsx">
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { MinusIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        "flex items-center gap-2 has-disabled:opacity-50",
        containerClassName
      )}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  )
}

function InputOTPGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn("flex items-center", className)}
      {...props}
    />
  )
}

function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<"div"> & {
  index: number
}) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        "data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  )
}

function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  )
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="packages/shadcn-ui/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
</file>

<file path="packages/shadcn-ui/components/ui/label.tsx">
"use client"

import * as React from "react"
import { Label as LabelPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
</file>

<file path="packages/shadcn-ui/components/ui/menubar.tsx">
"use client"

import * as React from "react"
import { Menubar as MenubarPrimitive } from "radix-ui";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Menubar({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Root>) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        "bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs",
        className
      )}
      {...props}
    />
  )
}

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return (
    <MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />
  )
}

function MenubarTrigger({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none",
        className
      )}
      {...props}
    />
  )
}

function MenubarContent({
  className,
  align = "start",
  alignOffset = -4,
  sideOffset = 8,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Content>) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </MenubarPortal>
  )
}

function MenubarItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  )
}

function MenubarRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  )
}

function MenubarLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function MenubarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function MenubarShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  )
}

function MenubarSubContent({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
}
</file>

<file path="packages/shadcn-ui/components/ui/navigation-menu.tsx">
import * as React from "react"
import { NavigationMenu as NavigationMenuPrimitive } from "radix-ui";
import { cva } from "class-variance-authority"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  )
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        "group flex flex-1 list-none items-center justify-center gap-1",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn("relative", className)}
      {...props}
    />
  )
}

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1"
)

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}
    >
      {children}{" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  )
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        "absolute top-full left-0 isolate z-50 flex justify-center"
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
          className
        )}
        {...props}
      />
    </div>
  )
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  )
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
}
</file>

<file path="packages/shadcn-ui/components/ui/pagination.tsx">
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"
import { Button, buttonVariants } from "@repo/shadcn-ui/components/ui/button"

function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}

function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}

function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">

function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}

function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}

function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}

function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}
</file>

<file path="packages/shadcn-ui/components/ui/popover.tsx">
"use client"

import * as React from "react"
import { Popover as PopoverPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
</file>

<file path="packages/shadcn-ui/components/ui/progress.tsx">
"use client"

import * as React from "react"
import { Progress as ProgressPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
</file>

<file path="packages/shadcn-ui/components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import { RadioGroup as RadioGroupPrimitive } from "radix-ui";
import { CircleIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }
</file>

<file path="packages/shadcn-ui/components/ui/resizable.tsx">
"use client"

import * as React from "react"
import { GripVerticalIcon } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@repo/shadcn-ui/lib/utils"

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className
      )}
      {...props}
    />
  )
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="packages/shadcn-ui/components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import { ScrollArea as ScrollAreaPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }
</file>

<file path="packages/shadcn-ui/components/ui/select.tsx">
"use client"

import * as React from "react"
import { Select as SelectPrimitive } from "radix-ui";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="packages/shadcn-ui/components/ui/separator.tsx">
"use client"

import * as React from "react"
import { Separator as SeparatorPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }
</file>

<file path="packages/shadcn-ui/components/ui/sheet.tsx">
"use client"

import * as React from "react"
import { Dialog as SheetPrimitive } from "radix-ui";
import { XIcon } from "lucide-react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="packages/shadcn-ui/components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { Slot as SlotPrimitive } from "radix-ui";
import { cva, VariantProps } from "class-variance-authority"
import { PanelLeftIcon } from "lucide-react"

import { useIsMobile } from "@repo/shadcn-ui/hooks/use-mobile"
import { cn } from "@repo/shadcn-ui/lib/utils"
import { Button } from "@repo/shadcn-ui/components/ui/button"
import { Input } from "@repo/shadcn-ui/components/ui/input"
import { Separator } from "@repo/shadcn-ui/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@repo/shadcn-ui/components/ui/sheet"
import { Skeleton } from "@repo/shadcn-ui/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@repo/shadcn-ui/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContextProps = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  defaultOpen?: boolean
  open?: boolean
  onOpenChange?: (open: boolean) => void
}) {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value
      if (setOpenProp) {
        setOpenProp(openState)
      } else {
        _setOpen(openState)
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
    },
    [setOpenProp, open]
  )

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)
  }, [isMobile, setOpen, setOpenMobile])

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [toggleSidebar])

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed"

  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
  )

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            "group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full",
            className
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  )
}

function Sidebar({
  side = "left",
  variant = "sidebar",
  collapsible = "offcanvas",
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  side?: "left" | "right"
  variant?: "sidebar" | "floating" | "inset"
  collapsible?: "offcanvas" | "icon" | "none"
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === "none") {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          "bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col",
          className
        )}
        {...props}
      >
        {children}
      </div>
    )
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    )
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)"
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  )
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("size-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
}

function SidebarRail({ className, ...props }: React.ComponentProps<"button">) {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex",
        "in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
}

function SidebarInset({ className, ...props }: React.ComponentProps<"main">) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        "bg-background relative flex w-full flex-1 flex-col",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2",
        className
      )}
      {...props}
    />
  )
}

function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn("bg-background h-8 w-full shadow-none", className)}
      {...props}
    />
  )
}

function SidebarHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
}

function SidebarFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
}

function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props}
    />
  )
}

function SidebarContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"div"> & { asChild?: boolean }) {
  const Comp = asChild ? SlotPrimitive.Slot : "div"

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> & { asChild?: boolean }) {
  const Comp = asChild ? SlotPrimitive.Slot : "button"

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn("w-full text-sm", className)}
      {...props}
    />
  )
}

function SidebarMenu({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn("flex w-full min-w-0 flex-col gap-1", className)}
      {...props}
    />
  )
}

function SidebarMenuItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn("group/menu-item relative", className)}
      {...props}
    />
  )
}

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = "default",
  size = "default",
  tooltip,
  className,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean
  isActive?: boolean
  tooltip?: string | React.ComponentProps<typeof TooltipContent>
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? SlotPrimitive.Slot : "button"
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip}
      />
    </Tooltip>
  )
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean
  showOnHover?: boolean
}) {
  const Comp = asChild ? SlotPrimitive.Slot : "button"

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className
      )}
      {...props}
    />
  )
}

function SidebarMenuBadge({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<"div"> & {
  showIcon?: boolean
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarMenuSubItem({
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn("group/menu-sub-item relative", className)}
      {...props}
    />
  )
}

function SidebarMenuSubButton({
  asChild = false,
  size = "md",
  isActive = false,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
  size?: "sm" | "md"
  isActive?: boolean
}) {
  const Comp = asChild ? SlotPrimitive.Slot : "a"

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="packages/shadcn-ui/components/ui/skeleton.tsx">
import { cn } from "@repo/shadcn-ui/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="packages/shadcn-ui/components/ui/slider.tsx">
"use client"

import * as React from "react"
import { Slider as SliderPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }
</file>

<file path="packages/shadcn-ui/components/ui/sonner.tsx">
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="packages/shadcn-ui/components/ui/switch.tsx">
"use client"

import * as React from "react"
import { Switch as SwitchPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
</file>

<file path="packages/shadcn-ui/components/ui/table.tsx">
"use client"

import * as React from "react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="packages/shadcn-ui/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import { Tabs as TabsPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="packages/shadcn-ui/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@repo/shadcn-ui/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }
</file>

<file path="packages/shadcn-ui/components/ui/toast.tsx">
"use client"

import * as React from "react"
import { Toast as ToastPrimitives } from "radix-ui";
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@repo/shadcn-ui/lib/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="packages/shadcn-ui/components/ui/toaster.tsx">
"use client"

import { useToast } from "@repo/shadcn-ui/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@repo/shadcn-ui/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="packages/shadcn-ui/components/ui/toggle-group.tsx">
"use client"

import * as React from "react"
import { ToggleGroup as ToggleGroupPrimitive } from "radix-ui";
import { type VariantProps } from "class-variance-authority"

import { cn } from "@repo/shadcn-ui/lib/utils"
import { toggleVariants } from "@repo/shadcn-ui/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        "group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs",
        className
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        "min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
}

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="packages/shadcn-ui/components/ui/toggle.tsx">
"use client"

import * as React from "react"
import { Toggle as TogglePrimitive } from "radix-ui";
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@repo/shadcn-ui/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Toggle, toggleVariants }
</file>

<file path="packages/shadcn-ui/components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import { Tooltip as TooltipPrimitive } from "radix-ui";

import { cn } from "@repo/shadcn-ui/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="packages/shadcn-ui/hooks/use-mobile.ts">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="packages/shadcn-ui/hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@repo/shadcn-ui/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="packages/shadcn-ui/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="packages/shadcn-ui/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "../../apps/docs/app/global.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@repo/shadcn-ui/components",
    "utils": "@repo/shadcn-ui/lib/utils",
    "hooks": "@repo/shadcn-ui/hooks",
    "lib": "@repo/shadcn-ui/lib",
    "ui": "@repo/shadcn-ui/components/ui"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="packages/shadcn-ui/package.json">
{
  "name": "@repo/shadcn-ui",
  "version": "0.0.0",
  "private": true,
  "dependencies": {
    "@hookform/resolvers": "^5.2.1",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-slot": "^1.2.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.542.0",
    "next-themes": "^0.4.6",
    "radix-ui": "latest",
    "react": "19.1.1",
    "react-day-picker": "9.9.0",
    "react-dom": "19.1.1",
    "react-hook-form": "^7.62.0",
    "react-resizable-panels": "^3.0.5",
    "recharts": "^3.1.2",
    "sonner": "^2.0.7",
    "tailwind-merge": "^3.3.1",
    "vaul": "^1.1.2",
    "zod": "^4.1.5"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "@types/react": "19.1.12",
    "@types/react-dom": "^19.1.9"
  }
}
</file>

<file path="packages/shadcn-ui/tsconfig.json">
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "baseUrl": ".",
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@repo/shadcn-ui/*": ["./*"],
      "@repo/*": ["../*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/typescript-config/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "incremental": false,
    "isolatedModules": true,
    "lib": ["es2022", "DOM", "DOM.Iterable"],
    "module": "NodeNext",
    "moduleDetection": "force",
    "moduleResolution": "NodeNext",
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ES2022",
    "strictNullChecks": true
  }
}
</file>

<file path="packages/typescript-config/nextjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "allowJs": true,
    "jsx": "preserve",
    "noEmit": true,
    "paths": {
      "@/*": ["./*"],
      "@repo/*": ["../../packages/*"]
    }
  },
  "exclude": ["node_modules"]
}
</file>

<file path="packages/typescript-config/package.json">
{
  "name": "@repo/typescript-config",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  }
}
</file>

<file path="packages/typescript-config/react-library.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx"
  }
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# Dependencies
node_modules
.pnp
.pnp.js

# Local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Testing
coverage

# Turbo
.turbo

# Vercel
.vercel

# Build Outputs
.next/
out/
build
dist


# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Misc
.DS_Store
*.pem
</file>

<file path="biome.jsonc">
{
  "$schema": "./node_modules/@biomejs/biome/configuration_schema.json",
  "extends": ["ultracite"],
  "files": {
    "includes": ["**/*", "!packages/shadcn-ui/**/*"]
  }
}
</file>

<file path="LICENSE">
Copyright 2023 Vercel, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</file>

<file path="package.json">
{
  "name": "ai-elements",
  "private": true,
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev"
  },
  "devDependencies": {
    "@biomejs/biome": "2.2.3",
    "turbo": "^2.5.6",
    "typescript": "5.9.2",
    "ultracite": "5.3.4"
  },
  "packageManager": "pnpm@10.15.1",
  "engines": {
    "node": ">=18"
  }
}
</file>

<file path="pnpm-workspace.yaml">
packages:
  - "apps/*"
  - "packages/*"
</file>

<file path="README.md">
# ▲ AI Elements

[AI Elements](https://ai-sdk.dev/elements) is a component library built on top of [shadcn/ui](https://ui.shadcn.com/) to help you build AI-native applications faster.

## Overview

AI Elements provides pre-built, customizable React components specifically designed for AI applications, including conversations, messages, code blocks, reasoning displays, and more. The CLI makes it easy to add these components to your Next.js project.

## Installation

You can use the AI Elements CLI directly with npx, or install it globally:

```bash
# Use directly (recommended)
npx ai-elements@latest

# Or using shadcn cli
npx shadcn@latest add https://registry.ai-sdk.dev/all.json
```

## Prerequisites

Before using AI Elements, ensure your project meets these requirements:

- **Node.js** 18 or later
- **Next.js** project with [AI SDK](https://ai-sdk.dev/) installed
- **shadcn/ui** initialized in your project (`npx shadcn@latest init`)
- **Tailwind CSS** configured (AI Elements supports CSS Variables mode only)

## Usage

### Install All Components

Install all available AI Elements components at once:

```bash
npx ai-elements@latest
```

This command will:
- Set up shadcn/ui if not already configured
- Install all AI Elements components to your configured components directory
- Add necessary dependencies to your project

### Install Specific Components

Install individual components using the `add` command:

```bash
npx ai-elements@latest add <component-name>
```

Examples:
```bash
# Install the message component
npx ai-elements@latest add message

# Install the conversation component
npx ai-elements@latest add conversation

# Install the code-block component
npx ai-elements@latest add code-block
```

### Alternative: Use with shadcn CLI

You can also install components using the standard shadcn/ui CLI:

```bash
# Install all components
npx shadcn@latest add https://registry.ai-sdk.dev/all.json

# Install a specific component
npx shadcn@latest add https://registry.ai-sdk.dev/message.json
```

## Available Components

AI Elements includes the following components:

| Component                  | Description                                             |
| -------------------------- | ------------------------------------------------------- |
| `actions`                  | Interactive action buttons for AI responses             |
| `artifact`                 | Display a code or document                              |
| `branch`                   | Branch visualization for conversation flows             |
| `chain-of-thought`         | Display AI reasoning and thought processes              |
| `code-block`               | Syntax-highlighted code display with copy functionality |
| `context`                  | Display Context consumption                             |
| `conversation`             | Container for chat conversations                        |
| `image`                    | AI-generated image display component                    |
| `inline-citation`          | Inline source citations                                 |
| `loader`                   | Loading states for AI operations                        |
| `message`                  | Individual chat messages with avatars                   |
| `open-in-chat`             | Open in chat button for a message                       |
| `prompt-input`             | Advanced input component with model selection           |
| `reasoning`                | Display AI reasoning and thought processes              |
| `response`                 | Formatted AI response display                           |
| `sources`                  | Source attribution component                            |
| `suggestion`               | Quick action suggestions                                |
| `task`                     | Task completion tracking                                |
| `tool`                     | Tool usage visualization                                |
| `web-preview`              | Embedded web page previews                              |

## Quick Start Example

After installing components, you can use them in your React application:

```tsx
'use client';

import { useChat } from '@ai-sdk/react';
import {
  Conversation,
  ConversationContent,
} from '@/components/ai-elements/conversation';
import {
  Message,
  MessageContent,
} from '@/components/ai-elements/message';
import { Response } from '@/components/ai-elements/response';

export default function Chat() {
  const { messages } = useChat();

  return (
    <Conversation>
      <ConversationContent>
        {messages.map((message, index) => (
          <Message key={index} from={message.role}>
            <MessageContent>
              <Response>{message.content}</Response>
            </MessageContent>
          </Message>
        ))}
      </ConversationContent>
    </Conversation>
  );
}
```

## How It Works

The AI Elements CLI:

1. **Detects your package manager** (npm, pnpm, yarn, or bun) automatically
2. **Fetches component registry** from `https://registry.ai-sdk.dev/registry.json`
3. **Installs components** using the shadcn/ui CLI under the hood
4. **Adds dependencies** and integrates with your existing shadcn/ui setup

Components are installed to your configured shadcn/ui components directory (typically `@/components/ai-elements/`) and become part of your codebase, allowing for full customization.

## Configuration

AI Elements uses your existing shadcn/ui configuration. Components will be installed to the directory specified in your `components.json` file.

## Recommended Setup

For the best experience, we recommend:

1. **AI Gateway**: Set up [Vercel AI Gateway](https://vercel.com/docs/ai-gateway) and add `AI_GATEWAY_API_KEY` to your `.env.local`
2. **CSS Variables**: Use shadcn/ui's CSS Variables mode for theming
3. **TypeScript**: Enable TypeScript for better development experience

## Contributing

If you'd like to contribute to AI Elements, please follow these steps:

1. Fork the repository
2. Create a new branch
3. Make your changes to the components in `packages/elements`.
4. Open a PR to the `main` branch.

---

Made with ❤️ by [Vercel](https://vercel.com)
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "strictNullChecks": true
  }
}
</file>

<file path="turbo.json">
{
  "$schema": "https://turborepo.com/schema.json",
  "ui": "tui",
  "tasks": {
    "build": {
      "dependsOn": ["^build"],
      "inputs": ["$TURBO_DEFAULT$", ".env*"],
      "outputs": [".next/**", "!.next/cache/**"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    }
  }
}
</file>

</files>
